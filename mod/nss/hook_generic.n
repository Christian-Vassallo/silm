extern("inc_events")
extern("inc_jvm")

#undef DestroyObject
void Hook_DestroyObject(object oObject, float fDelay = 0.0) {
	//RunEventScriptsFor(EVENT_TYPE_GLOBAL, EVENT_GLOBAL_OBJECT_DESTROY, 
	//	oObject, oObject, OBJECT_INVALID, GetLocation(oObject), EVENT_MODE_SYNC);
	DestroyObject(oObject, fDelay);
}

#undef CreateObject
object Hook_CreateObject(int nObjectType, string sTemplate, location lLocation,
		int bUseAppearAnimation = FALSE, string sNewTag = "") {
	
	object o = CreateObject(nObjectType, sTemplate, lLocation,
		bUseAppearAnimation, sNewTag);

/*	if (is_valid(o)) {
		int ret = RunEventScriptsFor(EVENT_TYPE_GLOBAL, EVENT_GLOBAL_OBJECT_CREATE,
			o, o, OBJECT_INVALID, GetLocation(o), EVENT_MODE_SYNC);
		if (EVENT_RESULT_STOP & ret) 
			DestroyObject(o);
	}*/

	return o;
}

#undef SetXP
void Hook_SetXP(object oCreature, int nXpAmount) {
//	struct EventArguments ea;
//	ea.i0 = nXpAmount;
//	int ret = RunEventScriptsForWithArgv(EVENT_TYPE_GLOBAL, EVENT_GLOBAL_XP_SET,
//		oCreature, oCreature, OBJECT_INVALID, GetLocation(oCreature), ea, EVENT_MODE_SYNC);
	SetXP(oCreature, nXpAmount);
}

#undef GiveXPToCreature
void Hook_GiveXPToCreature(object oCreature, int nXpAmount) {
//	struct EventArguments ea;
//	ea.i0 = nXpAmount;
//	int ret = RunEventScriptsForWithArgv(EVENT_TYPE_GLOBAL, EVENT_GLOBAL_XP_GIVE,
//		oCreature, oCreature, OBJECT_INVALID, GetLocation(oCreature), ea, EVENT_MODE_SYNC);
	GiveXPToCreature(oCreature, nXpAmount);
}

#undef CopyItemAndModify
object Hook_CopyItemAndModify(object oItem, int nType, int nIndex, int nNewValue, int bCopyVars=FALSE) {
	object oNew = CopyItemAndModify(oItem, nType, nIndex, nNewValue, bCopyVars);
	if (GetDescription(oItem, false) != GetDescription(oItem, true))
		SetDescription(oNew, GetDescription(oItem));
	return oNew;
}

#undef CopyItem
object Hook_CopyItem(object oItem, object oTarget = OBJECT_INVALID, int copy = FALSE) {
	object oNew = CopyItem(oItem, oTarget, copy);
	if (GetDescription(oItem, false) != GetDescription(oItem, true))
		SetDescription(oNew, GetDescription(oItem));
	return oNew;
}


void _hook_jump_associates(object obj, location jumpTo, bool as_action);

#undef JumpToLocation
void Hook_JumpToLocation(location locDestination, bool jump_associates = true) {
	JumpToLocation(locDestination);
	if (jump_associates)
		_hook_jump_associates(OBJECT_SELF, locDestination, false);
}

#undef JumpToObject
void Hook_JumpToObject(object target, int a = TRUE, bool jump_associates = true) {
	JumpToObject(target, a);
	if (jump_associates)
		_hook_jump_associates(OBJECT_SELF, GetLocation(target), false);
}

#undef ActionJumpToLocation
void Hook_ActionJumpToLocation(location locDestination, bool jump_associates = true) {
	ActionJumpToLocation(locDestination);
	if (jump_associates)
		_hook_jump_associates(OBJECT_SELF, locDestination, true);
}

#undef ActionJumpToObject
void Hook_ActionJumpToObject(object target, int a = TRUE, bool jump_associates = true) {
	ActionJumpToObject(target, a);
	if (jump_associates)
		_hook_jump_associates(OBJECT_SELF, GetLocation(target), true);
}

void _hook_jump_associates(object obj, location jumpTo, bool as_action) {
	if (GetAreaFromLocation(jumpTo) != GetArea(obj))
		return; // associates will follow automagically

	if (as_action) {
		AssignCommand(GetAssociate(ASSOCIATE_TYPE_ANIMALCOMPANION, obj), ActionJumpToLocation(jumpTo));
		AssignCommand(GetAssociate(ASSOCIATE_TYPE_DOMINATED, obj), ActionJumpToLocation(jumpTo));
		AssignCommand(GetAssociate(ASSOCIATE_TYPE_FAMILIAR, obj), ActionJumpToLocation(jumpTo));
		AssignCommand(GetAssociate(ASSOCIATE_TYPE_SUMMONED, obj), ActionJumpToLocation(jumpTo));

		int i = 1;
		object assoc = GetAssociate(ASSOCIATE_TYPE_HENCHMAN, obj, i);
		while (is_valid(assoc)) {
			AssignCommand(assoc, ActionJumpToLocation(jumpTo));
			i++;
			assoc = GetAssociate(ASSOCIATE_TYPE_HENCHMAN, obj, i);
		}

	} else {
		AssignCommand(GetAssociate(ASSOCIATE_TYPE_ANIMALCOMPANION, obj), JumpToLocation(jumpTo));
		AssignCommand(GetAssociate(ASSOCIATE_TYPE_DOMINATED, obj), JumpToLocation(jumpTo));
		AssignCommand(GetAssociate(ASSOCIATE_TYPE_FAMILIAR, obj), JumpToLocation(jumpTo));
		AssignCommand(GetAssociate(ASSOCIATE_TYPE_SUMMONED, obj), JumpToLocation(jumpTo));

		int i = 1;
		object assoc = GetAssociate(ASSOCIATE_TYPE_HENCHMAN, obj, i);
		while (is_valid(assoc)) {
			AssignCommand(assoc, JumpToLocation(jumpTo));
			i++;
			assoc = GetAssociate(ASSOCIATE_TYPE_HENCHMAN, obj, i);
		}
	}
}

#undef SendMessageToPC
void Hook_SendMessageToPC(object oPC, string sMessage) {
	SetLocalString(GetModule(), "combatlog_message", sMessage);
	SendMessageToPC(oPC, sMessage);
}

#undef GetSpellTargetObject
object Hook_GetSpellTargetObject() {
	object o = GetLocalObject(GetModule(), __FILE__ + "GetSpellTargetObject");
	if (is_valid(o))
		return o;
	else
		return GetSpellTargetObject();
}

#undef GetSpellTargetLocation
location Hook_GetSpellTargetLocation() {
	location l = GetLocalLocation(GetModule(),
		__FILE__ + "GetSpellTargetLocation");
	if (is_valid(GetAreaFromLocation(l)))
		return l;
	else
		return GetSpellTargetLocation();
}

#undef GetSpellCastItem
object Hook_GetSpellCastItem() {
	object o = GetLocalObject(GetModule(), __FILE__ + "GetSpellCastItem");
	if (is_valid(o))
		return o;
	else
		return GetSpellCastItem();
}

#undef GetMetaMagicFeat
int Hook_GetMetaMagicFeat() {
	if (GetLocalInt(GetModule(), __FILE__ + "GetMetaMagicFeatEnabled"))
		return GetLocalInt(GetModule(), __FILE__ + "GetMetaMagicFeat");
	else
		return GetMetaMagicFeat();
}

#undef GetCasterLevel
int Hook_GetCasterLevel(object creature) {
	if (GetLocalInt(GetModule(), __FILE__ + "GetCasterLevelEnabled"))
		return GetLocalInt(GetModule(), __FILE__ + "GetCasterLevel");
	else
		return GetCasterLevel(creature);
}

#undef GetSpellId
int Hook_GetSpellId() {
	if (GetLocalInt(GetModule(), __FILE__ + "GetSpellIdEnabled"))
		return GetLocalInt(GetModule(), __FILE__ + "GetSpellId");
	else
		return GetSpellId();
}

#undef GetSpellSaveDC
int Hook_GetSpellSaveDC() {
	if (GetLocalInt(GetModule(), __FILE__ + "GetSpellSaveDCEnabled"))
		return GetLocalInt(GetModule(), __FILE__ + "GetSpellSaveDC");
	else
		return GetSpellSaveDC();
}

#undef ApplyEffectAtLocation
void Hook_ApplyEffectAtLocation(int nDurationType, effect eEffect,
		location lLocation, float fDuration=0.0f) {

	if (GetLocalInt(GetModule(), __FILE__ + "GetSpellIdEnabled"))
		SetEffectSpellId(eEffect, GetLocalInt(GetModule(), __FILE__ + "GetSpellId"));

	ApplyEffectAtLocation(nDurationType, eEffect, lLocation, fDuration);
}
#undef ApplyEffectToObject
void Hook_ApplyEffectToObject(int nDurationType, effect eEffect,
		object oTarget, float fDuration=0.0f) {

	if (GetLocalInt(GetModule(), __FILE__ + "GetSpellIdEnabled"))
		SetEffectSpellId(eEffect, GetLocalInt(GetModule(), __FILE__ + "GetSpellId"));

	ApplyEffectToObject(nDurationType, eEffect, oTarget, fDuration);
}

void ExecuteNamedSpellScript(object caster, object spellCastItem,
		string spellScript, int spell, int casterLevel, int metaMagic,
		int spellSaveDC, object spellTargetObject, location spellTargetLocation) {
	
	if (spell > -1) {
		SetLocalInt(GetModule(), __FILE__ + "GetSpellId", spell);
		SetLocalInt(GetModule(), __FILE__ + "GetSpellIdEnabled", 1);
	}
	if (spellSaveDC > -1) {
		SetLocalInt(GetModule(), __FILE__ + "GetSpellSaveDC", spell);
		SetLocalInt(GetModule(), __FILE__ + "GetSpellSaveDCEnabled", 1);
	}
	SetLocalInt(GetModule(), __FILE__ + "GetCasterLevelEnabled", 1);
	SetLocalInt(GetModule(), __FILE__ + "GetCasterLevel", casterLevel);
	SetLocalInt(GetModule(), __FILE__ + "GetMetaMagicFeatEnabled", 1);
	SetLocalInt(GetModule(), __FILE__ + "GetMetaMagicFeat", metaMagic);
	SetLocalObject(GetModule(), __FILE__ + "GetSpellTargetObject",
		spellTargetObject);
	SetLocalLocation(GetModule(), __FILE__ + "GetSpellTargetLocation",
		spellTargetLocation);
	SetLocalObject(GetModule(), __FILE__ + "GetSpellCastItem",
		spellCastItem);
	
	ExecuteScript(spellScript, caster);

	if (spell > -1)
		DeleteLocalInt(GetModule(), __FILE__ + "GetSpellIdEnabled");
	if (spellSaveDC > -1)
		DeleteLocalInt(GetModule(), __FILE__ + "GetSpellSaveDCEnabled");
	DeleteLocalInt(GetModule(), __FILE__ + "GetCasterLevelEnabled");
	DeleteLocalInt(GetModule(), __FILE__ + "GetMetaMagicFeatEnabled");
	DeleteLocalObject(GetModule(), __FILE__ + "GetSpellTargetObject");
	DeleteLocalObject(GetModule(), __FILE__ + "GetSpellCastItem");
	DeleteLocalLocation(GetModule(), __FILE__ + "GetSpellTargetLocation");
}

void ExecuteSpellScript(object caster, object spellCastItem,
		int spell, int casterLevel, int metaMagic, int spellSaveDC,
		object spellTargetObject, location spellTargetLocation) {

	string spellScript = Get2DAString("spells", "ImpactScript", spell);
	if (spellScript == "")
		return;
	
	ExecuteNamedSpellScript(caster, spellCastItem, spellScript, spell,
		casterLevel, metaMagic, spellSaveDC,
		spellTargetObject, spellTargetLocation);
}
