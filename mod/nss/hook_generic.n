extern("inc_events")

#undef DestroyObject
void Hook_DestroyObject(object oObject, float fDelay = 0.0) {
	//RunEventScriptsFor(EVENT_TYPE_GLOBAL, EVENT_GLOBAL_OBJECT_DESTROY, 
	//	oObject, oObject, OBJECT_INVALID, GetLocation(oObject), EVENT_MODE_SYNC);
	DestroyObject(oObject, fDelay);
}

#undef CreateObject
object Hook_CreateObject(int nObjectType, string sTemplate, location lLocation,
		int bUseAppearAnimation = FALSE, string sNewTag = "") {
	
	object o = CreateObject(nObjectType, sTemplate, lLocation,
		bUseAppearAnimation, sNewTag);

/*	if (is_valid(o)) {
		int ret = RunEventScriptsFor(EVENT_TYPE_GLOBAL, EVENT_GLOBAL_OBJECT_CREATE,
			o, o, OBJECT_INVALID, GetLocation(o), EVENT_MODE_SYNC);
		if (EVENT_RESULT_STOP & ret) 
			DestroyObject(o);
	}*/

	return o;
}

#undef SetXP
void Hook_SetXP(object oCreature, int nXpAmount) {
//	struct EventArguments ea;
//	ea.i0 = nXpAmount;
//	int ret = RunEventScriptsForWithArgv(EVENT_TYPE_GLOBAL, EVENT_GLOBAL_XP_SET,
//		oCreature, oCreature, OBJECT_INVALID, GetLocation(oCreature), ea, EVENT_MODE_SYNC);
	SetXP(oCreature, nXpAmount);
}

#undef GiveXPToCreature
void Hook_GiveXPToCreature(object oCreature, int nXpAmount) {
//	struct EventArguments ea;
//	ea.i0 = nXpAmount;
//	int ret = RunEventScriptsForWithArgv(EVENT_TYPE_GLOBAL, EVENT_GLOBAL_XP_GIVE,
//		oCreature, oCreature, OBJECT_INVALID, GetLocation(oCreature), ea, EVENT_MODE_SYNC);
	GiveXPToCreature(oCreature, nXpAmount);
}


void _hook_jump_associates(object obj, location jumpTo, bool as_action);

#undef JumpToLocation
void Hook_JumpToLocation(location locDestination, bool jump_associates = true) {
	JumpToLocation(locDestination);
	if (jump_associates)
		_hook_jump_associates(OBJECT_SELF, locDestination, false);
}

#undef JumpToObject
void Hook_JumpToObject(object target, int a = TRUE, bool jump_associates = true) {
	JumpToObject(target, a);
	if (jump_associates)
		_hook_jump_associates(OBJECT_SELF, GetLocation(target), false);
}

#undef ActionJumpToLocation
void Hook_ActionJumpToLocation(location locDestination, bool jump_associates = true) {
	ActionJumpToLocation(locDestination);
	if (jump_associates)
		_hook_jump_associates(OBJECT_SELF, locDestination, true);
}

#undef ActionJumpToObject
void Hook_ActionJumpToObject(object target, int a = TRUE, bool jump_associates = true) {
	ActionJumpToObject(target, a);
	if (jump_associates)
		_hook_jump_associates(OBJECT_SELF, GetLocation(target), true);
}

void _hook_jump_associates(object obj, location jumpTo, bool as_action) {
	if (GetAreaFromLocation(jumpTo) != GetArea(obj))
		return; // associates will follow automagically

	if (as_action) {
		AssignCommand(GetAssociate(ASSOCIATE_TYPE_ANIMALCOMPANION, obj), ActionJumpToLocation(jumpTo));
		AssignCommand(GetAssociate(ASSOCIATE_TYPE_DOMINATED, obj), ActionJumpToLocation(jumpTo));
		AssignCommand(GetAssociate(ASSOCIATE_TYPE_FAMILIAR, obj), ActionJumpToLocation(jumpTo));
		AssignCommand(GetAssociate(ASSOCIATE_TYPE_SUMMONED, obj), ActionJumpToLocation(jumpTo));

		int i = 1;
		object assoc = GetAssociate(ASSOCIATE_TYPE_HENCHMAN, obj, i);
		while (is_valid(assoc)) {
			AssignCommand(assoc, ActionJumpToLocation(jumpTo));
			i++;
			assoc = GetAssociate(ASSOCIATE_TYPE_HENCHMAN, obj, i);
		}

	} else {
		AssignCommand(GetAssociate(ASSOCIATE_TYPE_ANIMALCOMPANION, obj), JumpToLocation(jumpTo));
		AssignCommand(GetAssociate(ASSOCIATE_TYPE_DOMINATED, obj), JumpToLocation(jumpTo));
		AssignCommand(GetAssociate(ASSOCIATE_TYPE_FAMILIAR, obj), JumpToLocation(jumpTo));
		AssignCommand(GetAssociate(ASSOCIATE_TYPE_SUMMONED, obj), JumpToLocation(jumpTo));

		int i = 1;
		object assoc = GetAssociate(ASSOCIATE_TYPE_HENCHMAN, obj, i);
		while (is_valid(assoc)) {
			AssignCommand(assoc, JumpToLocation(jumpTo));
			i++;
			assoc = GetAssociate(ASSOCIATE_TYPE_HENCHMAN, obj, i);
		}
	}
}
