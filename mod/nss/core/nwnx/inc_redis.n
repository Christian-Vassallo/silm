extern("inc_nwnx_redis")

#define CONFIG_NAMESPACE "cfg:"

/* How many seconds to cache a config value, in order to not hit redis too many times per second. */
#define CONFIG_CACHE_TIME 3

/**
 * Gets a simple integer value from config, defaulting to 0 if it does not exist.
 */
int cfg_int(string key, int defaultWhenMissing = 0);

/**
 * Gets a simple float value from config, defaulting to 0 if it does not exist.
 */
float cfg_float(string key, float defaultWhenMissing = 0f);

/**
 * Gets a simple boolean value from config, defaulting to 0 if it does not exist.
 *
 * Values detected for false are: "off", "no", "false", "0", "nil", ""
 *
 * Everything else evals to true.
 */
bool cfg_bool(string key, bool defaultWhenMissing = false);

/**
 * Gets a simple string value from config, defaulting to "" if it does not exist.
 */
string cfg(string key, string defaultWhenMissing = "");
/**
 * Gets a simple string value from config, defaulting to "" if it does not exist.
 */
string cfg_string(string key, string defaultWhenMissing = "");

/**
 * Returns the key name for the given cfg setting, to be used with  other redis commands.
 */
string cfg_key(string key);



string cfg_key(string key)
{
	return CONFIG_NAMESPACE + key;
}

string _cfg_get(string key)
{
	key = cfg_key(key);

	// A very simple, hacky timestamp that will overflow every hour.
	int ts = GetTimeMinute() * 60 + GetTimeSecond();

	int lastHit = GetLocalInt(GetModule(), "__cfg_" + key + "_ts");

	// ts has wrapped around.
	if (ts < lastHit)
		lastHit = 0;

	// Enough time has passed to hit the DB again.
	if (ts > (lastHit + CONFIG_CACHE_TIME))
		lastHit = 0;

	if (0 == lastHit) {
		string value = GET(key);
		SetLocalString(GetModule(), "__cfg_" + key, value);
		SetLocalInt(GetModule(), "__cfg_" + key + "_ts", ts);

		return value;
	}

	return GetLocalString(GetModule(), "__cfg_" + key);
}

int cfg_int(string key, int defaultWhenMissing = 0)
{
	string r = _cfg_get(key);
	if (redisLastReplyType == REDIS_REPLY_NIL)
		return defaultWhenMissing;

	return atoi(r);
}

float cfg_float(string key, float defaultWhenMissing = 0f)
{
	string r = _cfg_get(key);
	if (redisLastReplyType == REDIS_REPLY_NIL)
		return defaultWhenMissing;

	return atof(r);
}

bool cfg_bool(string key, bool defaultWhenMissing = false)
{
	string ret = strlwr(_cfg_get(key));

	if (redisLastReplyType == REDIS_REPLY_NIL)
		return defaultWhenMissing;

	if (ret == "" || ret == "0" || ret == "false" || ret == "f" || ret == "no" ||
			ret == "off" || ret == "nil")
		return false;

	return true;
}

string cfg(string key, string defaultWhenMissing = "")
{
	return cfg_string(key, defaultWhenMissing);
}

string cfg_string(string key, string defaultWhenMissing = "")
{
	string r = _cfg_get(key);
	if (redisLastReplyType == REDIS_REPLY_NIL)
		return defaultWhenMissing;

	return r;
}
