extern("inc_cdb")
extern("inc_chatlog")
extern("inc_chat")
extern("inc_events")
extern("msg_chat_proxy")
extern("msg_chat_text")
extern("msg_chat_color")
extern("msg_chat_direct")
extern("msg_chat_dm")
extern("msg_chat_private")
extern("msg_chat_shout")
extern("msg_chat_party")
extern("inc_telepathbond")

/* Internal chatlogging helper. */
void __chatlog(object runnable, object actor, object actedon, struct EventArguments ea);

void main()
{
	object oSpeaker = OBJECT_SELF;

	SetLocalString(oSpeaker, "NWNX!CHAT!TEXT", NWNXChatGetSpacer());
	string sText = GetLocalString(oSpeaker, "NWNX!CHAT!TEXT");

	if (sText == "") {
		_FATAL("No text.");
		return;
	}

	int iMsg = StringToInt(GetStringLeft(sText, 2));
	int iMode = MsgToChatMode(iMsg);

	if (iMode & CHATMODE_SILENT_SHOUT && !GetIsPC(oSpeaker))
		return;

	int nTo = StringToInt(GetSubString(sText, 2, 10));
	object oTo = (iMode & CHATMODE_PRIVATE ? NWNXChatGetPC(nTo) : OBJECT_INVALID);

	sText = GetSubString(sText, 12, GetStringLength(sText));

	if (sText == "") {
		_FATAL("No text.");
		return;
	}

	if (GetStringLeft(sText, 1) == "$" && GetHasActiveBonds(oSpeaker)) {
		string msg = GetSubString(sText, 1, 2048);
		DelegateTelepathicMessageToPartners(oSpeaker, msg);
		NWNXChatSuppress();
		return;
	}

	struct EventArguments evarg;

	evarg.a0 = sText;

	evarg.i0 = iMode;

	int serial = GetEventSerial();

	int _evret = RunEventScriptsForWithArgv(serial, "chat_prefilter", oSpeaker,
											oSpeaker, oTo, GetLocation(oSpeaker), evarg);

	if (_evret & EVENT_RESULT_SUPPRESS)
		NWNXChatSuppress();

	if (_evret & EVENT_RESULT_STOP) {
		DeleteEventArguments(serial);
		return;
	}
	evarg = GetEventArguments(serial);

	DeleteEventArguments(serial);

	__chatlog(oSpeaker, oSpeaker, oTo, evarg);

	if (evarg.i0 & CHATMODE_SHOUT)
		evarg = handle_shout(oSpeaker,  evarg);

	if (evarg.i0 & CHATMODE_PARTY)
		evarg = handle_party(oSpeaker, evarg);

	if (evarg.i0 & CHATMODE_DM)
		handle_dm(oSpeaker, evarg);

	if (evarg.i0 & CHATMODE_PRIVATE)
		handle_private(oSpeaker, oTo, evarg);

	if (evarg.i0 & CHATMODE_TALK || evarg.i0 & CHATMODE_WHISPER)
		handle_directional(oSpeaker, evarg);
}

void __chatlog(object runnable, object actor, object actedon, struct EventArguments ea)
{
	int logmode = ea.i0;

	if (logmode & CHATMODE_DM_MODE)
		logmode -= CHATMODE_DM_MODE;

	string mode = itoa(logmode);
	string aid = itoa(GetAccountID(actor));
	string cid = itoa(GetCharacterID(actor));
	SetLocalString(GetModule(), "last_chat_message_text_" + mode + "_" + aid + "_" + cid, ea.a0);
	SetLocalObject(GetModule(), "last_chat_message_on_" + mode + "_" + aid + "_" + cid, actedon);

	ChatLog(actor, logmode, ea.a0, actedon);
}
