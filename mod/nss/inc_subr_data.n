struct Subrace {
	int __pad;
	string sName;   // Name of subrace, lowercased
	int iRacialType; // Racial Type of parent race, RACIAL_TYPE_ALL possible
	int iSPAType;   // Type of special ability: 0=None, 1=Self, 2=Targettable
	string sSPA;    // Type of special ability: 4-letter-identifier for script to run
	string sItem;   // Race Item: 4-letter-identifier for racial bonus conveyor
	int iECL;       // Effective Character Level of subrace
	int iRestricted; // Restricted: Only approved players may use this sub race
	int iFlags;     // Special operation flags (light blindedness ect)
	int iNumEffects; // Number of effects which are added
};

//Return the subrace base data for a given sub race
struct Subrace GetSubraceData(string sIdentifier)
{
	struct Subrace new;
	object oMod = GetModule();

	new.sName         = GetLocalString(oMod, "SR_Name_" + sIdentifier);
	new.iRacialType   = GetLocalInt(oMod, "SR_RaceType_" + sIdentifier);
	new.iSPAType      = GetLocalInt(oMod, "SR_SPAType_" + sIdentifier);
	new.sSPA          = GetLocalString(oMod, "SR_SPA_" + sIdentifier);
	new.sItem         = GetLocalString(oMod, "SR_Item_" + sIdentifier);
	new.iECL          = GetLocalInt(oMod, "SR_ECL_" + sIdentifier);
	new.iRestricted   = GetLocalInt(oMod, "SR_Restr_" + sIdentifier);
	new.iFlags        = GetLocalInt(oMod, "SR_Flags_" + sIdentifier);
	new.iNumEffects   = GetLocalInt(oMod, "SR_NEffects_" + sIdentifier);

	return new;
}

string GetSubraceAlias(string sSubRace, int iRacialType)
{
	return GetLocalString(GetModule(), "SR_Alias_" + IntToString(iRacialType) + "_" + sSubRace);
}

string GetSubraceIdentifier(string sSubRace, int iRacialType)
{
	string s;

	sSubRace = GetStringLowerCase(sSubRace);

	s = GetSubraceAlias(sSubRace, iRacialType);

	if (s != "") return s;

	return GetSubraceAlias(sSubRace, RACIAL_TYPE_ALL);
}

//Returns 0 if there is no subrace,
//Returns 1 if there is a valid subrace to be set
//Returns 2 if there is a valid subrace with a missing permission
//Returns 3 if there is a valid subrace and permission is present
int GetSubraceGranted(string sSubrace, int iRacialType, int iGotPermission = 0)
{
	struct Subrace this;
	string sIdent;

	if ((sIdent = GetSubraceIdentifier(sSubrace, iRacialType)) == "") return 0;

	this = GetSubraceData(sIdent);

	if (!this.iRestricted) return 1;

	return iGotPermission ? 3 : 2;
}

