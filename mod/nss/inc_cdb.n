extern("_gen")
extern("inc_currency")
extern("inc_amask")

const string
TABLE_ACCOUNTS = "accounts",
TABLE_CHARACTERS = "characters";


// Function: GetAccountID 
// 
int GetAccountID(object oPC);

// Function: GetOrCreateAccountID 
// 
int GetOrCreateAccountID(object oPC);

// Function: GetCharacterID 
// 
int GetCharacterID(object oPC);

// Function: GetOrCreateCharacterID 
// 
int GetOrCreateCharacterID(object oPC);

// Function: GetAccountIsDM 
// 
int GetAccountIsDM(object oPC);

// Function: GetPCByAID 
// 
object GetPCByAID(int nAID);

// Function: GetPCByCID 
// 
object GetPCByCID(int nCID);

// Function: CharacterError 
// 
// notifies oPC about his character not in the database,
// and does some log output
void CharacterError(object oPC, string sLog = "Character not found");

// Function: SaveCharacter 
// 
// Saves oPC into the database, updating all statistics and stuff.
// Returns the character ID, or 0 on failure.
int SaveCharacter(object oPC, int bIsLogin = FALSE);


// Returns > 0 if oPC has nAMask, 0 otherwise
// The special case DM/Non-DM for AMASK_GM
// is handled here for convenience.
// 
// This means that
//  * amask(oDM, AMASK_GLOBAL_GM) => 1
//   if oDM has an amask of AMASK_GM only
//
//  * amask(oPC, AMASK_GLOBAL_GM) => 0
//   if oPC has an amask of AMASK_GM only
//
//  * amask(oPC, AMASK_GLOBAL_GM) => 1
//   if oPC has an amask of AMASK_GLOBAL_GM
//
// Function: amask 
// 
int amask(object oPC, int nAMask);

/* implementation below */

int amask(object oPC, int nAMask) {
    // string sAcc = GetPCName(oPC);
	int nCID = GetAccountID(oPC);


//	if ( "" == sAcc )
//        return 0;

	if (AMASK_ANY == nAMask)
		return 1;
	
	if (nCID == 0)
		return 0;

	pQ("select amask from accounts where id = " + pSi(nCID));
	pF();
    int nMask = pGi(1);

	if (GetIsDM(oPC) && nMask & AMASK_GM && nAMask & AMASK_GLOBAL_GM)
		return 1;
	
	if (!GetIsDM(oPC) && nMask & AMASK_GLOBAL_GM && nAMask & AMASK_GM)
		return 1;

    return
           ( nMask & nAMask ) > 0;
}

object GetPCByAID(int nAID) {
	object oPC = GetFirstPC();
	while ( GetIsObjectValid(oPC) ) {
		if ( GetAccountID(oPC) == nAID )
			return oPC;

		oPC = GetNextPC();
	}
	return OBJECT_INVALID;
}

object GetPCByCID(int nCID) {
	object oPC = GetFirstPC();
	while ( GetIsObjectValid(oPC) ) {
		if ( GetCharacterID(oPC) == nCID )
			return oPC;

		oPC = GetNextPC();
	}
	return OBJECT_INVALID;
}

void CharacterError(object oPC, string sLog = "Character not found") {
	ToPC(
		"Dein Eintrag in der Datenbank wurde nicht gefunden.  Vielleicht ist die Datenbank gerade am Boden; oder es ist ein Bug.  Versuche es in 5 Minuten noch einmal - dann melde es einem SL.",
		oPC);
	WriteTimestampedLogEntry("Error: " + sLog + "; for " + GetName(oPC) + "/" + GetPCPlayerName(oPC));
}


int GetAccountID(object oPC) {
	string sAcc = GetPCName(oPC);
	if ( "" == sAcc )
		return 0;

	if ( GetLocalInt(GetModule(), sAcc + "_aid") )
		return GetLocalInt(GetModule(), sAcc + "_aid");


	pQ("select id from " +
		TABLE_ACCOUNTS + " where account = " + pE(GetPCName(oPC)) + ";");
	if ( !pF() )
		return 0;
	else {
		int nID = StringToInt(pG(1));
		SetLocalInt(GetModule(), sAcc + "_aid", nID);
		return nID;
	}
}


int GetAccountIsDM(object oPC) {
	if ( GetLocalInt(oPC, "dm") )
		return 1;

	int iID = GetAccountID(oPC);
	if ( 0 == iID )
		return 0;

	pQ("select dm from " + TABLE_ACCOUNTS + " where id = " + IntToString(iID) + ";");
	if ( !pF() )
		return 0;

	return pG(1) == "t";
}


int GetCharacterID(object oPC) {
	object oMod = GetModule();
	string sAcc = GetName(oPC);

	if ( sAcc == "" )
		return 0;

	string sDMFlag = GetIsDM(oPC) ? "_dm" : "";

	if ( GetLocalInt(oMod, sAcc + sDMFlag + "_cid") )
		return GetLocalInt(oMod, sAcc + sDMFlag + "_cid");

	int nAID = GetAccountID(oPC);
	if ( 0 == nAID )
		return 0;


	pQ("select id from " +
		TABLE_CHARACTERS +
		" where  account = " + IntToString(nAID) + " and character = " + pE(sAcc) + ";");

	if ( !pF() )
		return 0;
	else {
		int nID = StringToInt(pG(1));
		SetLocalInt(oMod, sAcc + sDMFlag + "_cid", nID);
		return nID;
	}
}



int GetOrCreateAccountID(object oPC) {
	string sAcc = GetPCName(oPC);
	if ( "" == sAcc )
		return 0;

	if ( GetLocalInt(GetModule(), sAcc + "_aid") )
		return GetLocalInt(GetModule(), sAcc + "_aid");

	string sAccount = GetPCName(oPC);

	if ( sAccount == "" )
		return 0;

	if (GetIsDMPossessed(oPC) || GetIsPossessedFamiliar(oPC)) {
		_ERROR("Cannot save possessed characters to the database.");
		return 0;
	}

	sAccount = pE(sAccount);

	pQ("select id from " + TABLE_ACCOUNTS + " where account = " + sAccount + ";");
	if ( !pF() )
		pQ("insert into " +
			TABLE_ACCOUNTS + " (account) values(" + sAccount + ");");

	pQ("select id from " + TABLE_ACCOUNTS + " where account = " + sAccount + ";");
	if ( !pF() )
		return 0;
	else {
		int nID = StringToInt(pG(1));
		SetLocalInt(GetModule(), sAcc + "_aid", nID);
		return nID;
	}
}



int GetOrCreateCharacterID(object oPC) {
	object oMod = GetModule();
	string sAcc = GetName(oPC);
	if ( sAcc == "" )
		return 0;

	string sDMFlag = GetIsDM(oPC) ? "dm_" : "";

	if ( GetLocalInt(oMod, sAcc + sDMFlag + "_cid") )
		return GetLocalInt(oMod, sAcc + sDMFlag + "_cid");


	int nAID = GetAccountID(oPC);
	if ( 0 == nAID )
		return 0;

	string
	sAID = IntToString(nAID),
	sChar = pE(GetName(oPC));

	if (GetIsDMPossessed(oPC) || GetIsPossessedFamiliar(oPC)) {
		_ERROR("Cannot save possessed characters to the database.");
		return 0;
	}

	pQ("select id from " +
		TABLE_CHARACTERS +
		" where account = " + IntToString(nAID) + " and character =" + sChar + ";");

	if ( !pF() )
		pQ("insert into " +
			TABLE_CHARACTERS +
			" (account, character, create_ip, create_key) values(" +
			sAID +
			", " + sChar + ", '" + GetPCIPAddress(oPC) + "', '" + GetPCPublicCDKey(oPC) + "');");

	pQ("select id from " +
		TABLE_CHARACTERS +
		" where account = " + IntToString(nAID) + " and character = " + sChar + ";");

	if ( !pF() )
		return 0;
	else {
		int nID = StringToInt(pG(1));
		SetLocalInt(oMod, sAcc + sDMFlag + "_cid", nID);
		return nID;
	}
}


int SaveCharacter(object oPC, int bIsLogin = FALSE) {
	if ( GetIsDM(oPC) )
		return 0;

	string
		sChar = pE(GetName(oPC)),
		sAccount = pE(GetPCName(oPC)),
		sKey = GetPCPublicCDKey(oPC),
		sIP = GetPCIPAddress(oPC);

	/* ACCOUNT */

	int nAID = GetOrCreateAccountID(oPC);
	string sAID = IntToString(nAID);

	if ( nAID == 0 ) {
		audit("error", oPC, audit_fields("info", "Cannot find or create account"), "cdb");
		SendMessageToAllDMs(
			"Warning: Query in inc_cdb#SaveCharacter failed: Cannot find or create account for " +
			sChar + ", " + sAccount + ".");
		return 0;
	}

	/* CHARACTER */

	pQ("select id from characters where  account = " +
		sAID + " and character = " + sChar + ";");

	// Create some initial record.
	if ( !pF() ) {
		SendMessageToAllDMs("New character: " + GetName(oPC) + "(" + GetPCName(oPC) + ")");
		pQ(
			"insert into characters (account, character, create_ip, create_key) values("
			+
			sAID + ", " + sChar + ", '" + sIP + "', '" + sKey + "');");
		//audit("new", oPC, audit_fields("info", "new character"), "cdb");
	}


	pQ("select id, create_key, other_keys from characters where account=" +
		sAID + " and character=" + sChar + " limit 1;");
	pF();


	string
		sID = pG(1),
		sCreateKey = pG(2),
		sOtherKeys = pG(3);

	if ( sID == "" ) {
		audit("error", oPC, audit_fields("info", "Cannot find or create character"), "cdb");
		SendMessageToAllDMs(
			"Warning: Query in inc_cdb#SaveCharacter failed: Cannot create character record for " +
			sChar + ", " + sAccount + ".");
		return 0;
	}


	int nCID = StringToInt(sID);

	string sDMFlag = GetIsDM(oPC) ? "dm_" : "";
	SetLocalInt(GetModule(), GetPCName(oPC) + sDMFlag + "_cid", nCID);

	if (bIsLogin) {
		// Update keys, if necessary.
		if ( sCreateKey != sKey && !TestStringAgainstPattern("**" + sKey + "**", sOtherKeys) ) {
			if ( sOtherKeys != "" )
				sOtherKeys += " ";
			sOtherKeys += sKey;
			pQ("update characters set other_keys='" +
				sOtherKeys + "' where id='" + sID + "';");
		}
	}

	return nCID;
}
