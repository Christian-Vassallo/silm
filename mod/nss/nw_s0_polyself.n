//::///////////////////////////////////////////////
//:: Polymorph Self
//:: NW_S0_PolySelf.nss
//:: Copyright (c) 2001 Bioware Corp.
//:://////////////////////////////////////////////
/*
 * 	The PC is able to changed their form to one of
 * 	several forms.
 */
//:://////////////////////////////////////////////
//:: Created By: Preston Watamaniuk
//:: Created On: Jan 21, 2002
//:://////////////////////////////////////////////

extern("x2_inc_spellhook")
extern("inc_lists")
extern("inc_2dacache")

const string
CT = "polymorph",
HEAD = "Bitte Polymorph-Typ waehlen:";


int GetCanMorph(object oTarget, int nPoly);

void main() {
	if ( !X2PreSpellCastCode() )
		return;

	object oPC = OBJECT_SELF;

	object oTarget = oPC; // Polymorph self!

	int nLevel = GetCasterLevel(oPC); // gets the level the PC cast the spell as
	int nMeta = GetMetaMagicFeat();


	// dont allow this spell on incorporals or gaseous forms
	if ( FALSE ) {
		Floaty("Koerperlose Kreaturen oder Gas-Formen koennen nicht polymorphen.");
		return;
	}

	SetLocalObject(oPC, "polymorph_target", oTarget);


	int nFemale = GENDER_MALE != GetGender(oTarget);
	int nFP = 0;

	ClearList(oPC, CT);


	/*POLYMORPH_TYPE_ANCIENT_BLUE_DRAGON
	 * POLYMORPH_TYPE_ANCIENT_GREEN_DRAGON
	 * POLYMORPH_TYPE_ANCIENT_RED_DRAGON*/



	if ( GetCanMorph(oTarget, POLYMORPH_TYPE_UMBER_HULK) ) {
		AddListItem(oPC, CT, "Umberhulk");
		SetListInt(oPC, CT, POLYMORPH_TYPE_UMBER_HULK);
	}
	if ( GetCanMorph(oTarget, POLYMORPH_TYPE_ZOMBIE) ) {
		AddListItem(oPC, CT, "Zombie");
		SetListInt(oPC, CT, POLYMORPH_TYPE_ZOMBIE);
	}
	if ( GetCanMorph(oTarget, POLYMORPH_TYPE_GIANT_SPIDER) ) {
		AddListItem(oPC, CT, "Riesenspinne");
		SetListInt(oPC, CT, POLYMORPH_TYPE_GIANT_SPIDER);
	}
	if ( GetCanMorph(oTarget, POLYMORPH_TYPE_PIXIE) ) {
		AddListItem(oPC, CT, "Pixie");
		SetListInt(oPC, CT, POLYMORPH_TYPE_PIXIE);
	}
	if ( GetCanMorph(oTarget, POLYMORPH_TYPE_TROLL) ) {
		AddListItem(oPC, CT, "Troll");
		SetListInt(oPC, CT, POLYMORPH_TYPE_TROLL);
	}

	if ( GetCanMorph(oTarget, POLYMORPH_TYPE_BADGER) ) {
		AddListItem(oPC, CT, "Dachs");
		SetListInt(oPC, CT, POLYMORPH_TYPE_BADGER);
	}

	/*if (GetCanMorph(oTarget, POLYMORPH_TYPE_BASILISK)) {
	 * 	AddListItem(oPC, CT, "Basilisk");
	 * 	SetListInt(oPC, CT, POLYMORPH_TYPE_BASILISK);
	 * }*/

	if ( GetCanMorph(oTarget, POLYMORPH_TYPE_BOAR) ) {
		AddListItem(oPC, CT, "Eber");
		SetListInt(oPC, CT, POLYMORPH_TYPE_BOAR);
	}

	if ( GetCanMorph(oTarget, POLYMORPH_TYPE_BROWN_BEAR) ) {
		AddListItem(oPC, CT, "Braunbaer");
		SetListInt(oPC, CT, POLYMORPH_TYPE_BROWN_BEAR);
	}

	// POLYMORPH_TYPE_CELESTIAL_AVENGER

	if ( GetCanMorph(oTarget, POLYMORPH_TYPE_BAT) ) {
		AddListItem(oPC, CT, "Fledermaus");
		SetListInt(oPC, CT, POLYMORPH_TYPE_BAT);
	}

	if ( GetCanMorph(oTarget, POLYMORPH_TYPE_CHICKEN) ) {
		AddListItem(oPC, CT, "Huhn");
		SetListInt(oPC, CT, POLYMORPH_TYPE_CHICKEN);
	}


	if ( GetCanMorph(oTarget, POLYMORPH_TYPE_GOBLINSHAMAN) ) {
		AddListItem(oPC, CT, "Goblin-Schamane");
		SetListInt(oPC, CT, POLYMORPH_TYPE_GOBLINSHAMAN);
	}

	/*POLYMORPH_TYPE_DEATH_SLAAD
	 *  POLYMORPH_TYPE_DIRE_BADGER
	 *  POLYMORPH_TYPE_DIRE_BOAR
	 *  POLYMORPH_TYPE_DIRE_BROWN_BEAR
	 *  POLYMORPH_TYPE_DIRE_PANTHER
	 *  POLYMORPH_TYPE_DIRE_WOLF
	 *
	 *  POLYMORPH_TYPE_DOOM_KNIGHT*/

	/*if (GetCanMorph(oTarget, POLYMORPH_TYPE_DIRETIGER)) {
	 * 	AddListItem(oPC, CT, "Schreckenstiger");
	 * 	SetListInt(oPC, CT, POLYMORPH_TYPE_DIRETIGER);
	 * }*/

	/*POLYMORPH_TYPE_DRIDER
	 * POLYMORPH_TYPE_ELDER_AIR_ELEMENTAL
	 * POLYMORPH_TYPE_ELDER_EARTH_ELEMENTAL
	 * POLYMORPH_TYPE_ELDER_FIRE_ELEMENTAL
	 * POLYMORPH_TYPE_ELDER_WATER_ELEMENTAL*/

	/*nFP = nFemale ? POLYMORPH_TYPE_FEMALE_DROW : POLYMORPH_TYPE_MALE_DROW;
	 * if (GetCanMorph(oTarget, nFP)) {
	 * 	AddListItem(oPC, CT, "Drow (m/w)");
	 * 	SetListInt(oPC, CT, nFP);
	 * }*/

	/*POLYMORPH_TYPE_FIRE_GIANT
	 * POLYMORPH_TYPE_FROST_GIANT_FEMALE
	 * POLYMORPH_TYPE_FROST_GIANT_MALE */



	/*
	 * POLYMORPH_TYPE_GOLEM_AUTOMATON
	 * POLYMORPH_TYPE_HARPY
	 * POLYMORPH_TYPE_HUGE_AIR_ELEMENTAL
	 * POLYMORPH_TYPE_HUGE_EARTH_ELEMENTAL
	 * POLYMORPH_TYPE_HUGE_FIRE_ELEMENTAL
	 * POLYMORPH_TYPE_HUGE_WATER_ELEMENTAL
	 *
	 * POLYMORPH_TYPE_IRON_GOLEM
	 * POLYMORPH_TYPE_JNAH_GIANT_FEMAL
	 * POLYMORPH_TYPE_JNAH_GIANT_MALE*/

	/*POLYMORPH_TYPE_MANTICORE
	 * POLYMORPH_TYPE_MEDUSA
	 * POLYMORPH_TYPE_MINDFLAYER
	 * POLYMORPH_TYPE_MINOTAUR*/

	if ( GetCanMorph(oTarget, POLYMORPH_TYPE_GARGOYLE) ) {
		AddListItem(oPC, CT, "Gargoyle");
		SetListInt(oPC, CT, POLYMORPH_TYPE_GARGOYLE);
	}



	//POLYMORPH_TYPE_PENGUIN


	if ( GetCanMorph(oTarget, POLYMORPH_TYPE_IMP) ) {
		AddListItem(oPC, CT, "Imp");
		SetListInt(oPC, CT, POLYMORPH_TYPE_IMP);
	}

	// POLYMORPH_TYPE_QUASIT
	if ( GetCanMorph(oTarget, POLYMORPH_TYPE_QUASIT) ) {
		AddListItem(oPC, CT, "Quasit");
		SetListInt(oPC, CT, POLYMORPH_TYPE_QUASIT);
	}

	if ( GetCanMorph(oTarget, POLYMORPH_TYPE_RAVEN) ) {
		AddListItem(oPC, CT, "Rabe");
		SetListInt(oPC, CT, POLYMORPH_TYPE_RAVEN);
	}

	if ( GetCanMorph(oTarget, POLYMORPH_TYPE_FALCON) ) {
		AddListItem(oPC, CT, "Falke");
		SetListInt(oPC, CT, POLYMORPH_TYPE_FALCON);
	}

	if ( GetCanMorph(oTarget, POLYMORPH_TYPE_PANTHER) ) {
		AddListItem(oPC, CT, "Panther");
		SetListInt(oPC, CT, POLYMORPH_TYPE_PANTHER);
	}

	if ( GetCanMorph(oTarget, POLYMORPH_TYPE_WOLF) ) {
		AddListItem(oPC, CT, "Wolf");
		SetListInt(oPC, CT, POLYMORPH_TYPE_WOLF);
	}

	if ( GetCanMorph(oTarget, POLYMORPH_TYPE_WINTERWOLF) ) {
		AddListItem(oPC, CT, "Winterwolf");
		SetListInt(oPC, CT, POLYMORPH_TYPE_WINTERWOLF);
	}

	if ( GetCanMorph(oTarget, POLYMORPH_TYPE_COW) ) {
		AddListItem(oPC, CT, "Kuh");
		SetListInt(oPC, CT, POLYMORPH_TYPE_COW);
	}

	/*POLYMORPH_TYPE_RED_DRAGON
	 * POLYMORPH_TYPE_RISEN_LORD
	 * POLYMORPH_TYPE_SPECTRE
	 *
	 *
	 * POLYMORPH_TYPE_VROCK
	 * POLYMORPH_TYPE_WERECAT
	 * POLYMORPH_TYPE_WERERAT
	 * POLYMORPH_TYPE_WEREWOLF
	 * POLYMORPH_TYPE_WOLF
	 * POLYMORPH_TYPE_YUANTI
	 */

	/*nFP = nFemale ? POLYMORPH_TYPE_VAMPIRE_FEMALE : POLYMORPH_TYPE_VAMPIRE_MALE;
	 * if (GetCanMorph(oTarget, nFP)) {
	 * 	AddListItem(oPC, CT, "Vampir (m/w)");
	 * 	SetListInt(oPC, CT, nFP);
	 * }
	 */

	if ( GetCanMorph(oTarget, POLYMORPH_TYPE_SUCCUBUS) ) {
		AddListItem(oPC, CT, "Sukkubus");
		SetListInt(oPC, CT, POLYMORPH_TYPE_SUCCUBUS);
	}





	nFP = nFemale ? POLYMORPH_TYPE_GIRL : POLYMORPH_TYPE_BOY;
	if ( GetCanMorph(oTarget, nFP) ) {
		AddListItem(oPC, CT, "Junge/Maedchen (m/w)");
		SetListInt(oPC, CT, nFP);
	}

	nFP = nFemale ? POLYMORPH_TYPE_RAKSHASA_FEMALE : POLYMORPH_TYPE_RAKSHASA_MALE;
	if ( GetCanMorph(oTarget, nFP) ) {
		AddListItem(oPC, CT, "Rakshasa (m/w)");
		SetListInt(oPC, CT, nFP);
	}

	ResetConvList(oPC, oPC, CT, 50000, "s_polymorph_cb", HEAD);

	ClearAllActions(1);
	AssignCommand(oPC, ActionStartConversation(oPC, "list_select", 1, 0));



}



int GetCanMorph(object oTarget, int nPoly) {
	int nLevel = GetCasterLevel(OBJECT_SELF);
	return 1;

}

// the OLD spell code below

/*
 * 	//Declare major variables
 * 	int nSpell = GetSpellId();
 * 	object oTarget = GetSpellTargetObject();
 * 	effect eVis = EffectVisualEffect(VFX_IMP_POLYMORPH);
 * 	effect ePoly;
 * 	int nPoly;
 * 	int nMetaMagic = GetMetaMagicFeat();
 * 	int nDuration = GetCasterLevel(OBJECT_SELF);
 * 	//Enter Metamagic conditions
 * 	if (nMetaMagic == METAMAGIC_EXTEND)
 * 	{
 * 		nDuration = nDuration *2; //Duration is +100%
 * 	}
 *
 * 	//Determine Polymorph subradial type
 * 	if(nSpell == 387)
 * 	{
 * 		nPoly = POLYMORPH_TYPE_GIANT_SPIDER;
 * 	}
 * 	else if (nSpell == 388)
 * 	{
 * 		nPoly = POLYMORPH_TYPE_TROLL;
 * 	}
 * 	else if (nSpell == 389)
 * 	{
 * 		nPoly = POLYMORPH_TYPE_UMBER_HULK;
 * 	}
 * 	else if (nSpell == 390)
 * 	{
 * 		nPoly = POLYMORPH_TYPE_PIXIE;
 * 	}
 * 	else if (nSpell == 391)
 * 	{
 * 		nPoly = POLYMORPH_TYPE_ZOMBIE;
 * 	}
 * 	ePoly = SupernaturalEffect(EffectPolymorph(nPoly));
 * 	//Fire cast spell at event for the specified target
 * 	SignalEvent(oTarget, EventSpellCastAt(OBJECT_SELF, SPELL_POLYMORPH_SELF, FALSE));
 *
 * 	//Apply the VFX impact and effects
 * 	AssignCommand(oTarget, ClearAllActions()); // prevents an exploit
 * 	ApplyEffectToObject(DURATION_TYPE_INSTANT, eVis, oTarget);
 * 	ApplyEffectToObject(DURATION_TYPE_PERMANENT, ePoly, oTarget);
 * }
 */



