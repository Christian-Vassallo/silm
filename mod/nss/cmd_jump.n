extern("x0_i0_position")

float GetAppearanceModifierFromABAScaling(object oPC);

void main() {
	struct EventInfo e = GetEventInfo();
	struct EventArguments ea = GetEventArguments(e.serial);

	if (e.ev != "chat_command")
		return;
	
	if (ea.a0 != "j")
		return;

	object oPC = e.runnable;

	float fDir = GetFacing(oPC);
	float fAppearanceModifier = GetAppearanceModifierFromABAScaling(oPC);
	float fJumpLength = 3.974 * fAppearanceModifier;


	location locJumpTo = GenerateNewLocation(oPC,
		fJumpLength,
		fDir,
		fDir);

	float fAngleOpposite = GetOppositeDirection(fDir);
		location locRunning = GenerateNewLocation(oPC,
		DISTANCE_TINY,
		fAngleOpposite,
		fDir);

	vector vCurrent = GetPositionFromLocation(GetLocation(oPC));
	vector vToJump = GetPositionFromLocation(locJumpTo);
	vector vRunning = GetPositionFromLocation(locRunning);

	effect effTouchupInvis = EffectVisualEffect(VFX_DUR_CUTSCENE_INVISIBILITY);


	/* Main anim playing code begins here. */

	if (!LineOfSightVector(vCurrent, vToJump))  // Can't jump where you can't see
	{
		SendMessageToPC(oPC, "Du kannst nur dorthin springen, wo du auch siehst.");
		event_stop();
	}
	else if (!LineOfSightVector(vCurrent, vRunning)) // Need distance to run
	{
		SendMessageToPC(oPC, "Du benoetigst etwas Platz hinter dir, um springen zu koennen.");
		event_stop();
	}
	else
	{
		SetFootstepType(FOOTSTEP_TYPE_NONE, oPC);

		DelayCommand(0.3, SetCommandable(FALSE, oPC));
		AssignCommand(oPC, ClearAllActions());
		AssignCommand(oPC, ActionPlayAnimation(ANIMATION_LOOPING_CUSTOM15, 1.5, 3.5));

		DelayCommand(4.38, SetCommandable(TRUE, oPC));
		DelayCommand(4.40, ApplyEffectToObject(DURATION_TYPE_TEMPORARY, effTouchupInvis, oPC, 1.0));

		DelayCommand(4.45, AssignCommand(oPC, ClearAllActions()));
		DelayCommand(4.49, ActionJumpToLocation(locJumpTo));
		DelayCommand(4.53, AssignCommand(oPC, ClearAllActions()));

		DelayCommand(5.0, SetFootstepType(FOOTSTEP_TYPE_DEFAULT, oPC));
	}

	event_stop();
}

float GetAppearanceModifierFromABAScaling(object oPC)
{
	int iRacialType = GetRacialType(oPC);

	if (GetGender(oPC) == GENDER_MALE)
	{
		if(iRacialType == IP_CONST_RACIALTYPE_HUMAN)
			return 1.0;
		else if(iRacialType == IP_CONST_RACIALTYPE_HALFLING)
			return 0.65;
		else if(iRacialType == IP_CONST_RACIALTYPE_ELF)
			return 0.895;
		else if(iRacialType == IP_CONST_RACIALTYPE_DWARF)
			return 0.68;
		else if(iRacialType == IP_CONST_RACIALTYPE_GNOME)
			return 0.63;
		else return 1.03;
	}
	else
	{
		if(iRacialType == IP_CONST_RACIALTYPE_HUMAN)
			return 0.988;
		else if(iRacialType == IP_CONST_RACIALTYPE_HALFLING)
			return 0.632;
		else if(iRacialType == IP_CONST_RACIALTYPE_ELF)
			return 0.883;
		else if(iRacialType == IP_CONST_RACIALTYPE_DWARF)
			return 0.648;
		else if(iRacialType == IP_CONST_RACIALTYPE_GNOME)
			return 0.63;
		else return 0.997;
	}
}

