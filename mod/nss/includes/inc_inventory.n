extern("inc_2da")
extern("inc_misc")

const int INVENTORY_SLOT_INVALID = -1;

// Returns the number of items in this containers inventory.
// Loops through sub-containers and counts those as well,
// including the subcontainer itself.
int GetInventoryItemCount(object oInv);

// Returns the item size of the given object in inventory tiles.
int GetItemSize(object oItem);

// Returns the total size of all items in oInv.
int GetTotalContainerItemSizeSum(object oInv);

// Returns the slot in which oItem is equipped, or INVENTORY_SLOT_INVALID
int GetItemInventorySlot(object oItem);

// Returns the best slot item can be equipped in.
// Takes double slots into consideration.
int GetBestEquippableSlot(object creature, object item);


// aa..a..a..aaaa.a.. :)
// .... a.....a...d.@...

int GetItemInventorySlot(object oItem)
{
	object holder = GetItemPossessor(oItem);

	if (!is_valid(holder))
		return INVENTORY_SLOT_INVALID;

	int nSlot;

	for (nSlot = 0; nSlot < NUM_INVENTORY_SLOTS; nSlot++)
		if (GetItemInSlot(nSlot, holder) == oItem)
			return nSlot;

	return INVENTORY_SLOT_INVALID;
}



int GetItemSize(object oItem)
{
	int nBaseItem = GetBaseItemType(oItem);

	if (BASE_ITEM_INVALID == nBaseItem)
		return 0;

	int nX = StringToInt(Get2DACached("baseitems", "InvSlotWidth", nBaseItem));
	int nY = StringToInt(Get2DACached("baseitems", "InvSlotHeight", nBaseItem));

	int ret = nX * nY;

	if (GetItemStackSize(oItem) > 1)
		ret *= GetItemStackSize(oItem);

	return ret;
}



int GetInventoryItemCount(object oInv)
{
	int total = 0;
	object o = GetFirstItemInInventory(oInv);

	while (GetIsObjectValid(o)) {
		total += 1;
		o = GetNextItemInInventory(oInv);
	}

	return total;
}


int GetTotalContainerItemSizeSum(object oInv)
{
	int total = 0;
	object o = GetFirstItemInInventory(oInv);

	while (GetIsObjectValid(o)) {
		total += GetItemSize(o);
		o = GetNextItemInInventory(oInv);
	}

	return total;
}

int GetBestEquippableSlot(object creature, object item)
{
	int mask = HexToInt(Get2DAString("baseitems", "EquipableSlots", GetBaseItemType(item)));

	if (mask & 0x00001)
		return INVENTORY_SLOT_HEAD;

	if (mask & 0x00002)
		return INVENTORY_SLOT_CHEST;

	if (mask & 0x00004)
		return INVENTORY_SLOT_BOOTS;

	if (mask & 0x00008)
		return INVENTORY_SLOT_ARMS;

	if (mask & 0x00010)
		return INVENTORY_SLOT_RIGHTHAND;

	if (mask & 0x00020)
		return INVENTORY_SLOT_LEFTHAND;

	if (mask & 0x00040)
		return INVENTORY_SLOT_CLOAK;

	if (mask & 0x00180) {
		if (is_valid(GetItemInSlot(INVENTORY_SLOT_LEFTRING)))
			return INVENTORY_SLOT_RIGHTRING;

		else
			return INVENTORY_SLOT_LEFTRING;
	}

	if (mask & 0x00200)
		return INVENTORY_SLOT_NECK;

	if (mask & 0x00400)
		return INVENTORY_SLOT_BELT;

	if (mask & 0x00800)
		return INVENTORY_SLOT_ARROWS;

	if (mask & 0x01000)
		return INVENTORY_SLOT_BULLETS;

	if (mask & 0x02000)
		return INVENTORY_SLOT_BOLTS;

	// 0x1c000: cweapon
	// 0x20000: carmor

	return INVENTORY_SLOT_INVALID;
}
