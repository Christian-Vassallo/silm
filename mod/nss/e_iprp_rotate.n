extern("_gen")

void applydamage(object actor, object item, int dmgConst, int dmgBonus,
		int lightConst, int applyVfx) {
	if (applyVfx > -1)
		ApplyEffectToObject(DURATION_TYPE_INSTANT, EffectVisualEffect(applyVfx), actor);
	if (lightConst > -1)
		AddItemProperty(DURATION_TYPE_PERMANENT,
			ItemPropertyLight(IP_CONST_LIGHTBRIGHTNESS_LOW, lightConst), item);
	AddItemProperty(DURATION_TYPE_PERMANENT,
		ItemPropertyDamageBonus(dmgConst, dmgBonus), item);
}

bool apply(object item, object actor, string eff) {

	string dmgtype = "none";
	string dmgbonus = "";
	int idx = FindSubString(eff, "_");
	if (idx != -1) {
		dmgtype = GetSubString(eff, 0, idx);
		dmgbonus = GetSubString(eff, idx + 1, 1024);
	};

	if (GetStringRight(dmgbonus, 1) == "d") {
		if (dmgtype == "magic" || dmgtype == "neg" || dmgtype == "pos" || dmgtype == "holy")
			dmgbonus += "4";
		else
			dmgbonus += "6";
	}

#define map(a,b) else if (dmgbonus == a) bonus = b

	int bonus;
	if (0 == 1) bonus = -1;
	map("1d4", IP_CONST_DAMAGEBONUS_1d4);
	map("1d6", IP_CONST_DAMAGEBONUS_1d6);
	map("1d8", IP_CONST_DAMAGEBONUS_1d8);
	map("1d10", IP_CONST_DAMAGEBONUS_1d10);
	map("2d4", IP_CONST_DAMAGEBONUS_2d4);
	map("2d6", IP_CONST_DAMAGEBONUS_2d6);
	map("2d8", IP_CONST_DAMAGEBONUS_2d8);
	map("2d10", IP_CONST_DAMAGEBONUS_2d10);
	map("1", IP_CONST_DAMAGEBONUS_1);
	map("2", IP_CONST_DAMAGEBONUS_2);
	map("3", IP_CONST_DAMAGEBONUS_3);
	map("4", IP_CONST_DAMAGEBONUS_4);
	map("5", IP_CONST_DAMAGEBONUS_5);
	map("6", IP_CONST_DAMAGEBONUS_6);
	map("7", IP_CONST_DAMAGEBONUS_7);
	map("8", IP_CONST_DAMAGEBONUS_8);
	map("9", IP_CONST_DAMAGEBONUS_9);
	map("10", IP_CONST_DAMAGEBONUS_10);
	else {
		SendMessageToPC(actor, "Cannot apply " + eff + ", damage bonus unparseable.");
		return false;
	}

	// remove all iprp_rotate effects
	iterate_iprp(item, iprp,
		if (GetItemPropertyType(iprp) == ITEM_PROPERTY_VISUALEFFECT ||
				GetItemPropertyType(iprp) == ITEM_PROPERTY_LIGHT ||
				GetItemPropertyType(iprp) == ITEM_PROPERTY_DAMAGE_BONUS
		)
			RemoveItemProperty(item, iprp);
	);

	if (dmgtype == "none")
		ApplyEffectToObject(DURATION_TYPE_INSTANT, EffectVisualEffect(VFX_IMP_CHARM), actor);

	else if (dmgtype == "fire")
		applydamage(actor, item, IP_CONST_DAMAGETYPE_FIRE, bonus,
			IP_CONST_LIGHTCOLOR_RED, VFX_IMP_PULSE_FIRE);
	else if (dmgtype == "cold")
		applydamage(actor, item, IP_CONST_DAMAGETYPE_COLD, bonus,
			IP_CONST_LIGHTCOLOR_BLUE, VFX_IMP_PULSE_COLD);
	else if (dmgtype == "acid")
		applydamage(actor, item, IP_CONST_DAMAGETYPE_ACID, bonus,
			IP_CONST_LIGHTCOLOR_GREEN, VFX_IMP_PULSE_NATURE);
	else if (dmgtype == "elec")
		applydamage(actor, item, IP_CONST_DAMAGETYPE_ELECTRICAL, bonus,
			IP_CONST_LIGHTCOLOR_WHITE, VFX_IMP_PULSE_WATER);
	else if (dmgtype == "mag")
		applydamage(actor, item, IP_CONST_DAMAGETYPE_MAGICAL, bonus,
			IP_CONST_LIGHTCOLOR_PURPLE, VFX_IMP_PULSE_NEGATIVE);
	else if (dmgtype == "neg") {
		applydamage(actor, item, IP_CONST_DAMAGETYPE_NEGATIVE, bonus,
			IP_CONST_LIGHTCOLOR_RED, VFX_IMP_PULSE_NEGATIVE);
		AddItemProperty(DURATION_TYPE_PERMANENT,
			ItemPropertyVisualEffect(ITEM_VISUAL_EVIL), item);
	} else if (dmgtype == "pos") {
		applydamage(actor, item, IP_CONST_DAMAGETYPE_POSITIVE, bonus,
			IP_CONST_LIGHTCOLOR_RED, VFX_IMP_PULSE_NEGATIVE);
		AddItemProperty(DURATION_TYPE_PERMANENT,
			ItemPropertyVisualEffect(ITEM_VISUAL_EVIL), item);
	} else if (dmgtype == "holy") {
		applydamage(actor, item, IP_CONST_DAMAGETYPE_POSITIVE, bonus,
			IP_CONST_LIGHTCOLOR_YELLOW, VFX_IMP_PULSE_HOLY);
		AddItemProperty(DURATION_TYPE_PERMANENT,
			ItemPropertyVisualEffect(ITEM_VISUAL_HOLY), item);
	} else if (dmgtype == "sub")
		applydamage(actor, item, IP_CONST_DAMAGETYPE_SUBDUAL, bonus,
			-1, VFX_IMP_PULSE_WATER);
	else if (dmgtype == "sonic")
		applydamage(actor, item, IP_CONST_DAMAGETYPE_SONIC, bonus,
			IP_CONST_LIGHTCOLOR_WHITE, VFX_IMP_PULSE_WIND);

	SetName(item, GetName(item, true) + ": " + eff);
	return true;
}

void main() {
	struct EventInfo e = GetEventInfo();

	if (e.ev == "item_freeactivate" && GetLocalInt(e.runnable, "iprp_rotate")) {
		string sequence = GetLocalString(e.runnable, "iprp_rotate_seq");
		string current = GetLocalString(e.runnable, "iprp_rotate_current");

		SendMessageToPC(e.actor, "ItemProperty rotation on " + GetName(e.runnable));
		SendMessageToPC(e.actor, " Sequence: " + sequence);
		SendMessageToPC(e.actor, " Current: " + current);

		int i = 0;
		bool found = false;
		string next;
		pBegin();
		streach_rx(sequence, ",", "", itx,
			if (found) {
				next = itx;
				break;
			}
			
			if (current != "" && itx == current)
				found = true;

			// if we can't find the currently selected, go to first
			if (i == 0)
				next = itx;
			i++;
		);
		pCommit();
		
		SendMessageToPC(e.actor, " Applying: " + next);

		apply(e.runnable, e.actor, next);
		SetLocalString(e.runnable, "iprp_rotate_current", next);
		event_stop_end_suppress();
	}
	
	/** /ea <type> */
	if (e.ev == "chat_command") {
		struct EventArguments ea = GetEventArguments(e.serial);
		if (ea.a0 != "ea")
			return;

		object wpn = GetItemInSlot(INVENTORY_SLOT_RIGHTHAND, e.runnable);
		if (GetLocalInt(wpn, "iprp_rotate")) {
			string sequence = GetLocalString(wpn, "iprp_rotate_seq");
			string type = GetStringTrim(ea.a1);
			string found = "";
			if (type != "") {
			
				pBegin();
				streach_rx(sequence, ",", "", itx,
					if (TestStringAgainstPattern(type + "*a_**", itx) ||
							TestStringAgainstPattern(type + "_**", itx)) {
						found = itx;
						break;
					}
				);
				pCommit();
			}
			if (found != "") {
				SendMessageToPC(e.runnable, "Applying: " + found);
				if(apply(wpn, e.runnable, found))
					SetLocalString(wpn, "iprp_rotate_current", found);
			} else
				SendMessageToPC(e.runnable, "No such ea property enchanted, available: " + sequence);
		} else
			SendMessageToPC(e.runnable, "No ea-enchanted weapon equipped.");

		event_stop_end();
	}
}
