extern("inc_lists")
extern("_gen")

const string TT = "killarcane";


void KillArcane_BuildDialog(object oPC, object oTarget);



void RemoveArcaneBySpellID(object oPC, object oTarget, int nID);


void KillArcane_BuildDialog(object oPC, object oTarget) {
	ClearList(oPC, TT);

	int nSpellID = -1;
	string sSpellName = "";

	string sAllSpells = " ";

	effect e = GetFirstEffect(oTarget);
	while (GetIsEffectValid(e)) {
		if (GetEffectCreator(e) == oPC && GetEffectSubType(e) == SUBTYPE_MAGICAL &&
				GetEffectType(e) != EFFECT_TYPE_VISUALEFFECT) {
			
			nSpellID = GetEffectSpellId(e);

			if (nSpellID != -1 && - 1 == FindSubString(sAllSpells, " " + IntToString(nSpellID) + " ")) {
				sSpellName = GetSpellName(nSpellID);
				sAllSpells += IntToString(nSpellID) + " ";
				AddListItem(oPC, TT, sSpellName);
				SetListInt(oPC, TT, nSpellID);
				SetListObject(oPC, TT, oTarget);
			}
		}
		e = GetNextEffect(oTarget);
	}

	string sHeader = "Zu entfernende Arkane waehlen; Ziel: " + GetName(oTarget);

	ResetConvList(oPC, oPC, TT, 50000, "cb_killarcane", sHeader);
}


void RemoveArcaneBySpellID(object oPC, object oTarget, int nID) {
	int nSpellID;
	effect e = GetFirstEffect(oTarget);
	while (GetIsEffectValid(e)) {
		if (GetEffectCreator(e) == oPC && GetEffectSubType(e) == SUBTYPE_MAGICAL &&
				GetEffectType(e) != EFFECT_TYPE_VISUALEFFECT) {

			nSpellID = GetEffectSpellId(e);

			if (nSpellID != -1 && nSpellID == nID) {
				SendMessageToPC(oPC, "Removing effect ID " + IntToString(nID));
				RemoveEffect(oTarget, e);
				break;
			}
		}
		e = GetNextEffect(oTarget);
	}

}
