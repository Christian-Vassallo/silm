extern("inc_lists")
extern("inc_cdb")
extern("inc_xp_handling")

const int
MENTOR_FLAG_SELF = 1,
MENTOR_FLAG_SINGLE = 2,
MENTOR_FLAG_AREA = 4,
MENTOR_FLAG_PARTY = 8,
MENTOR_FLAG_SERVER = 16;


struct Mentor {
	int account;
	int last_charge_cycle;
	int charge;
	int charge_per_hour;
	int capacity;
	int amount_per_pc;
	int flags;
};


const int
MENTOR_XP_AMOUNT = 30,
MENTOR_DEFAULT_CAPACITY = 300;

const int
MENTOR_CHARGE_PER_HOUR = 30;

void MentorDoXPTransaction(object oMentor, object oReceiver, int nXP);

// Returns the mentor and updates its struct value
struct Mentor GetMentorCharge(struct Mentor sM);

// Sets the mentor charge and updates its struct value
void SetMentorCharge(struct Mentor sM, int nCharge);


int GetMentorMayDoAction(struct Mentor sM, int nFlag);

// Returns the amount a mentor gets on self actions
int GetMentorSelfValue(struct Mentor sM);


// Returns a mentor
struct Mentor GetMentor(object oPC);

// Sets the mentor data. No need to call this, used
// internally.
void SaveMentor(struct Mentor sM);

//


struct Mentor GetMentor(object oPC)
{
	struct Mentor r;
	int nAID = GetAccountID(oPC);

	if (0 == nAID)
		return r;

	pQ(
		"select last_charge_cycle,charge,charge_per_hour,capacity,amount_per_pc,flags from mentors where account="
		+
		IntToString(nAID) + ";");

	if (pF()) {
		r.account = nAID;
		r.last_charge_cycle = StringToInt(pG(1));
		r.charge = StringToInt(pG(2));
		r.charge_per_hour = StringToInt(pG(3));
		r.capacity = StringToInt(pG(4));
		r.amount_per_pc = StringToInt(pG(5));
		r.flags = StringToInt(pG(6));

		// Update the charge thingy
		r = GetMentorCharge(r);
	}

	return r;
}

void SaveMentor(struct Mentor sM)
{
	if (0 == sM.account)
		return;

	pQ("update mentors set " +
	   "last_charge_cycle = unixts(), charge = " + IntToString(sM.charge) + ", " +
	   "charge_per_hour = " + IntToString(sM.charge_per_hour) + ", " +
	   "capacity = " + IntToString(sM.capacity) + ", " +
	   "amount_per_pc = " + IntToString(sM.amount_per_pc) +

	   " where account = " + IntToString(sM.account) + ";"
	  );
}

int GetMentorSelfValue(struct Mentor sM)
{
	if (GetMentorMayDoAction(sM, MENTOR_FLAG_SELF))
		return sM.amount_per_pc / 3;

	else
		return 0;
}

int GetMentorMayDoAction(struct Mentor sM, int nFlag)
{
	return sM.flags & nFlag;
}


struct Mentor GetMentorCharge(struct Mentor sM)
{
	int nC = sM.charge;

	int nNow = GetUnixTimestamp();

	int nLastChargeAccess = sM.last_charge_cycle;

	if (nLastChargeAccess == 0)
		nLastChargeAccess = nNow;

	int nSecondsPassed = nNow - nLastChargeAccess;
	float nHoursPassed = IntToFloat(nSecondsPassed) / 3600.0;


	int nChargedSince = FloatToInt(IntToFloat(sM.charge_per_hour) * nHoursPassed);

	if (nChargedSince < 0)
		nChargedSince = 0;

	sM.last_charge_cycle = nNow;

	nC += nChargedSince;

	int nCapacity = sM.capacity;

	if (nC > nCapacity)
		nC = nCapacity;

	sM.charge = nC;

	// save the new timestamp and things
	SaveMentor(sM);

	return sM;
}

void SetMentorCharge(struct Mentor sM, int nCharge)
{
	sM.charge = nCharge;
	// And save it
	SaveMentor(sM);
}



void MentorDoXPTransaction(object oMentor, object oReceiver, int nXP)
{
	if (!GetIsPC(oMentor))
		return;

	if (!GetIsPC(oReceiver))
		return;

	if (nXP < 1)
		return;

	int nAID = GetAccountID(oMentor),
		nCID = GetCharacterID(oMentor),
		nTCID = GetCharacterID(oReceiver);


	if (nAID == 0 || nCID == 0 || nTCID == 0) {
		SendMessageToAllDMs(PCToString(oMentor) +
							" tried to give XP to " +
							PCToString(oReceiver) +
							", but failed because no character IDs were present (Live data: " +
							IntToString(nAID) + " " + IntToString(nCID) + " " + IntToString(nTCID) + ").");
		return;
	}


	pQ("select id from mentordata where account=" +
	   IntToString(nAID) + " and character=" + IntToString(nCID) + " and t_character=" + IntToString(
		   nTCID) + ";");

	if (pF()) {
		string id = pG(1);

		pQ("update mentordata set xp=xp+" + IntToString(nXP) + " where id = " + id + ";");

	} else {
		pQ("insert into mentordata (account, character, t_character, xp) values(" +
		   IntToString(nAID) +
		   ", " + IntToString(nCID) + ", " + IntToString(nTCID) + ", " + IntToString(nXP) + ");");
	}

	GiveXP(oReceiver, nXP, FALSE);

	SendMessageToPC(oMentor, PCToString(oReceiver, 1) +
					" hat " + IntToString(nXP) + " XP durch Dich erhalten.");
	SendMessageToPC(oReceiver, "Du hast " +
					IntToString(nXP) + " XP durch " + PCToString(oMentor, 1) + " erhalten.");

	SendMessageToAllDMs("Mentor " +
						PCToString(oMentor) + " hat " + IntToString(nXP) + " an " + PCToString(oReceiver) + " vergeben.");
}

int MS_MakeDialog(object oPC);

void MS_Start(object oPC, object oMentorItem)
{
	DeleteLocalInt(oPC, "ms_sel");
	// SetLocalObject(oPC, "ms_current", oMentorItem);

	if (!MS_MakeDialog(oPC))
		return;

	AssignCommand(oPC, ActionStartConversation(oPC, "list_select", TRUE, TRUE));

}

int MS_MakeDialog(object oPC)
{
	ClearList(oPC, "ms");

	object oTargetPC = GetLocalObject(oPC, "mentor_target");

	int iSelRecipe = GetLocalInt(oPC, "ms_sel");

	struct Mentor sM = GetMentor(oPC);

	if (0 == sM.account) {
		ToPC(
			"Du bist nicht als Mentor in der Datenbank eingetragen, und kannst daher diesen Stein nicht benutzen.",
			oPC);
		return 0;
	}

	int
	nCharge = sM.charge,
	nCapacity = sM.capacity,
	nCPH = sM.charge_per_hour,
	nXPA = sM.amount_per_pc;

	if (nCapacity == 0) {
		ToPC("Dieser Stab hat keine Kapazitaet gesetzt und kann daher nicht verwendet werden.", oPC);
		SendMessageToAllDMs("Warning: MentorItem has no capacity set, player " + PCToString(oPC));
		return 0;
	}




	string sHeader;

	int nPCArea = GetPCCount(GetArea(oPC)),
		nPC = GetPCCount(),
		nPCParty = GetPCPartyCount(oPC),
		bIsDMOnline = GetPCCount(OBJECT_INVALID, TRUE) > 0;

	// Cough up a warning
	if (bIsDMOnline)
		FloatingTextStringOnCreature(
			"Der Mentorenstein nur eingeschraenkte Funktionalitaet, waehrend SLs online sind.", oPC, 0);


	if (nPC < 2)
		FloatingTextStringOnCreature(
			"Der Mentorenstein nur eingeschraenkte Funktionalitaet, wenn weniger als zwei Spieler online sind.",
			oPC, 0);


	sHeader = "Ladung: " +
			  IntToString(nCharge) +
			  "/" +
			  IntToString(nCapacity) +
			  " (Ladung pro RL-Stunde: " +
			  IntToString(nCPH) +
			  ").  Fuehle Dich darauf hingewiesen, dass die Mentoren-Daten regelmaessig ueberprueft werden und Missbrauch in Blut und Traenen endet.";

	if (!bIsDMOnline && nPC >= 2) {
		if ((oTargetPC != oPC && GetMentorMayDoAction(sM, MENTOR_FLAG_SINGLE))
				|| (oTargetPC == oPC && GetMentorMayDoAction(sM, MENTOR_FLAG_SELF))) {
			AddListItem(oPC, "ms", IntToString(nXPA) + " XP an den ausgewaehlten Spieler.");
			SetListInt(oPC, "ms", 2);
			SetListDisplayMode(oPC, "ms", nCharge > nXPA - GetMentorSelfValue(sM) ? 1 : -1);
		}

		if (GetMentorMayDoAction(sM, MENTOR_FLAG_AREA)) {
			AddListItem(oPC, "ms", IntToString(nXPA) +
						" XP an alle Spieler im Gebiet (" +
						IntToString(nPCArea) +
						" Spieler, " + IntToString(nXPA * nPCArea - GetMentorSelfValue(sM)) + " XP).");
			SetListInt(oPC, "ms", 4);
			SetListDisplayMode(oPC, "ms", nCharge > nXPA * nPCArea - GetMentorSelfValue(sM) ? 1 : -1);
		}

		if (GetMentorMayDoAction(sM, MENTOR_FLAG_PARTY)) {
			AddListItem(oPC, "ms", IntToString(nXPA) +
						" XP an alle Spieler in meiner Gruppe (" +
						IntToString(nPCParty) +
						" Spieler, " + IntToString(nXPA * nPCParty - GetMentorSelfValue(sM)) + " XP).");
			SetListInt(oPC, "ms", 3);
			SetListDisplayMode(oPC, "ms", nCharge > nXPA * nPCParty - GetMentorSelfValue(sM) ? 1 : -1);
		}

		if (GetMentorMayDoAction(sM, MENTOR_FLAG_SERVER)) {
			AddListItem(oPC, "ms", IntToString(nXPA) +
						" XP an alle Spieler auf dem Server (" +
						IntToString(nPC) + " Spieler, " + IntToString(nXPA * nPC - GetMentorSelfValue(sM)) + " XP).");
			SetListInt(oPC, "ms", 5);
			SetListDisplayMode(oPC, "ms", nCharge > nXPA * nPC - GetMentorSelfValue(sM) ? 1 : -1);
		}
	}

	ResetConvList(oPC, oPC, "ms", 50000, "ms_cb", sHeader);
	return 1;
}



