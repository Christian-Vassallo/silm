__sp_extern("_gen")
#include "inc_pgsql.nh"
__sp_extern("inc_lists")
__sp_extern("inc_currency")


const string TTT = "merc";

void MakeMerchantDialog(object oPC, object oMerc) {
	ClearList(oPC, TTT);

	int nMenuLevel0 = GetMenuLevel(oPC, TTT, 0);
	int nSelected   = GetListSelection(oPC);



	string sTag = GetStringLowerCase(GetTag(oMerc));
	string sMerc = sTag;


	pQ(
		"select text_intro,text_buy,text_sell,text_nothingtobuy,text_nothingtosell,text_swap,money,appraise_dc,money_limited from merchants where tag = " + 
		pSs(sMerc) + ";"
	);

	if ( !pF() ) {
		SendMessageToPC(oPC,
			"Bug. :/ Kein Haendler mit diesem tag gefunden, aber NPC hat Script dran. Hm, hm. Datenbank offski?");
		return;
	}


	string sTextIntro = pG(1),
		   sTextBuy = pG(2),
		   sTextSell = pG(3),
		   sTextNothingToBuy = pG(4),
		   sTextNothingToSell = pG(5),
		   sTextSwap = pG(6),
		   sText = "";

	int nMercMoney = StringToInt(pG(7)),
		nAppraiseDC = StringToInt(pG(8)),
		bLimitedMoney = StringToInt(pG(9));


	float fAppraiseMod = GetLocalFloat(oPC, TTT + "_" + sTag);
	if ( fAppraiseMod == 0.0 ) {
		fAppraiseMod = 1.0;

		if ( nAppraiseDC > 0 ) {
			int nD = d20() + GetSkillRank(SKILL_APPRAISE, oPC);

			fAppraiseMod += ( nD - nAppraiseDC ) * 0.01;

			if ( GetIsDM(oPC) ) {
				SendMessageToPC(oPC, "Your appraise modificator for this merchant is: " +
					FloatToString(fAppraiseMod) + " (because you rolled  a " + IntToString(nD) + ")");
			}

			SetLocalFloat(oPC, TTT + "_" + sTag, fAppraiseMod);
		}
	}


	int nPCMoney = Money2Value(CountInventoryMoney(oPC, 0));


	// Main menue.
	if ( 0 == nMenuLevel0 ) {
		// buy
		AddListItem(oPC, TTT, "Dinge vom Haendler kaufen");
		SetListInt(oPC, TTT, 1);

		// sell
		AddListItem(oPC, TTT, "Dinge an den Haendler verkaufen");
		SetListInt(oPC, TTT, 2);
		

		//AddListItem(oPC, TTT, "Dinge mit dem Haendler tauschen");
		//SetListInt(oPC, TTT, 3);


		ResetConvList(oPC, oPC, TTT, 50000, "merchant_cb", sTextIntro);

		// Buy from merchant
	} else if ( 1 == nMenuLevel0 ) {
		int nFound = 0, nCount = -1, nWant, nMax;
		string sResRef = "";
		object oSell;
		int nPrice;
		float fMark;

		pQ(
			"select resref,cur,sell_mark,max from stores " + 
			"where sells = 1 and ((cur > 0 and cur > min) or (cur = 0 and max = 0 and min = 0)) and " +
			"tag = " + pSs(sMerc) + " order by resref asc;"
		);

		while ( pF() ) {
			sResRef = pGs(1);
			nWant = pGi(2);
			nMax  = pGi(4);

			fMark = pGf(3);

			oSell = GetItemResRefPossessedBy(oMerc, sResRef);
			if ( !GetIsObjectValid(oSell) )
				oSell = CreateItemOnObject(sResRef, oMerc, 1, sResRef);

			int identf = GetIdentified(oSell);
			SetPlotFlag(oSell, FALSE);
			SetIdentified(oSell, TRUE);

			nPrice = FloatToInt(( 1.0 / fAppraiseMod ) *
						 fMark * ( GetGoldPieceValue(oSell) / GetItemStackSize(oSell) ));

			AddListItem(oPC, TTT, GetName(oSell) +
				( nMax == 0 ? " (gut bestockt)" : " (" + IntToString(nWant) + " auf Lager)" ) +
				": " + MoneyToString(Value2Money(nPrice)));
			SetListString(oPC, TTT, sResRef);
			SetListInt(oPC, TTT, nPrice);
			SetListFloat(oPC, TTT, IntToFloat(nMax));

			if ( nPrice < nPCMoney )
				SetListDisplayMode(oPC, TTT, DISPLAYMODE_GREEN);
			else
				SetListDisplayMode(oPC, TTT, DISPLAYMODE_RED);

			SetIdentified(oSell, identf);

			nFound += 1;
		}

		if ( !nFound )
			sText = sTextNothingToSell;
		else
			sText = sTextSell;


		ResetConvList(oPC, oPC, TTT, 50000, "merchant_cb", sText, "", "", "merchant_b2m0",
			"Zurueck zur Liste");


		// Sell to merchant.
	} else if ( 2 == nMenuLevel0 ) {

		int nFound = 0, nCount = -1, nWant, nMax;
		string sResRef = "";
		object oSell;
		int nPrice = 0;
		int nAvailable;
		float fMark;

		pQ(
			"select resref,buy_mark,cur,max from stores " +
			"where buys = 1 and ((cur < max) or (min=0 and cur=0 and max=0)) and tag = " + 
			pSs(sMerc) + " order by resref asc;"
		);

		while ( pF() ) {
			sResRef = pG(1);
			fMark = pGf(2);
			nWant = pGi(3);
			nMax  = pGi(4);
			
			nCount = GetItemCountByResRef(oPC, sResRef);

			nAvailable = 1;

			oSell = GetItemResRefPossessedBy(oMerc, sResRef);

			// Do not sell non-existant items
			if ( nCount == 0 )
				nAvailable = 0;

			// avoid bug thing
			if ( nCount == 1 && GetLocalString(oPC, "merc_last_sell") == sResRef ) {
				DeleteLocalString(oPC, "merc_last_sell");
				nCount -= 1;
				nAvailable = 0;
			}

			// oops?
			if ( !GetIsObjectValid(oSell) ) {
				nAvailable = 0;
				oSell = CreateItemOnObject(sResRef, oMerc);
			}

			if (!GetIsObjectValid(oSell)) {
				ToPC("Kann kein Item mit dieser ResRef erstellen (" + sResRef + "). Dies ist ein Bug. Bitte melde ihn den SLs.");
				continue;
			}
			
			nPrice = FloatToInt(fAppraiseMod * fMark * ( GetGoldPieceValue(oSell) / GetItemStackSize(oSell) ));

			AddListItem(oPC, TTT, GetName(oSell) +
				( nMax ==
				 0 ? " (immer gesucht)" : " (" +
				 IntToString(nCount) + " im Inventar, " + IntToString(nMax - nWant) + " gesucht)" ) +
				": " + MoneyToString(Value2Money(nPrice)));
			SetListString(oPC, TTT, sResRef);
			SetListInt(oPC, TTT, nPrice);
			SetListFloat(oPC, TTT, IntToFloat(nMax));

			if ( nAvailable && (!bLimitedMoney || nPrice < nMercMoney) )
				SetListDisplayMode(oPC, TTT, DISPLAYMODE_GREEN);
			else
				SetListDisplayMode(oPC, TTT, DISPLAYMODE_RED);

			nFound += 1;
		}


		if ( !nFound ) {
			sText = sTextNothingToBuy; // "Ihr habt nichts fuer das ich mich interessiere.";
		} else {
			sText = sTextBuy; //"Waehle den Gegenstand, den du verkaufen moechtest. Pro Klick wird einer verkauft.";
		}

		ResetConvList(oPC, oPC, TTT, 50000, "merchant_cb", sText, "", "", "merchant_b2m0",
			"Zurueck zur Liste");
	
	// Swap with merchant
	} else if ( 3 == nMenuLevel0 ) {
		/*
		int nAvailable;
		object
			oTakes, oGives;

		string
			sTakesR, sGivesR;

		int	takesC, givesC,
			takesA, givesA;

		int bAdhereInventory;

		int nPlayerItems;
		
		int nID;

		SQLQuery(
			"select takes_resref, takes_count, gives_resref, gives_count, adhere_inventory, " +
			"(select max-cur from merchant_inventory where merchant_inventory.resref = merchant_inventory_exchange.takes_resref) as takes_available, " +
			"(select cur-min from merchant_inventory where merchant_inventory.resref = merchant_inventory_exchange.gives_resref) as gives_available, " +
			"id " +
			"from merchant_inventory_exchange where " +
			"merchant_id = (select id from merchants where tag = " + sMerc + " limit 1) order by takes_resref asc;"
		);

		while ( pF() ) {
			sTakesR = pG(1);
			sGivesR = pG(3);
			takesC = StringToInt(pG(2));
			givesC = StringToInt(pG(4));
			bAdhereInventory = StringToInt(pG(5));
			takesA = StringToInt(pG(6));
			givesA = StringToInt(pG(7));
			nID = StringToInt(pG(8));

			nPlayerItems = GetItemCountByResRef(oPC, sTakesR);

			nAvailable = 1;


			// Check player has at least takes_count items
			if (nAvailable && nPlayerItems < takesC) {
				nAvailable = 0;
			}
			
			// Check merchant has at least gives_count items
			if (nAvailable && givesA < givesC) {
				nAvailable = 0;
			}
			
			// Check merchant has enough room for takes_count items
			if (nAvailable && takesC > takesA) {
				nAvailable = 0;
			}

			// BUG: The last transaction depleted the players inventory.
			// Skip this one out.
			// This is a limitation of the list managment system and nwserver.
			// Dont worry about it.
			/ *if ( nCount == takesC && GetLocalString(oPC, "merc_last_swap") == sResRef ) {
				DeleteLocalString(oPC, "merc_last_swap");
				nAvailable = 0;
			}* / 
			
			oTakes = GetItemResRefPossessedBy(oPC, sTakesR);

			// oops?
			if ( !GetIsObjectValid(oTakes) ) {
				ToPC("Kann kein Item mit dieser ResRef erstellen (" + sTakesR + "). Dies ist ein Bug. Bitte melde ihn den SLs.");
				continue;
			}

			// priceTakes = GetGoldPieceValue(oTakes) / GetItemStackSize(oTakes);
			// nPrice = FloatToInt(fAppraiseMod * fMark * ( GetGoldPieceValue(oSell) / GetItemStackSize(oSell) ));
		

			// Display text: NameTakes (takesC/takesA) -> NameGives (givesC/givesA)
			
			AddListItem(oPC, TTT, "Tausche " + 
				IntToString(takesC) + " " + GetName(oTakes) +
				" gegen " + 
				IntToString(givesC) + " " + GetName(oGives)
			);
			SetListInt(oPC, TTT, nID);
			//SetListString(oPC, TTT, sResRef);
			//SetListInt(oPC, TTT, nPrice);
			//SetListFloat(oPC, TTT, IntToFloat(nMax));

			if ( nAvailable )
				SetListDisplayMode(oPC, TTT, DISPLAYMODE_GREEN);
			else
				SetListDisplayMode(oPC, TTT, DISPLAYMODE_RED);
			*
		}


		sText = sTextSwap;

		ResetConvList(oPC, oPC, TTT, 50000, "merchant_cb", sText, "", "", "merchant_b2m0",
			"Zurueck zur Liste");
		*/
	}

}
