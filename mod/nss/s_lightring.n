extern("x0_i0_spells")
extern("x2_inc_spellhook")

#define LIGHTNING_RING_OBJECT_FILTER OBJECT_TYPE_CREATURE
//| OBJECT_TYPE_PLACEABLE | OBJECT_TYPE_ITEM | OBJECT_TYPE_DOOR

#define LIGHTNING_RING_DISTANCE 2.5

void LightningBolt(object oCaster, object oTarget, int nCasterLevel, int spell_dc,
				   int nMetaMagic = METAMAGIC_NONE);

location GetRandomLocationAtInternal(location lWhere, float fDist = 0.0)
{
	vector vNewPos = GetPositionFromLocation(lWhere);
	object oArea = GetAreaFromLocation(lWhere);
	float fX, fY, fZ;
	float fMaxY;
	fX = (Random(200) / 100.0 - 1.0) * fDist;
	fMaxY = sqrt(fDist * fDist - fX * fX);
	fY = (Random(200) / 100.0 - 1.0) * fMaxY;
	fZ = 0f + (IntToFloat(Random(15)) / 10);
	vNewPos += Vector(fX, fY, fZ);
	//Why a third parameter? Is this the "facing" value? --Rikan
	location lNewLoc = Location(oArea, vNewPos, VectorToAngle(-1.0 * vNewPos));
	return lNewLoc;

}

void vfx_glitter_rand(object on, int vfx)
{
	location at = GetRandomLocationAtInternal(GetLocation(on), 1f);

	ApplyEffectAtLocation(DURATION_TYPE_INSTANT,
						  EffectVisualEffect(vfx), at);
}


void spell_hb(object caster, int spell_dc, int remaining,
			  int meta = METAMAGIC_ANY)
{

	if (!GetHasSpellEffect(SPELL_LIGHTNING_RING, caster))
		return;

	float f;

	for (f = 0.0; f < 6.0; f += 0.3f) {
		DelayCommand(f, vfx_glitter_rand(caster, VFX_COM_BLOOD_SPARK_MEDIUM));
		DelayCommand(f + 0.1, vfx_glitter_rand(caster, VFX_COM_BLOOD_SPARK_LARGE));
		DelayCommand(f + 0.1, vfx_glitter_rand(caster, VFX_COM_SPARKS_PARRY));
	}

	iterate_near_object(LIGHTNING_RING_OBJECT_FILTER, caster, near,

						if (GetDistanceBetween(caster, near) > LIGHTNING_RING_DISTANCE)
						break;

						int dmg = d6(10);
						if (meta == METAMAGIC_MAXIMIZE)
							dmg = 6 * 10;
							if (meta == METAMAGIC_EMPOWER)
								dmg += dmg / 2;

								dmg = GetReflexAdjustedDamage(dmg, near, spell_dc,
										SAVING_THROW_TYPE_ELECTRICITY);

			if (dmg > 0) {
				ApplyEffectToObject(DURATION_TYPE_INSTANT,
									EffectVisualEffect(VFX_COM_HIT_ELECTRICAL), near);
					ApplyEffectToObject(DURATION_TYPE_INSTANT,
										EffectVisualEffect(VFX_IMP_LIGHTNING_S), near);
					ApplyEffectToObject(DURATION_TYPE_INSTANT,
										EffectDamage(dmg, DAMAGE_TYPE_ELECTRICAL), near);
				}
					   );

	// Free lightning bolts: select two enemies nearby
	int i = 1, j = 0;
	object oNear;

	while (true) {
		oNear = GetNearestCreature(CREATURE_TYPE_REPUTATION,
								   REPUTATION_TYPE_ENEMY, caster, i, CREATURE_TYPE_IS_ALIVE, true);

		if (!GetIsObjectValid(oNear))
			break;

		if (GetDistanceBetween(caster, oNear) > 30f)
			break;

		if (LineOfSightObject(caster, oNear)) {
			LightningBolt(caster, oNear, 5, spell_dc, meta);
			j++;
		}

		if (j > 1)
			break;

		i++;
	}

	if (remaining > 1)
		DelayCommand(6.0, spell_hb(caster, spell_dc, remaining - 1, meta));
}

void main()
{
	if (!X2PreSpellCastCode())
		return;

	object oCaster = OBJECT_SELF;

	int casterLevel = GetCasterLevel(oCaster);
	int dc = GetSpellSaveDC();
	int meta = GetMetaMagicFeat();

	int duration = casterLevel / 2;

	if (meta == METAMAGIC_EXTEND)
		duration *= 2;

	effect eff = EffectLinkEffects(
					 EffectDamageResistance(DAMAGE_TYPE_ELECTRICAL, 20),
					 EffectVisualEffect(744)
				 );

	ApplyEffectToObject(DURATION_TYPE_TEMPORARY, eff,
						oCaster, RoundsToSeconds(duration));

	SignalEvent(OBJECT_SELF,
				EventSpellCastAt(OBJECT_SELF, SPELL_LIGHTNING_RING));

	spell_hb(oCaster, dc, duration);
}



void LightningBolt(object oCaster, object oTarget, int nCasterLevel, int spell_dc,
				   int nMetaMagic = METAMAGIC_NONE)
{

	int nDamage;

	//Set the lightning stream to start at the caster's hands
	effect eLightning = EffectBeam(VFX_BEAM_LIGHTNING, oCaster, BODY_NODE_HAND);
	effect eVis  = EffectVisualEffect(VFX_IMP_LIGHTNING_S);
	effect eDamage;
	location lTarget = GetLocation(oTarget);
	object oNextTarget, oTarget2;
	float fDelay;
	int nCnt = 1;

	oTarget2 = GetNearestObject(OBJECT_TYPE_CREATURE | OBJECT_TYPE_DOOR | OBJECT_TYPE_PLACEABLE,
								oCaster, nCnt);

	while (GetIsObjectValid(oTarget2) && GetDistanceToObject(oTarget2) <= 30.0) {
		//Get first target in the lightning area by passing in the location of first target and the casters vector (position)
		oTarget = GetFirstObjectInShape(SHAPE_SPELLCYLINDER, 30.0, lTarget, TRUE,
										OBJECT_TYPE_CREATURE | OBJECT_TYPE_DOOR | OBJECT_TYPE_PLACEABLE, GetPosition(oCaster));

		while (GetIsObjectValid(oTarget)) {
			//Exclude the caster from the damage effects
			if (oTarget != oCaster && oTarget2 == oTarget) {
				if (spellsIsTarget(oTarget, SPELL_TARGET_STANDARDHOSTILE, oCaster)) {
					//Fire cast spell at event for the specified target
					SignalEvent(oTarget, EventSpellCastAt(oCaster, SPELL_LIGHTNING_BOLT));

					//Make an SR check
					if (!MyResistSpell(oCaster, oTarget)) {
						//Roll damage
						nDamage =  d6(nCasterLevel);

						//Enter Metamagic conditions
						if (nMetaMagic == METAMAGIC_MAXIMIZE) {
							nDamage = 6 * nCasterLevel;//Damage is at max
						}

						if (nMetaMagic == METAMAGIC_EMPOWER) {
							nDamage = nDamage + (nDamage / 2); //Damage/Healing is +50%
						}

						//Adjust damage based on Reflex Save, Evasion and Improved Evasion
						nDamage = GetReflexAdjustedDamage(nDamage, oTarget, spell_dc, SAVING_THROW_TYPE_ELECTRICITY);
						//Set damage effect
						eDamage = EffectDamage(nDamage, DAMAGE_TYPE_ELECTRICAL);

						if (nDamage > 0) {
							fDelay = GetSpellEffectDelay(GetLocation(oTarget), oTarget);
							//Apply VFX impcat, damage effect and lightning effect
							DelayCommand(fDelay, ApplyEffectToObject(DURATION_TYPE_INSTANT, eDamage, oTarget));
							DelayCommand(fDelay, ApplyEffectToObject(DURATION_TYPE_INSTANT, eVis, oTarget));
						}
					}

					ApplyEffectToObject(DURATION_TYPE_TEMPORARY, eLightning, oTarget, 1.0);
					//Set the currect target as the holder of the lightning effect
					oNextTarget = oTarget;
					eLightning = EffectBeam(VFX_BEAM_LIGHTNING, oNextTarget, BODY_NODE_CHEST);
				}
			}

			//Get the next object in the lightning cylinder
			oTarget = GetNextObjectInShape(SHAPE_SPELLCYLINDER, 30.0, lTarget, TRUE,
										   OBJECT_TYPE_CREATURE | OBJECT_TYPE_DOOR | OBJECT_TYPE_PLACEABLE, GetPosition(oCaster));
		}

		nCnt++;
		oTarget2 = GetNearestObject(OBJECT_TYPE_CREATURE | OBJECT_TYPE_DOOR | OBJECT_TYPE_PLACEABLE,
									oCaster, nCnt);
	}
}

