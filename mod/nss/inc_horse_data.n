__sp_extern("inc_pgsql")
__sp_extern("inc_cdb")

struct Rideable {
	int id;

	int cid;
	string stable;
	string type;
	int phenotype;
	string name;

	// ig-year + ig-month + ig_day + ig_hour
	int delivered_in_day;
	int delivered_in_hour;
	int delivered_in_month;
	int delivered_in_year;

	// Bought the ruddy thing?
	int bought;

	// Does this rideable need paying?
	int pay_rent;
};




int GetIsValidRideable(struct Rideable r);
struct Rideable GetRideable(object oPC);
struct Rideable SetRideable(struct Rideable r);

// Updates the timestamp with the current time.
struct Rideable SetRideableDeliveredIn(struct Rideable r);

int GetIsValidRideable(struct Rideable r) {
	return r.id > 0;
}


// Returns how much r costs to retrieve.
int GetRideableRentCost(struct Rideable r, float fPerDay);



int GetRideableRentCost(struct Rideable r, float fPerDay) {
	if ( 0 == r.delivered_in_year )
		return 0;

	if ( !r.pay_rent )
		return 0;

	int nRet =
		FloatToInt(fPerDay * IntToFloat(
				( GetCalendarDay() - r.delivered_in_day ) +
				( GetCalendarMonth() - r.delivered_in_month ) * 30 +
				( GetCalendarYear() - r.delivered_in_year ) * 30 * 12
			)
		);

	// Dont bill less than 5 copper (about 2 hours)
	// dont bill negative delays
	if ( nRet < 5 )
		nRet = 0;

	return nRet;
}


struct Rideable SetRideableDeliveredIn(struct Rideable r) {
	r.delivered_in_hour = GetTimeHour();
	r.delivered_in_day = GetCalendarDay();
	r.delivered_in_month = GetCalendarMonth();
	r.delivered_in_year = GetCalendarYear();
	return r;
}


struct Rideable GetRideable(object oPC) {
	int nCID = GetCharacterID(oPC);
	struct Rideable r;
	pQ(
		"select id,character,stable,type,phenotype,name,delivered_in_hour, delivered_in_day, delivered_in_month, delivered_in_year ,bought, pay_rent from rideables where character = "
		+ IntToString(nCID) + ";");
	if ( pF() ) {
		r.id = StringToInt(pG(1));
		r.cid = nCID;
		r.stable = pG(3);
		r.type = pG(4);
		r.phenotype = StringToInt(pG(5));
		r.name = pG(6);
		r.delivered_in_hour = StringToInt(pG(7));
		r.delivered_in_day = StringToInt(pG(8));
		r.delivered_in_month = StringToInt(pG(9));
		r.delivered_in_year = StringToInt(pG(10));
		r.bought = pGb(11);
		r.pay_rent = pGb(12);
	}

	return r;
}

struct Rideable SetRideable(struct Rideable r) {
	if ( !GetIsValidRideable(r) )
		return r;

	pQ("select id from rideables where id = " + IntToString(r.id) + ";");
	if ( pF() ) {
		pQ("update rideables set " +
			"stable=" + pE(r.stable) + ", " +
			"type=" + pE(r.type) + ", " +
			"phenotype=" + IntToString(r.phenotype) + ", " +
			"name=" + pE(r.name) + ", " +
			"delivered_in_hour=" + IntToString(r.delivered_in_hour) + ", " +
			"delivered_in_day=" + IntToString(r.delivered_in_day) + ", " +
			"delivered_in_month=" + IntToString(r.delivered_in_month) + ", " +
			"delivered_in_year=" + IntToString(r.delivered_in_year) + ", " +
			"bought=" + pSb(r.bought) + ", " +
			"pay_rent=" + pSb(r.pay_rent) +
			" where id=" + IntToString(r.id) + ";");
	} else {
		pQ(
			"insert into rideables (character,stable,type,phenotype,name,delivered_in_hour,delivered_in_day,delivered_in_month,delivered_in_year,bought,pay_rent) values("
			+
			IntToString(r.cid) +
			", " + pE(r.stable) + ", " + pE(r.type) + ", " + IntToString(r.phenotype) + ", " +
			pE(r.name) +
			", " +
			IntToString(r.delivered_in_hour) +
			", " +
			IntToString(r.delivered_in_day) +
			", " + IntToString(r.delivered_in_month) + ", " + IntToString(r.delivered_in_year) + ", " +
			pSb(r.bought) + ", " + pSb(r.pay_rent) + ");");
		pQ("select id from rideables oder by id desc;");
		pF();
		r.id = StringToInt(pG(1));
	}

	return r;
}
