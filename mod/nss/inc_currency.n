#define money_t int

const string
	ref_cp = "m_cp0",
	ref_sp = "m_sp0",
	ref_gp = "m_gp0",
	ref_pp = "m_pp0";

extern("inc_colors")

string
	cPlatin = ColorTag(cTeal),
	cGold   = ColorTag(cOrange),
	cSilver = ColorTag(Darken(cWhite, 30)),
	cCopper = ColorTag(Darken(cYellow, 30)),
	cPos    = ColorTag(Darken(cGreen, 10)),
	cNeg    = ColorTag(cRed),
	cClose  = ColorTagClose();

// Converts the given struct to "xx Platin xx Gold xx Silber xx Kupfer"-format
string MoneyToString(money_t money);

// Counts all ITEM money that is in oWithInventory
// optionally destroying it along the way.
money_t CountInventoryMoney(object oWithInventory, bool destroy = false);

// Gives money (in coin items) to a creature.
void GiveMoneyToCreature(object oPC, money_t value);

// Takes money from a creature.
void TakeMoneyFromCreature(object oPC, money_t value);

money_t GetCoinValue(object coin);

// Creates a coin(stack) on the given pc and tries to put
// it into the creatures' money bag.
object CreateMoney(string ref, object pc, int stack);


object __GetMoneyBag(object oPC) {
	object oItem = GetFirstItemInInventory(oPC);
	while (GetIsObjectValid(oItem)) {
		string sTag = GetTag(oItem);
		if (sTag == "Muenzbeutel")
			return oItem;
		oItem = GetNextItemInInventory(oPC);
	}
	return OBJECT_INVALID;
}

object GetMoneyInventory(object oPC) {
	object bag = __GetMoneyBag(oPC);
	if (!is_valid(bag))
		return oPC;
	else
		return bag;
}

object CreateMoney(string ref, object pc, int stack) {
	if (stack < 1)
		return OBJECT_INVALID;
	object money = CreateItemOnObject(ref, pc, stack);
	object bag = __GetMoneyBag(pc);
	if (is_valid(bag))
		AssignCommand(pc, ActionGiveItem(money, bag));
	return money;
}

string MoneyToString(money_t value) {
	int av = abs(value);
	int pp = av / 1000;
	int gp = (av - pp * 1000) / 100;
	int sp = (av - pp * 1000 - gp * 100) / 10;
	int cp = av % 10;

	string ret;
	if (pp != 0)
		ret += cPlatin + itoa(pp) + "pp" + cClose + " ";
	if (gp != 0)
		ret += cGold + itoa(gp) + "gp" + cClose + " ";
	if (sp != 0)
		ret += cSilver + itoa(sp) + "sp" + cClose + " ";
	if (value == 0 || cp != 0)
		ret += cCopper + itoa(cp) + "cp" + cClose + " ";
	
	if (value < 0)
		ret = cNeg + "- " + ret;
	if (value > 0)
		ret = cPos + "+ " + ret;

	ret = GetStringLeft(ret, GetStringLength(ret) - 1);
	ret += cClose;
	return ret;
}

money_t CountInventoryMoney(object oWithInventory, bool destroy = false) {
	money_t sum = 0;

	object oItem = GetFirstItemInInventory(oWithInventory);
	while (GetIsObjectValid(oItem)) {
		money_t val = GetCoinValue(oItem);
		sum += val;
		if (val > 0 && destroy)
			DestroyObject(oItem);

		oItem = GetNextItemInInventory(oWithInventory);
	}

	return sum;
}

void GiveMoneyToCreature(object oPC, money_t value) {
	int av = abs(value);
	int pp = av / 1000;
	int gp = (av - pp * 1000) / 100;
	int sp = (av - pp * 1000 - gp * 100) / 10;
	int cp = av % 10;

	CreateMoney(ref_pp, oPC, pp);
	CreateMoney(ref_gp, oPC, gp);
	CreateMoney(ref_sp, oPC, sp);
	CreateMoney(ref_cp, oPC, cp);
}

void TakeMoneyFromCreature(object oPC, money_t value) {
	money_t current = CountInventoryMoney(oPC, true);
	if (current > value)
		GiveMoneyToCreature(oPC, current - value);
}

money_t GetCoinValue(object coin) {
	string tag = GetTag(coin);
	if (GetStringLeft(tag, 5) != "COIN_")
		return 0;
	
	string vs = GetStringRight(tag, GetStringLength(tag) - 5);
	int val = atoi(vs);

	int stack = GetItemStackSize(coin);
	if (stack < 1)
		stack = 1;

	return stack * val;
}
