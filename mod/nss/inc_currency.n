#define money_t int

extern("inc_colors")

string
cPlatin = ColorTag(cTeal),
cGold   = ColorTag(cOrange),
cSilver = ColorTag(Darken(cWhite, 30)),
cCopper = ColorTag(Darken(cYellow, 30)),
cPos    = ColorTag(Darken(cGreen, 10)),
cNeg    = ColorTag(cRed),
cClose  = ColorTagClose();

const int
CURRENCY_MAX_STACKSIZE = 1000;

const int
CURRENCY_FEATHER = 1 << 0, // split up large money into some smaller chunks
CURRENCY_LETTERS = 1 << 1, // use currency letters, blood notes, etc
CURRENCY_TOAL    = 1 << 2, // pay out waterkeep toals
CURRENCY_EP      = 1 << 3; // spawn ep-valued coins

const int
CURRENCY_ALL = CURRENCY_LETTERS | CURRENCY_TOAL | CURRENCY_EP,

CURRENCY_CREATE_DEFAULT = CURRENCY_FEATHER | CURRENCY_ALL,

CURRENCY_CREATE_DEFAULT_EXCEPT_FEATHER = CURRENCY_ALL;

// Converts the given struct to "xx Platin xx Gold xx Silber xx Kupfer"-format
string MoneyToString(money_t money);

// Counts all ITEM money that is in oWithInventory
// optionally destroying it along the way.
money_t CountInventoryMoney(object oWithInventory, bool destroy = false,
							object oPayee = OBJECT_INVALID);

// Gives money (in coin items) to a creature.
void GiveMoneyToCreature(object oPC, money_t value,
						 int flags = CURRENCY_CREATE_DEFAULT, object oPayer = OBJECT_INVALID);

// Takes money from a creature.
void TakeMoneyFromCreature(object oPC, money_t value,
						   object oPayee = OBJECT_INVALID);

money_t GetCoinValue(object coin, object oPayee = OBJECT_INVALID);

// Creates a coin(stack) on the given pc and tries to put
// it into the creatures' money bag.
void CreateMoney(string ref, object pc, int stack, int valueOverride = 0);


object __GetMoneyBag(object oPC)
{
	object oItem = GetFirstItemInInventory(oPC);

	while (GetIsObjectValid(oItem)) {
		string sTag = GetTag(oItem);

		if (sTag == "Muenzbeutel")
			return oItem;

		oItem = GetNextItemInInventory(oPC);
	}

	return OBJECT_INVALID;
}

object GetMoneyInventory(object oPC)
{
	object bag = __GetMoneyBag(oPC);

	if (!is_valid(bag))
		return oPC;

	else
		return bag;
}

void CreateEitherMoney(string ref_a, string ref_b, object pc, int stack)
{
	if (stack < 1)
		return;

	int part_b = Random(stack);
	CreateMoney(ref_a, pc, stack - part_b);
	CreateMoney(ref_b, pc, part_b);
}


void CreateMoney(string ref, object pc, int stack, int valueOverride = 0)
{
	if (stack < 1)
		return;

	string newTag = "";

	if (valueOverride > 0)
		newTag = "COIN_" + itoa(valueOverride);

	object bag = __GetMoneyBag(pc);

	int toCreate = stack;

	while (toCreate > 0) {
		int stSize = toCreate > CURRENCY_MAX_STACKSIZE ?
					 CURRENCY_MAX_STACKSIZE : toCreate;

		object money = CreateItemOnObject(ref, pc, stSize, newTag);

		if (is_valid(bag))
			AssignCommand(pc, ActionGiveItem(money, bag));

		toCreate -= stSize;
	}
}

string MoneyToString(money_t value)
{
	int av = abs(value);
	int pp = av / 1000;
	int gp = (av - pp * 1000) / 100;
	int sp = (av - pp * 1000 - gp * 100) / 10;
	int cp = av % 10;

	string ret;

	if (pp != 0)
		ret += cPlatin + itoa(pp) + "pp" + cClose + " ";

	if (gp != 0)
		ret += cGold + itoa(gp) + "gp" + cClose + " ";

	if (sp != 0)
		ret += cSilver + itoa(sp) + "sp" + cClose + " ";

	if (value == 0 || cp != 0)
		ret += cCopper + itoa(cp) + "cp" + cClose + " ";

	if (value < 0)
		ret = cNeg + "- " + ret;

	if (value > 0)
		ret = cPos + "+ " + ret;

	ret = GetStringLeft(ret, GetStringLength(ret) - 1);
	ret += cClose;
	return ret;
}

money_t CountInventoryMoney(object oWithInventory, bool destroy = false,
							object oPayee = OBJECT_INVALID)
{
	money_t sum = 0;

	object oItem = GetFirstItemInInventory(oWithInventory);

	while (GetIsObjectValid(oItem)) {
		money_t val = GetCoinValue(oItem, oPayee);
		sum += val;

		if (val > 0 && destroy)
			DestroyObject(oItem);

		oItem = GetNextItemInInventory(oWithInventory);
	}

	return sum;
}

void GiveMoneyToCreature(object oPC, money_t value,
						 int flags = CURRENCY_CREATE_DEFAULT,
						 object oPayer = OBJECT_INVALID)
{
	int av = abs(value);

	// Standard denomination
	int pp = av / 1000;
	int gp = (av - pp * 1000) / 100;
	int sp = (av - pp * 1000 - gp * 100) / 10;
	int cp = av % 10;

	if (flags & CURRENCY_FEATHER) {
		// Seed some X if we have more than n X-1
		if (pp > 2 && gp == 0) {
			pp -= 1;
			gp += 10;
		}

		if (gp > 2 && sp == 0) {
			gp -= 1;
			sp += 10;
		}

		if (sp > 2 && cp == 0) {
			sp -= 1;
			cp += 10;
		}
	}

	// bank notes, IOUs
	int letter250 = 0;
	int letter50  = 0;

	if (flags & CURRENCY_LETTERS) {
		letter250 = pp / 250;

		if (flags & CURRENCY_FEATHER && letter250 > 0)
			letter250--;

		pp -= letter250 * 250;

		letter50 = pp / 50;

		if (flags & CURRENCY_FEATHER && letter50 > 0)
			letter50--;

		pp -= letter50 * 50;
	}

	// Special denomination:
	int ep = 0;

	if (flags & CURRENCY_EP) {
		// 1 in 4 pp p is a tricrown or blueeye
		ep = (pp / 4) * 2;
		pp -= ep / 2;
	}

	int toal = 0;

	if (flags & CURRENCY_TOAL) {
		// 1 in 4 gold pieces is a toal.
		toal = (gp / 4) / 2;
		gp -= toal * 2;
	}

	CreateMoney("m_note0", oPC, letter50);
	CreateMoney("m_note1", oPC, letter250);

	CreateMoney("m_pp0", oPC, pp);
	CreateEitherMoney("m_tricrown", "m_ep0", oPC, ep);

	CreateEitherMoney("m_toal", "m_toalh", oPC, toal);
	CreateEitherMoney("m_gp0", "m_gp1", oPC, gp);

	int sp_patina = sp / 4;
	sp -= sp_patina;
	CreateEitherMoney("m_sp0", "m_sp1", oPC, sp);
	CreateMoney("m_sp2", oPC, sp_patina);

	int cp_green = cp / 4;
	cp -= cp_green;
	int cp_a = cp / 2;
	cp -= cp_a;
	CreateMoney("m_cp4", oPC, cp_green);
	CreateEitherMoney("m_cp0", "m_cp1", oPC, cp_a);
	CreateEitherMoney("m_cp2", "m_cp3", oPC, cp);
}

void TakeMoneyFromCreature(object oPC, money_t value,
						   object oPayee = OBJECT_INVALID)
{
	money_t current = CountInventoryMoney(oPC, true);

	if (current > value)
		GiveMoneyToCreature(oPC, current - value);
}

money_t GetCoinValue(object coin, object oPayee = OBJECT_INVALID)
{
	string tag = GetTag(coin);

	if (GetStringLeft(tag, 5) != "COIN_")
		return 0;

	string vs = GetStringRight(tag, GetStringLength(tag) - 5);
	int val = atoi(vs);

	int stack = GetItemStackSize(coin);

	if (stack < 1)
		stack = 1;

	return stack * val;
}
