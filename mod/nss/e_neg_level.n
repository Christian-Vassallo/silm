extern("_gen")

int IPGetNegativeLevelsFor(object creature, object item) {
	int diff = 0;

	int ge = GetAlignmentGoodEvil(creature);
	int lc = GetAlignmentLawChaos(creature);
	string gelc = AlignmentToString(ge, lc, true);

	iterate_iprp(item,
		switch (GetItemPropertyType(oIterate)) {
			case ITEM_PROPERTY_NEGATIVE_LEVELS:
				diff += abs(GetItemPropertyCostTableValue(oIterate));
				break;
			case ITEM_PROPERTY_NEGATIVE_LEVELS_DIFFERING_ALIGNMENT:
				diff += abs(GetItemPropertyCostTableValue(oIterate)) * atoi(Get2DAString("alignment_diff", gelc, abs(GetItemPropertySubType(oIterate))));
				break;
			case ITEM_PROPERTY_NEGATIVE_LEVELS_DIFFERING_ALIGNGRP:
				diff += abs(GetItemPropertyCostTableValue(oIterate)) * atoi(Get2DAString("aligngrp_diff", gelc, abs(GetItemPropertySubType(oIterate))));
				break;
			case ITEM_PROPERTY_NEGATIVE_LEVELS_BY_ALIGNMENT:
				if (Get2DAString("iprp_alignment", "Label", GetItemPropertySubType(oIterate)) != gelc)
					diff += abs(GetItemPropertyCostTableValue(oIterate));
				break;
			case ITEM_PROPERTY_NEGATIVE_LEVELS_BY_ALIGNGRP:
				switch (GetItemPropertySubType(oIterate)) {
					case 1 /* N */: if (ALIGNMENT_NEUTRAL == ge || ALIGNMENT_NEUTRAL == lc) diff += abs(GetItemPropertyCostTableValue(oIterate)); break;
					case 2 /* L */: if (ALIGNMENT_LAWFUL == lc) diff += abs(GetItemPropertyCostTableValue(oIterate)); break;
					case 3 /* C */: if (ALIGNMENT_CHAOTIC == lc) diff += abs(GetItemPropertyCostTableValue(oIterate)); break;
					case 4 /* G */: if (ALIGNMENT_GOOD == ge) diff += abs(GetItemPropertyCostTableValue(oIterate)); break;
					case 5 /* E */: if (ALIGNMENT_EVIL == ge) diff += abs(GetItemPropertyCostTableValue(oIterate)); break;
				}
				break;
		}
	);

	return diff;
}

void main() {
	struct EventInfo e = GetEventInfo();

	if (e.ev == "item_equip") {
		int diff = IPGetNegativeLevelsFor(e.actor, e.runnable);
		if (diff > 0) {
			ApplyEffectToObject(DURATION_TYPE_PERMANENT, SupernaturalEffect(EffectNegativeLevel(diff)), e.actor);
			ApplyEffectToObject(DURATION_TYPE_INSTANT, EffectVisualEffect(VFX_IMP_REDUCE_ABILITY_SCORE), e.actor);
		}
	}

	if (e.ev == "item_unequip") {
		int diff = IPGetNegativeLevelsFor(e.actor, e.actedon);
		if (diff > 0)
			RemoveAllEffects(e.actor, EFFECT_TYPE_NEGATIVELEVEL, SUBTYPE_SUPERNATURAL);
	}
}
