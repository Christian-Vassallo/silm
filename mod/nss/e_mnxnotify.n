extern("inc_events")
extern("inc_cdb")
extern("inc_mnx")

void main() {
	struct EventInfo ei = GetEventInfo();

	if ("module_load" == ei.ev) {
		mnx_asynchronous_command_noreply(mnx_prepare_command("startup", GIT_COMMIT));
	}

	string sCharName = GetName(ei.actor);
	string sAccountName = GetPCName(ei.actor);
	int nAID = GetAccountID(ei.actor);
	int nCID = GetCharacterID(ei.actor);
	string bIsDM = BoolToString(GetIsDM(ei.actor));
	object oArea = ei.runnable;

	if (GetIsPC(ei.actor) && ei.ev == "area_enter") {
		mnx_asynchronous_command_noreply(mnx_prepare_command("areaenter", sAccountName, sCharName, IntToString(nAID), IntToString(nCID), GetResRef(
				oArea), GetTag(oArea), GetName(oArea)));
	}
	
	if (GetIsPC(ei.actor) && ei.ev == "area_leave") {
		mnx_asynchronous_command_noreply(mnx_prepare_command("arealeave", sAccountName, sCharName, IntToString(nAID), IntToString(nCID)));
	}

	if ("pc_login" == ei.ev) {
		mnx_asynchronous_command(mnx_prepare_command("cliententer", sAccountName, sCharName, IntToString(nAID), IntToString(nCID),
			bIsDM, GetPCIPAddress(ei.actor), GetPCPublicCDKey(ei.actor)));
	}
	
	if ("pc_logout" == ei.ev) {
		mnx_asynchronous_command_noreply(mnx_prepare_command("clientleave", sAccountName, sCharName, IntToString(nAID), IntToString(nCID)));
	}

}
