/* File: _ou_jump.n
 * This script allows jumping from one jump target to the next,
 * making appropriate DCs and appropriate results on failure.
 *
 * Rules for Calculation:
 *  - Climb Placies:
 *     DC = DC_CLIMB_UP/DOWN_ADJUST +
 *            specified as by DM (through placeable)
 *  - Jump Placies:
 *     DC = Distance + Elevation in ft * 4
 */

extern("_gen")

#define DC_SKILL SKILL_TUMBLE

// Constant: BASE_DC_JUMP
// 10
#define BASE_DC_JUMP 10
// Constant: BASE_DC_CLIMB
// 0
#define BASE_DC_CLIMB 0

// Constant: DC_ROPE_ADJUST
// -1
#define DC_ROPE_ADJUST -1

// Constant: DC_ROPEHOOK_ADJUST
// -2
#define DC_ROPEHOOK_ADJUST -2

// Constant: DC_CLIMB_UP_ADJUST
// 0
#define DC_CLIMB_UP_ADJUST 0

// Constant: DC_CLIMB_DOWN_ADJUST
// 0
#define DC_CLIMB_DOWN_ADJUST 0

// Constant: DC_CLIMB_MIN
// 1
#define DC_CLIMB_MIN 1
// Constant: DC_CLIMB_MAX
// 50
#define DC_CLIMB_MAX 50


void main()
{
	object oJumper = GetLastUsedBy();

	string sTag = GetTag(OBJECT_SELF);
	string sResRef = GetResRef(OBJECT_SELF);
	string name = GetName(OBJECT_SELF);

	object oTarget = GetNearestObjectByTag(sTag);


	int has_rope = GetIsObjectValid(GetItemPossessedBy(oJumper, "rope"));
	int has_hook = GetIsObjectValid(GetItemPossessedBy(oJumper, "hook"));



	if (!GetIsObjectValid(oTarget)) {
		SpeakString("Kein Zielpunkt in der Naehe.");
		return;
	}


	if (GetMaxHitPoints(oJumper) > 1 && GetCurrentHitPoints(oJumper) < 2) {
		SendMessageToPC(oJumper, "Du kannst in dieser Verfassung unmoeglich springen oder klettern.");
		return;
	}


	// 3.28: feet!
	float fDistance = GetDistanceBetween(OBJECT_SELF, oTarget) * 3.28;
	float fElevation = GetElevationBetween(OBJECT_SELF, oTarget) * 3.28;

	// 1 = up, 0 = down
	int climbing_up = (fElevation > 0.0);

	int nDC = 0;
	int player_skill = GetSkillRank(DC_SKILL, oJumper);

	// Racial Bonus.
	if (RACIAL_TYPE_HALFLING == GetRacialType(oJumper))
		player_skill += 2;


	if ("pjump" == sTag) {

		nDC = BASE_DC_JUMP;

		nDC += abs(FloatToInt(fDistance)) +
			   FloatToInt(fElevation * 4); // can have neg values: jumping down is easier!

	} else if ("pclimb" == sTag) {

		nDC = BASE_DC_CLIMB;

		nDC += (climbing_up ? DC_CLIMB_UP_ADJUST : DC_CLIMB_DOWN_ADJUST);


		if (has_rope && has_hook)
			nDC += DC_ROPEHOOK_ADJUST;

		else if (has_rope)
			nDC += DC_ROPE_ADJUST;

		nDC += GetLocalInt(OBJECT_SELF, "dc");

		nDC = clamp(nDC, DC_CLIMB_MIN, DC_CLIMB_MAX);

	} else {
		SpeakString("Unnown plasie, dis. Do no now wad do do! :(");
		return;
	}


	SendMessageToPC(oJumper, "SG fuer diesen Kletterpunkt: " + itoa(nDC));
	SendMessageToPC(oJumper, "Distanz (in Fuss): " + FloatToString(fDistance));
	SendMessageToPC(oJumper, "Erhoehung (in Fuss): " + FloatToString(fElevation));


	int success = false;

	// Take10?
	if (10 + player_skill >= nDC) {
		SendMessageToPC(oJumper, name + " Take10: Erfolg.");
		success = true;

	} else {
		//MakeThrow(int nDC, int nDFaces, int nDCount, int nMod, int bDisplayToAll = FALSE);
		int throw = d20();

		if (throw + player_skill >= nDC) {
			SendMessageToPC(oJumper, name + " 1d20: (" + itoa(throw) + " + " + itoa(
								player_skill) + " vs " + itoa(
								nDC) + "): Erfolg.");
			success = true;

		} else {
			SendMessageToPC(oJumper, name + " 1d20: (" + itoa(throw) + " + " + itoa(
								player_skill) + " vs " + itoa(
								nDC) + "): Fehlschlag.");
		}


	}



	// no aq exploits
	AssignCommand(oJumper, ClearAllActions());

	if (success) {
		AssignCommand(oJumper, JumpToObject(oTarget));

	} else {
		// Fail and/or fall back down.
		if (climbing_up) {

		} else {
			AssignCommand(oJumper, JumpToObject(oTarget));
		}

		AssignCommand(oJumper, ActionPlayAnimation(ANIMATION_LOOPING_DEAD_FRONT, 1.0, 20.0));

		// Dazed for one round
		ApplyEffectToObject(DTT, EffectDazed(), oJumper, 6.0);

		int ielevation = ftoi(fElevation /= 10.0);
		int damage = d3(clamp(ielevation, 1, 4));

		// Dont hurt to kill.
		damage = clamp(damage, 0, GetCurrentHitPoints(oJumper) - 1);

		ApplyEffectToObject(DTI, EffectDamage(damage, DAMAGE_TYPE_BLUDGEONING), oJumper);

	}
}
