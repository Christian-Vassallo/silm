/*
  File: inc_events.n

  A event system.
  Designed to replace and surpass nw_*_switches.
  Copyright Bernard 'elven' Stoeckner.

  This code is licenced under the
  GNU/GPLv2 General Public Licence.
*/
#include "inc_pgsql.nh"
#include "inc_events.h"

// Function: RehashEventScripts
//
// Re-loads event scripts from the database
// 
// Returns the number of script-events loaded.
int RehashEventScripts();

// Function: RunEventScriptsFor
// 
// Runs all scripts that are registered for nEvent
// Returns:
// - mask of EVENT_RESULT_*
int RunEventScriptsFor(int nEventType, int nEvent, object oRunnable, object oActor, object oActedOn,
	location lActedAt, int nRequireMode = EVENT_MODE_ANY);

// Function: RunEventScriptsForWithArgv
// 
// Runs all scripts that are registered for nEvent
// Returns:
// - mask of EVENT_RESULT_*
int RunEventScriptsForWithArgv(int nEventType, int nEvent, object oRunnable, object oActor, object oActedOn,
	location lActedAt, struct EventArguments evArgs, int nRequireMode = EVENT_MODE_ANY);

// Function: RunEventScript
//
// Runs the named event script on oRunnable
// Returns:
// - mask of EVENT_RESULT_*
int RunEventScript(string sScript, int nEventMode, int nEventType, int nEvent, int nEventMask, object oRunnable,
	object oActor, object oActedOn, location lActedAt, int nCurPos, int nMaxPos, float fDeferTime);

// Function: RunEventScriptAsync
//
// Wrapper around RunEventScript, for delayed execution
void RunEventScriptAsync(string sScript, int nEventMode, int nEventType, int nEvent, int nEventMask, object oRunnable,
	object oActor, object oActedOn, location lActedAt, int nCurPos, int nMaxPos, float fDeferTime);


// Function GetEventInfo
// Returns EventInfo
struct EventInfo GetEventInfo();

// Function: SetEventArguments
// Used internally to set the event arguments.
void SetEventArguments(struct EventArguments ea);

// Function: GetEventArguments
// Returns all event-specific arguments that have been passed to the event.
struct EventArguments GetEventArguments();

// Function: ExecuteScriptInt 
// 
// * Execute sScript on oTarget returning an integer.
int ExecuteScriptInt(string sScript, object oTarget);

// Function: SetEventScriptReturnValue 
// 
// Sets the return value for scripts.
// - mask of EVENT_RESULT_*
void SetEventScriptReturnValue(int nValue, string sStatus = "");

/*
Section: A demonstration script showing usage

Script file named 'e_test':
: extern("inc_events") // Default include
:
: void main() {
:   int type = GetEventType();
:	int event = GetEvent();
:   object runnable = OBJECT_SELF;
:	object actor = GetEventActor();
:	object actedon = GetEventActedOn();
:
:   if (EVENT_TYPE_AREA == type) {
:	   if (EVENT_AREA_ENTER == event) {
:	       // Player enters area, tell them where they are:
:		    if (GetIsPC(actor))
:			    SendMessageToPC(actor, "You are now in " + GetName(actedon));
:	       // For a reference as to what runnable, actor and actedon are, see the constants
:		    // documentation above
:		}
:   }
:
:   if (EVENT_TYPE_ITEM == type) {
:		if (EVENT_ITEM_ACTIVATE == event) {
:			// Code when an item gets activated.
:			// actor is the creature that did the activating
:	        // actedon is the item
:		    // Do not use GetItemActivator(), GetItemActivated(), and so on, in asynchronous scripts.
:		}
:
:		if (EVENT_ITEM_UNEQUIP == event) {
:			// Destroy all items that players unequip. Yay.
:			DestroyObject(runnable);
:			SendMessageToPC(actor, "<Nelson> Haa haa!");
:		}
:	}
:}

In your module initialisation:
: RegisterEventScript('e_test', EVENT_TYPE_ITEM, EVENT_ITEM_ACTIVATE | EVENT_ITEM_UNEQUIP | EVENT_AREA_ENTER, false);
: RegisterEventScript('e_test', EVENT_TYPE_AREA, EVENT_AREA_ENTER, false);
*/

/* implementation */

int RunEventScriptsFor(int nEventType, int nEvent, object oRunnable, object oActor,
		object oActedOn, location lActedAt, int nRequireMode = EVENT_MODE_ANY) {

	struct EventArguments emptyArgs;
	return RunEventScriptsForWithArgv(nEventType, nEvent, oRunnable, oActor, oActedOn, 
		lActedAt, emptyArgs, nRequireMode);
}

int RunEventScriptsForWithArgv(int nEventType, int nEvent, object oRunnable, object oActor,
		object oActedOn, location lActedAt, struct EventArguments args, int nRequireMode = EVENT_MODE_ANY) {

	if (!is_valid(oRunnable)) {
		_ERROR("oRunnable == OBJECT_INVALID for " + itoa(nEventType) + ":" + itoa(nEvent) + " in mode " + itoa(nRequireMode));
		return EVENT_RESULT_FAIL;
	}

	int count = GetLocalInt(GetModule(), "inc_events_last");
	int i, type, mask, sync, ret;
	string si, script, tag, ref;
	float defer_time = 0.0;

	SetEventArguments(args);

	int total_ret = 0;

	for (i = 0; i < count; i++) {
		si = IntToString(i);
		
		type = GetLocalInt(GetModule(), "inc_events_" + si + "_eventtype");
		if (type != EVENT_TYPE_ANY && (nEventType != type))
			continue;

		mask = GetLocalInt(GetModule(), "inc_events_" + si + "_eventmask");
		if (mask != EVENT_ANY && (nEvent != mask & nEvent))
			continue;


		tag = GetLocalString(GetModule(), "inc_events_" + si + "_r_tagmask");
		if (tag != "" && tag != "**" && !TestStringAgainstPattern(GetStringLowerCase(tag), GetStringLowerCase(GetTag(oRunnable))))
			continue;
		ref = GetLocalString(GetModule(), "inc_events_" + si + "_r_refmask");
		if (ref != "" && ref != "**" && !TestStringAgainstPattern(GetStringLowerCase(ref), GetStringLowerCase(GetResRef(oRunnable))))
			continue;
		tag = GetLocalString(GetModule(), "inc_events_" + si + "_a_tagmask");
		if (tag != "" && tag != "**" && !TestStringAgainstPattern(GetStringLowerCase(tag), GetStringLowerCase(GetTag(oActor))))
			continue;
		ref = GetLocalString(GetModule(), "inc_events_" + si + "_a_refmask");
		if (ref != "" && ref != "**" && !TestStringAgainstPattern(GetStringLowerCase(ref), GetStringLowerCase(GetResRef(oActor))))
			continue;
		
		tag = GetLocalString(GetModule(), "inc_events_" + si + "_o_tagmask");
		if (tag != "" && tag != "**" && !TestStringAgainstPattern(GetStringLowerCase(tag), GetStringLowerCase(GetTag(oActedOn))))
			continue;
		ref = GetLocalString(GetModule(), "inc_events_" + si + "_o_refmask");
		if (ref != "" && ref != "**" && !TestStringAgainstPattern(GetStringLowerCase(ref), GetStringLowerCase(GetResRef(oActedOn))))
			continue;
		
		
		script = GetLocalString(GetModule(), "inc_events_" + si + "_script");

		if (script == "")
			continue;

		sync = GetLocalInt(GetModule(), "inc_events_" + si + "_eventsync");
	
		
		int runmode = EVENT_MODE_ANY;

		if (runmode != nRequireMode)
			runmode = nRequireMode;

		// Script wants sync mode, but we are forced to defer. Skip.
		if (sync && runmode == EVENT_MODE_DEFER)
			continue;

		// Script wants to defer, but we are forced to sync. Continue.
		// if (!sync && rummode == EVENT_MODE_SYNC)
		//	;
		
		// Scripts wants sync mode, and we dont care. Use sync.
		if (sync && runmode == EVENT_MODE_ANY)
			runmode = EVENT_MODE_SYNC;

		ret = 0;

		if (EVENT_MODE_SYNC == runmode)
			ret = RunEventScript(script, runmode, nEventType, nEvent, mask, oRunnable, oActor, oActedOn, lActedAt, i, count, defer_time);
		else {
			DelayCommand(defer_time, RunEventScriptAsync(script, runmode, nEventType, nEvent, mask, oRunnable, oActor, oActedOn, lActedAt, i, count, defer_time));
		}
		
		if (ret & EVENT_RESULT_STOP)
			total_ret |= EVENT_RESULT_STOP;
		
		if (ret & EVENT_RESULT_SUPPRESS)
			total_ret |= EVENT_RESULT_SUPPRESS;
		
		if (ret & EVENT_RESULT_FAIL) {
			_WARN("event script " + script + " indicated failure on " + itoa(nEventType) + ":" + itoa(nEvent));
			total_ret |= EVENT_RESULT_FAIL;
		}

		if (ret & EVENT_RESULT_END) {
			total_ret |= EVENT_RESULT_END;
			break;
		}
		// Make sure they get queued in the right order.
		defer_time += 0.01;
	}

	return total_ret;
}


int RehashEventScripts() {
	pQ("select script, eventtype, eventmask, sync, " + 
		"runnable_tagmask, runnable_refmask, " + 
		"actor_tagmask, actor_refmask, actedon_tagmask, actedon_refmask from " +
		"events.events where " +
		"enabled = true order by ordering asc;");

	string script;
	int et, em, sync;
	string r_t, r_f, a_t, a_f, o_t, o_f;

	int i = 0;
	string si;
	while (pF()) {
		si = itoa(i);

		script = pGs(1);
		et = pGi(2);
		em = pGi(3);
		sync = pGb(4);
		r_t = pGs(5); r_f = pGs(6);
		a_t = pGs(7); a_f = pGs(8);
		o_t = pGs(9); o_f = pGs(10);

		SetLocalString(GetModule(), "inc_events_" + si + "_script", script);
		SetLocalInt(GetModule(), "inc_events_" + si + "_eventtype", et);
		SetLocalInt(GetModule(), "inc_events_" + si + "_eventmask", em);
		SetLocalInt(GetModule(), "inc_events_" + si + "_eventsync", sync);
		SetLocalString(GetModule(), "inc_events_" + si + "_r_tagmask", r_t);
		SetLocalString(GetModule(), "inc_events_" + si + "_r_refmask", r_f);
		SetLocalString(GetModule(), "inc_events_" + si + "_a_tagmask", a_t);
		SetLocalString(GetModule(), "inc_events_" + si + "_a_refmask", a_f);
		SetLocalString(GetModule(), "inc_events_" + si + "_o_tagmask", o_t);
		SetLocalString(GetModule(), "inc_events_" + si + "_o_refmask", o_f);

		i++;
	}

	SetLocalInt(GetModule(), "inc_events_last", i);
	return i;
}

void RunEventScriptAsync(string sScript, int nEventMode, int nEventType, int nEvent, int nEventMask, object oRunnable,
		object oActor, object oActedOn, location lActedAt, int nCurPos, int nMaxPos, float fDeferTime) {
	RunEventScript(sScript, nEventMode, nEventType, nEvent, nEventMask, oRunnable, oActor, oActedOn, lActedAt, nCurPos, nMaxPos, fDeferTime);
}

int RunEventScript(string sScript, int nEventMode, int nEventType, int nEvent, int nEventMask, object oRunnable,
		object oActor, object oActedOn, location lActedAt, int nCurPos, int nMaxPos, float fDeferTime) {

	if ( !GetIsObjectValid(oRunnable) ) {
		_WARN("script " + sScript + " tried to run on non-runnable for " + itoa(nEventType) + ":" + itoa(nEvent));
		return EVENT_RESULT_FAIL;
	}

	// Set the state for this script.
	
	// Set rpos, rtotal
	// SetEventRunPos(oRunnable, nCurPos, nMaxPos);
	SetLocalInt(GetModule(), "EVENT_LAST_RPOS_CUR", nCurPos);
	SetLocalInt(GetModule(), "EVENT_LAST_RPOS_MAX", nMaxPos);

	// SetEventMode(oRunnable, nEventMode);
	SetLocalInt(GetModule(), "EVENT_LAST_MODE", nEventMode);
	// SetEventType(oRunnable, nEventType);
	SetLocalInt(GetModule(), "EVENT_LAST_EVENT_TYPE", nEventType);
	// SetEvent(oRunnable, nEvent);
	SetLocalInt(GetModule(), "EVENT_LAST_EVENT", nEvent);
	// SetEventMask(oRunnable, nEventMask);
	SetLocalInt(GetModule(), "EVENT_LAST_MASK", nEventMask);

	SetLocalObject(GetModule(), "EVENT_LAST_ACTOR", oActor);
	SetLocalObject(GetModule(), "EVENT_LAST_ACTEDON", oActedOn);
	SetLocalLocation(GetModule(), "EVENT_LAST_ACTEDAT", lActedAt);

	// SetEventDeferTime(oRunnable, fDeferTime);
	SetLocalFloat(GetModule(), "EVENT_LAST_DEFER", fDeferTime);

	return ExecuteScriptInt(sScript, oRunnable);
}

// Wrapper for Execute Script to execute a script and get an integer
// return value. Do not nest this function!
int ExecuteScriptInt(string sScript, object oTarget) {
	DeleteLocalInt(GetModule(), "EVENT_LAST_RETVAR");
	ExecuteScript(sScript, oTarget);
	int nRet = GetLocalInt(GetModule(), "EVENT_LAST_RETVAR");

	// Immediately after execution, clear the state.
	DeleteLocalInt(GetModule(), "EVENT_LAST_RETVAR");

	DeleteLocalInt(GetModule(), "EVENT_LAST_RPOS_CUR");
	DeleteLocalInt(GetModule(), "EVENT_LAST_RPOS_MAX");

	DeleteLocalInt(GetModule(), "EVENT_LAST_MODE");
	DeleteLocalInt(GetModule(), "EVENT_LAST_MASK");
	DeleteLocalObject(GetModule(), "EVENT_LAST_ACTOR");
	DeleteLocalObject(GetModule(), "EVENT_LAST_ACTEDON");
	DeleteLocalLocation(GetModule(), "EVENT_LAST_ACTEDAT");
	DeleteLocalFloat(GetModule(), "EVENT_LAST_DEFER");
	return nRet;
}

//----------------------------------------------------------------------------
// Helper function for ExecuteScriptAndReturnInt
//----------------------------------------------------------------------------
void SetEventScriptReturnValue(int nValue, string sStatus = "") {
	SetLocalInt(GetModule(), "EVENT_LAST_RETVAR", nValue);
	SetLocalString(GetModule(), "EVENT_LAST_RETVAR", sStatus);
}

struct EventInfo GetEventInfo() {
	struct EventInfo r;
	r.mode = GetLocalInt(GetModule(), "EVENT_LAST_MODE");
	r.type = GetLocalInt(GetModule(), "EVENT_LAST_EVENT_TYPE");
	r.ev = GetLocalInt(GetModule(), "EVENT_LAST_EVENT");
	r.mask = GetLocalInt(GetModule(), "EVENT_LAST_MASK");
	r.runnable = OBJECT_SELF;
	r.actor = GetLocalObject(GetModule(), "EVENT_LAST_ACTOR");
	r.actedon = GetLocalObject(GetModule(), "EVENT_LAST_ACTEDON");
	r.actedat = GetLocalLocation(GetModule(), "EVENT_LAST_ACTEDAT");
	r.defer_time = GetLocalFloat(GetModule(), "EVENT_LAST_DEFER");
	r.r_pos = GetLocalInt(GetModule(), "EVENT_LAST_RPOS_CUR");
	r.r_total = GetLocalInt(GetModule(), "EVENT_LAST_RPOS_MAX");
	return r;
}


struct EventArguments GetEventArguments() {
	struct EventArguments ea;
	ea.a0 = GetLocalString(GetModule(), "EVENT_LAST_ARG_a0");
	ea.a1 = GetLocalString(GetModule(), "EVENT_LAST_ARG_a1");
	ea.a2 = GetLocalString(GetModule(), "EVENT_LAST_ARG_a2");
	ea.i0 = GetLocalInt(GetModule(), "EVENT_LAST_ARG_i0");
	ea.i1 = GetLocalInt(GetModule(), "EVENT_LAST_ARG_i1");
	ea.i2 = GetLocalInt(GetModule(), "EVENT_LAST_ARG_i2");
	ea.f0 = GetLocalFloat(GetModule(), "EVENT_LAST_ARG_f0");
	ea.f1 = GetLocalFloat(GetModule(), "EVENT_LAST_ARG_f1");
	ea.f2 = GetLocalFloat(GetModule(), "EVENT_LAST_ARG_f2");
	ea.o0 = GetLocalObject(GetModule(), "EVENT_LAST_ARG_o0");
	ea.o1 = GetLocalObject(GetModule(), "EVENT_LAST_ARG_o1");
	ea.o2 = GetLocalObject(GetModule(), "EVENT_LAST_ARG_o2");
	ea.l0 = GetLocalLocation(GetModule(), "EVENT_LAST_ARG_l0");
	ea.l1 = GetLocalLocation(GetModule(), "EVENT_LAST_ARG_l1");
	ea.l2 = GetLocalLocation(GetModule(), "EVENT_LAST_ARG_l2");
	return ea;
}

void SetEventArguments(struct EventArguments ea) {
	SetLocalString(GetModule(), "EVENT_LAST_ARG_a0", ea.a0);
	SetLocalString(GetModule(), "EVENT_LAST_ARG_a1", ea.a1);
	SetLocalString(GetModule(), "EVENT_LAST_ARG_a2", ea.a2);
	SetLocalInt(GetModule(), "EVENT_LAST_ARG_i0", ea.i0);
	SetLocalInt(GetModule(), "EVENT_LAST_ARG_i1", ea.i1);
	SetLocalInt(GetModule(), "EVENT_LAST_ARG_i2", ea.i2);
	SetLocalFloat(GetModule(), "EVENT_LAST_ARG_f0", ea.f0);
	SetLocalFloat(GetModule(), "EVENT_LAST_ARG_f1", ea.f1);
	SetLocalFloat(GetModule(), "EVENT_LAST_ARG_f2", ea.f2);
	SetLocalObject(GetModule(), "EVENT_LAST_ARG_o0", ea.o0);
	SetLocalObject(GetModule(), "EVENT_LAST_ARG_o1", ea.o1);
	SetLocalObject(GetModule(), "EVENT_LAST_ARG_o2", ea.o2);
	SetLocalLocation(GetModule(), "EVENT_LAST_ARG_l0", ea.l0);
	SetLocalLocation(GetModule(), "EVENT_LAST_ARG_l1", ea.l1);
	SetLocalLocation(GetModule(), "EVENT_LAST_ARG_l2", ea.l2);
}
