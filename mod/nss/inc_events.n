/*
  File: inc_events.n

  A event system.
  Designed to replace and surpass nw_*_switches.
  Copyright Bernard 'elven' Stoeckner.

  This code is licenced under the
  GNU/GPLv2 General Public Licence.
*/

// Define: EVENT_SQL
// #define this to enable SQL-based event storage (default).
#define EVENT_SQL
// Define: EVENT_INMEM
// #define this to enable nwscript-based event storage.
#undef EVENT_INMEM

#ifdef EVENT_SQL
#include "inc_pgsql.nh"
#endif

/* Note: nwns int overflows at 1 << 31, so 1 << 30 is the highest usable bitmask */

/*
Consts: Script Return Codes
return codes for event scripts

EVENT_EXECUTE_SCRIPT_FAILED     - Script failed to run
EVENT_EXECUTE_SCRIPT_CONTINUE   - Script ran and execution continues
EVENT_EXECUTE_SCRIPT_END        - Script ran and execution of further events stops
EVENT_EXECUTE_SCRIPT_ABORT      - Script ran and requested termination/cancellation of the event

Const: Event Types
EVENT_TYPE_GLOBAL               - Global and misc. events
EVENT_TYPE_PC                   - Player-related events
EVENT_TYPE_ITEM                 - Item events
EVENT_TYPE_CREATURE             - Creature events
EVENT_TYPE_PLACEABLE            - Placeable events
EVENT_TYPE_AREA                 - Area events
EVENT_TYPE_DOOR                 - Door events

Const: Misc Events
EVENT_ANY                       - match any event
EVENT_GLOBAL_MODULE_LOAD        - after all module initialisation is done (actor: n/a)
EVENT_GLOBAL_SPELL              - a spell gets cast

Consts: Item Events
runnable: the item object, actor: creature involved

EVENT_ITEM_ACTIVATE             - Creature activates item (actor: activator)
EVENT_ITEM_EQUIP                - Creature equips item (actor: equipper)
EVENT_ITEM_UNEQUIP              - Creature unequips item (actor: unequipper)
EVENT_ITEM_ONHITCAST            - Item gets hit physically (actor: damager)
EVENT_ITEM_ACQUIRE              - Creature gains item (actor: receiver)
EVENT_ITEM_UNACQUIRE            - Creature loses item (actor: creature losing item)
EVENT_ITEM_SPELLCAST            - Item targeted by a spell (actor: caster)

Consts: Player Events
runnable: the player object

EVENT_PC_LOGIN                  - Player logs in
EVENT_PC_LOGOUT                 - Player logs out
EVENT_PC_LEVELUP                - Player gains a level
EVENT_PC_REST                   - Player rests, also fires EVENT_CREATURE_REST
EVENT_PC_DYING                  - Player is dying, also fires EVENT_CREATURE_DYING
EVENT_PC_DEATH                  - Player died, also fires EVENT_CREATURE_DEATH
EVENT_PC_REPAWN                 - Player respawns
EVENT_PC_CUTSCENE_ABRT          - Cutscene got aborted


Consts: Creature Events
runnable: the creature object

EVENT_CREATURE_ATTACK           - A creature gets attacked
EVENT_CREATURE_DAMAGE           - A creature gets damaged
EVENT_CREATURE_DYING            - A creature is about to die
EVENT_CREATURE_DEATH            - A creature dies (actor: killer)
EVENT_CREATURE_DIALOGUE         - A creature wants to talk
EVENT_CREATURE_DISTURB          - A creature gets disturbed
EVENT_CREATURE_ENDROUND         - A creature ends it round
EVENT_CREATURE_HB               - Creature heartbeat
EVENT_CREATURE_BLOCK            - A creature is blocked and cannot pathfind
EVENT_CREATURE_NOTICE           - ? wot does dis doo.
EVENT_CREATURE_REST             - A creature rests
EVENT_CREATURE_SPAWN            - A creature spawns (actor: module)
EVENT_CREATURE_SPELLCAST        - A creature gets a spell cast at

Consts: Placeable Events
runnable: the placeable, actor: creature

EVENT_PLACEABLE_CLICK           - When a creature clicks on a placeable
EVENT_PLACEABLE_CLOSE           - Container gets closed
EVENT_PLACEABLE_DAMAGE          - Placeable gets damaged
EVENT_PLACEABLE_DEATH           - Placeable gets destroyed
EVENT_PLACEABLE_DISARM          - Placeable gets disarmed
EVENT_PLACEABLE_HB              - Heartbeat (actor: n/a)
EVENT_PLACEABLE_INVDIST         - Container gains item/loses item/item gets stolen out of (actedon: item)
EVENT_PLACEABLE_LOCK            - Placeable gets locked
EVENT_PLACEABLE_MELEEATTACK     - Placeable gets bashed
EVENT_PLACEABLE_OPEN            - Container gets opened
EVENT_PLACEABLE_SPELLCAST       - Placeable gets spell cast at
EVENT_PLACEABLE_TRAPTRIG        - Placeable trap gets triggered
EVENT_PLACEABLE_UNLOCK          - Placeable gets unlocked
EVENT_PLACEABLE_USE             - Placeable gets used

Consts: Area Events
runnable: the area

EVENT_AREA_ENTER                - Creature enters an area (actor: creature)
EVENT_AREA_EXIT                 - Creature leaves an area (actor: creature)
EVENT_AREA_HB                   - Heartbeat for area (actor: n/a)

Consts: Door Events
runnable: the door, actor: creature

EVENT_DOOR_CLICK                - Door gets glicked
EVENT_DOOR_DAMAGE               - Door gets damaged
EVENT_DOOR_DEATH                - Door gets destroyed
EVENT_DOOR_DISARM               - Door (trap) gets disarmed
EVENT_DOOR_HB                   - Door heartbeat
EVENT_DOOR_LOCK                 - Door gets locked
EVENT_DOOR_UNLOCK               - Door gets unlocked
EVENT_DOOR_MELEEATTACK          - Door gets physically attacked
EVENT_DOOR_SPELLCAST            - Door gets spell cast at
EVENT_DOOR_TRAPTRIG             - Door trap gets triggered
EVENT_DOOR_OPEN                 - Creature opens a door
EVENT_DOOR_FAILTOOPEN           - Door fails to open
EVENT_DOOR_CLOSE                - Creature closes a door

*/


const int EVENT_SCRIPT_LENGTH = 16;

const int EVENT_ANY = 0;

const int EVENT_EXECUTE_SCRIPT_CONTINUE = 1 << 0;
const int EVENT_EXECUTE_SCRIPT_FAILED = 1 << 1;
const int EVENT_EXECUTE_SCRIPT_ABORT = 1 << 2;
const int EVENT_EXECUTE_SCRIPT_END = 1 << 3;

const int EVENT_TYPE_GLOBAL = 0;
const int EVENT_TYPE_PC = 1;
const int EVENT_TYPE_ITEM = 2;
const int EVENT_TYPE_CREATURE = 3;
const int EVENT_TYPE_PLACEABLE = 4;
const int EVENT_TYPE_AREA = 5;
const int EVENT_TYPE_DOOR = 6;


/* This was autogenerated with rebuild_events.rb */
const int EVENT_GLOBAL_MODULE_LOAD = 1 << 0;
const int EVENT_GLOBAL_SPELL = 1 << 1;
const int EVENT_ITEM_ACTIVATE = 1 << 0;
const int EVENT_ITEM_EQUIP = 1 << 1;
const int EVENT_ITEM_UNEQUIP = 1 << 2;
const int EVENT_ITEM_ONHITCAST = 1 << 3;
const int EVENT_ITEM_ACQUIRE = 1 << 4;
const int EVENT_ITEM_UNACQUIRE = 1 << 5;
const int EVENT_ITEM_SPELLCAST = 1 << 6;
const int EVENT_PC_LOGIN = 1 << 0;
const int EVENT_PC_LOGOUT = 1 << 1;
const int EVENT_PC_LEVELUP = 1 << 2;
const int EVENT_PC_REST = 1 << 3;
const int EVENT_PC_DYING = 1 << 4;
const int EVENT_PC_DEATH = 1 << 5;
const int EVENT_PC_REPAWN = 1 << 6;
const int EVENT_CREATURE_ATTACK = 1 << 0;
const int EVENT_CREATURE_DAMAGE = 1 << 1;
const int EVENT_CREATURE_DYING = 1 << 2;
const int EVENT_CREATURE_DEATH = 1 << 3;
const int EVENT_CREATURE_DIALOGUE = 1 << 4;
const int EVENT_CREATURE_DISTURB = 1 << 5;
const int EVENT_CREATURE_ENDROUND = 1 << 6;
const int EVENT_CREATURE_HB = 1 << 7;
const int EVENT_CREATURE_BLOCK = 1 << 8;
const int EVENT_CREATURE_NOTICE = 1 << 9;
const int EVENT_CREATURE_REST = 1 << 10;
const int EVENT_CREATURE_SPAWN = 1 << 11;
const int EVENT_CREATURE_SPELLCAST = 1 << 12;
const int EVENT_PLACEABLE_CLICK = 1 << 0;
const int EVENT_PLACEABLE_CLOSE = 1 << 1;
const int EVENT_PLACEABLE_DAMAGE = 1 << 2;
const int EVENT_PLACEABLE_DEATH = 1 << 3;
const int EVENT_PLACEABLE_DISARM = 1 << 4;
const int EVENT_PLACEABLE_HB = 1 << 5;
const int EVENT_PLACEABLE_INVDIST = 1 << 6;
const int EVENT_PLACEABLE_LOCK = 1 << 7;
const int EVENT_PLACEABLE_MELEEATTACK = 1 << 8;
const int EVENT_PLACEABLE_OPEN = 1 << 9;
const int EVENT_PLACEABLE_SPELLCAST = 1 << 10;
const int EVENT_PLACEABLE_TRAPTRIG = 1 << 11;
const int EVENT_PLACEABLE_UNLOCK = 1 << 12;
const int EVENT_PLACEABLE_USE = 1 << 13;
const int EVENT_AREA_ENTER = 1 << 0;
const int EVENT_AREA_EXIT = 1 << 1;
const int EVENT_AREA_HB = 1 << 2;
const int EVENT_DOOR_CLICK = 1 << 0;
const int EVENT_DOOR_DAMAGE = 1 << 1;
const int EVENT_DOOR_DEATH = 1 << 2;
const int EVENT_DOOR_DISARM = 1 << 3;
const int EVENT_DOOR_HB = 1 << 4;
const int EVENT_DOOR_LOCK = 1 << 5;
const int EVENT_DOOR_UNLOCK = 1 << 6;
const int EVENT_DOOR_MELEEATTACK = 1 << 7;
const int EVENT_DOOR_SPELLCAST = 1 << 8;
const int EVENT_DOOR_TRAPTRIG = 1 << 9;
const int EVENT_DOOR_OPEN = 1 << 10;
const int EVENT_DOOR_FAILTOOPEN = 1 << 11;
const int EVENT_DOOR_CLOSE = 1 << 12;

// Struct: Event
//
// Unused, for now.
struct Event {
	int type;
	int ev;
	int mask;
	bool sync;
	bool defer;
	
	object runnable;
	object actor;
	object actedon;
	location actedat;
};


#ifdef EVENT_INMEM
// Function: RegisterEventScript
//
// Registers a script to be included in the global event list.
// Each script registered for this will be called for each event that matches.
// Parameters:
// - sScript - the full script name, without extension
// - nEventType - EVENT_TYPE_*
// - nEventMask - Bitmask of EVENT_(nEventType)_*
// - bRequireSynchronousRun - require this event to be ran before any other events may take place; set to true to enable event aborting.
//   It is recommended NOT to activate this unless really needed.
// - sTagMask - a mask the tag of runnable must match; default is all objects
// - sResRefMask - a mask the resref of runnable must match; default is all objects
void RegisterEventScript(string sScript, int nEventType, int nEventMask, int bRequireSynchronousRun = false, string sTagMask = "**", string sResRefMask = "**");

// Function: UnregisterEventScript
//
// Unregisters all event scripts that match the given criteria NOT IMPLEMENTED.
//
// Clears the list, by default.
// void UnregisterEventScript(string sScript = "", int nEventMask = EVENT_ANY);
#endif

// Function: RunEventScriptsFor
// 
// Runs all scripts that are registered for nEventMask
// Returns:
// - The number of scripts ran
int RunEventScriptsFor(int nEventType, int nEvent, object oRunnable, object oActor, object oActedOn, location lActedAt);

// Function: RunEventScript
//
// Runs the named event script on oRunnable
int RunEventScript(string sScript, int nEventType, int nEvent, int nEventMask, object oRunnable, object oActor, object oActedOn, location lActedAt);

// Function: RunEventScriptAsync
//
// Wrapper around RunEventScript, for delayed execution
void RunEventScriptAsync(string sScript, int nEventType, int nEvent, int nEventMask, object oRunnable, object oActor, object oActedOn, location lActedAt);

// Function: SetEventType
//
// Set the current event type. Used internally.
void SetEventType(object oObject, int nEventType);

// Function: SetEvent
// Sets the current event. Used internally.
void SetEvent(object oObject, int nEvent);

// Function: SetEventMask
// 
// Set the current event. Used internally.
void SetEventMask(object oObject, int nEventMask);

// Function: GetEventType
//
// Gets the EVENT_TYPE_*
int GetEventType();

// Function: GetEvent
// Gets the EVENT_*_*
int GetEvent();

// Function: GetEventMask
// Gets the mask the current script registered for
int GetEventMask();

// Function: ExecuteScriptInt 
// 
// * Execute sScript on oTarget returning an integer.
int ExecuteScriptInt(string sScript, object oTarget);

// Function: SetEventScriptReturnValue 
// 
// Sets the return value for scripts.
//
// Valid values are
// - EVENT_EXECUTE_SCRIPT_CONTINUE - continue calling script after executed script is done
// - EVENT_EXECUTE_SCRIPT_END - end calling script after executed script is done
void SetEventScriptReturnValue(int nValue = EVENT_EXECUTE_SCRIPT_END);

// Function: GetRunnable
//
// Returns the runnable object (usually equal to OBJECT_SELF)
object GetRunnable();

// Function: GetEventActor
//
// Returns the object that caused the event.
// Not necessarily OBJECT_SELF.
object GetEventActor();

// Function: GetEventActedOn
//
// Returns the object Actor worked with.
object GetEventActedOn();

// Function: GetEventActedAt
//
// Returns the location Actor worked at.
location GetEventActedAt();

/*
Section: A demonstration script showing usage

Script file named 'e_test':
: extern("inc_events") // Default include
:
: void main() {
:   int type = GetEventType();
:	int event = GetEvent();
:   object runnable = OBJECT_SELF;
:	object actor = GetEventActor();
:	object actedon = GetEventActedOn();
:
:   if (EVENT_TYPE_AREA == type) {
:	   if (EVENT_AREA_ENTER == event) {
:	       // Player enters area, tell them where they are:
:		    if (GetIsPC(actor))
:			    SendMessageToPC(actor, "You are now in " + GetName(actedon));
:	       // For a reference as to what runnable, actor and actedon are, see the constants
:		    // documentation above
:		}
:   }
:
:   if (EVENT_TYPE_ITEM == type) {
:		if (EVENT_ITEM_ACTIVATE == event) {
:			// Code when an item gets activated.
:			// actor is the creature that did the activating
:	        // actedon is the item
:		    // Do not use GetItemActivator(), GetItemActivated(), and so on, in asynchronous scripts.
:		}
:
:		if (EVENT_ITEM_UNEQUIP == event) {
:			// Destroy all items that players unequip. Yay.
:			DestroyObject(runnable);
:			SendMessageToPC(actor, "<Nelson> Haa haa!");
:		}
:	}
:}

In your module initialisation:
: RegisterEventScript('e_test', EVENT_TYPE_ITEM, EVENT_ITEM_ACTIVATE | EVENT_ITEM_UNEQUIP | EVENT_AREA_ENTER, false);
: RegisterEventScript('e_test', EVENT_TYPE_AREA, EVENT_AREA_ENTER, false);
*/

/* implementation */

#ifdef EVENT_INMEM
void RegisterEventScript(string sScript, int nEventType, int nEventMask, int bRequireSynchronousRun = false, string sTagMask = "", string sResRefMask = "") {
	int last = GetLocalInt(GetModule(), "inc_events_last");
	string slast = IntToString(last);
	
	SetLocalString(GetModule(), "inc_events_" + slast + "_script", sScript);
	SetLocalInt(GetModule(), "inc_events_" + slast + "_eventtype", nEventType);
	SetLocalInt(GetModule(), "inc_events_" + slast + "_eventmask", nEventMask);
	SetLocalInt(GetModule(), "inc_events_" + slast + "_eventsync", bRequireSynchronousRun);
	SetLocalString(GetModule(), "inc_events_" + slast + "_tagmask", sTagMask);
	SetLocalString(GetModule(), "inc_events_" + slast + "_refmask", sResRefMask);

	last++;
	SetLocalInt(GetModule(), "inc_events_last", last);
}

void UnregisterEventScript(string sScript = "", int nEventMask = EVENT_ANY) {
	// Not implemented
}
#endif

#ifdef EVENT_SQL
int RunEventScriptsFor(int nEventType, int nEvent, object oRunnable, object oActor, object oActedOn, location lActedAt) {
	int i;
	pQ("select script, sync, eventmask from events.events where " +
		"enabled = true and " + 
		"(eventtype is null or eventtype = " + pSi(nEventType) + ") and " + 
		"(eventmask is null or eventmask & " + pSi(nEvent) + " = eventmask) and " + 
		"(runnable_tagmask is null or " + pSs(GetTag(oRunnable)) + " like runnable_tagmask) and " +
		"(runnable_refmask is null or " + pSs(GetTag(oRunnable)) + " like runnable_refmask) and " +
		"(actor_tagmask is null or " + pSs(GetTag(oActor)) + " like actor_tagmask) and " +
		"(actor_refmask is null or " + pSs(GetTag(oActor)) + " like actor_refmask) and " +
		"(actedon_tagmask is null or " + pSs(GetTag(oActedOn)) + " like actedon_tagmask) and " +
		"(actedon_refmask is null or " + pSs(GetTag(oActedOn)) + " like actedon_refmask) " +
	"order by ordering desc;");

	string script;
	int sync, mask, ret;
	while (pF()) {
		script = pGs(1);
		sync = pGb(2);
		mask = pGi(3);

		ret = EVENT_EXECUTE_SCRIPT_FAILED;

		if (sync)
			ret = RunEventScript(script, nEventType, nEvent, mask, oRunnable, oActor, oActedOn, lActedAt);
		else
			DelayCommand(0f, RunEventScriptAsync(script, nEventType, nEvent, mask, oRunnable, oActor, oActedOn, lActedAt));
			
		if (EVENT_EXECUTE_SCRIPT_END == ret || EVENT_EXECUTE_SCRIPT_ABORT == ret)
			break;

		i++;
	}
	return i;
}
#endif

#ifdef EVENT_INMEM
int RunEventScriptsFor(int nEventType, int nEvent, object oRunnable, object oActor, object oActedOn, location lActedAt) {
	int count = GetLocalInt(GetModule(), "inc_events_last");
	int i, type, mask, sync, ret;
	string si, script, tag, ref;
	for (i = 0; i < count; i++) {
		si = IntToString(i);
		
		type = GetLocalInt(GetModule(), "inc_events_" + si + "_eventtype");
		if (nEventType != type)
			continue;

		mask = GetLocalInt(GetModule(), "inc_events_" + si + "_eventmask");
		if (mask != EVENT_ANY && nEventMask != mask & nEventMask)
			continue;

		tag = GetLocalString(GetModule(), "inc_events_" + si + "_tagmask");
		if (tag != "" && tag != "**" && !TestStringAgainstPattern(GetStringLowerCase(tag), GetStringLowerCase(GetTag(oRunnable))))
			continue;

		ref = GetLocalString(GetModule(), "inc_events_" + si + "_refmask");
		if (ref != "" && ref != "**" && !TestStringAgainstPattern(GetStringLowerCase(ref), GetStringLowerCase(GetResRef(oRunnable))))
			continue;
		
		script = GetLocalString(GetModule(), "inc_events_" + si + "_script");

		if (script == "")
			continue;

		sync = GetLocalInt(GetModule(), "inc_events_" + si + "_eventsync");
		
		ret = EVENT_EXECUTE_SCRIPT_FAILED;

		if (sync)
			ret = RunEventScript(script, nEventType, nEvent, mask, oRunnable, oActor, oActedOn, lActedAt);
		else
			DelayCommand(0.0, RunEventScriptAsync(script, nEventType, nEvent, mask, oRunnable, oActor, oActedOn, lActedAt));

		if (EVENT_EXECUTE_SCRIPT_END == ret || EVENT_EXECUTE_SCRIPT_ABORT == ret)
			break;
	}
	return i;
}
#endif

void RunEventScriptAsync(string sScript, int nEventType, int nEvent, int nEventMask, object oRunnable, object oActor, object oActedOn, location lActedAt) {
	RunEventScript(sScript, nEventType, nEvent, nEventMask, oRunnable, oActor, oActedOn, lActedAt);
}

int RunEventScript(string sScript, int nEventType, int nEvent, int nEventMask, object oRunnable, object oActor, object oActedOn, location lActedAt) {
	if ( !GetIsObjectValid(oRunnable) )
		return EVENT_EXECUTE_SCRIPT_FAILED;

	SetEventType(oRunnable, nEventType);
	SetEvent(oRunnable, nEvent);
	SetEventMask(oRunnable, nEventMask);
	if ( GetIsObjectValid(oActor) )
		SetLocalObject(GetModule(), "EVENT_LAST_ACTOR", oActor);
	if ( GetIsObjectValid(oActedOn) )
		SetLocalObject(GetModule(), "EVENT_LAST_ACTEDON", oActedOn);
	SetLocalLocation(GetModule(), "EVENT_LAST_ACTEDAT", lActedAt);
	return ExecuteScriptInt(sScript, oRunnable);
}

// Get the current UserDefined Item Event Number
int GetEventType() {
	return GetLocalInt(GetModule(), "EVENT_LAST_EVENT_TYPE");
}

// Set the current UserDefined Event
void SetEventType(object oObject, int nEventType) {
	SetLocalInt(GetModule(), "EVENT_LAST_EVENT_TYPE", nEventType);
}

// Get the current UserDefined Item Event Number
int GetEvent() {
	return GetLocalInt(GetModule(), "EVENT_LAST_EVENT");
}

// Get the current UserDefined Item Event Number
int GetEventMask() {
	return GetLocalInt(GetModule(), "EVENT_LAST_EVENTMASK");
}

// Set the current UserDefined Event
void SetEvent(object oObject, int nEvent) {
	SetLocalInt(GetModule(), "EVENT_LAST_EVENT", nEvent);
}

// Set the current UserDefined Event
void SetEventMask(object oObject, int nEvent) {
	SetLocalInt(GetModule(), "EVENT_LAST_EVENTMASK", nEvent);
}

// Wrapper for Execute Script to execute a script and get an integer
// return value. Do not nest this function!
int ExecuteScriptInt(string sScript, object oTarget) {
	DeleteLocalInt(GetModule(), "EVENT_LAST_RETVAR");
	ExecuteScript(sScript, oTarget);
	int nRet = GetLocalInt(GetModule(), "EVENT_LAST_RETVAR");
	DeleteLocalInt(GetModule(), "EVENT_LAST_RETVAR");
	DeleteLocalObject(GetModule(), "EVENT_LAST_ACTOR");
	DeleteLocalObject(GetModule(), "EVENT_LAST_ACTEDON");
	DeleteLocalLocation(GetModule(), "EVENT_LAST_ACTEDAT");
	return nRet;
}

//----------------------------------------------------------------------------
// Helper function for ExecuteScriptAndReturnInt
//----------------------------------------------------------------------------
void SetEventScriptReturnValue(int nValue = EVENT_EXECUTE_SCRIPT_CONTINUE) {
	SetLocalInt(GetModule(), "EVENT_L_LAST_RETVAR", nValue);
}

object GetRunnable() {
	return OBJECT_SELF;
}
object GetEventActor() {
	return GetLocalObject(GetModule(), "EVENT_LAST_ACTOR");
}
object GetEventActedOn() {
	return GetLocalObject(GetModule(), "EVENT_LAST_ACTEDON");
}
location GetEventActedAt() {
	return GetLocalLocation(GetModule(), "EVENT_LAST_ACTEDAT");
}
