/*
  File: inc_events.n

  A event system.
  Designed to replace and surpass nw_*_switches.
  Copyright Bernard 'elven' Stoeckner.

  This code is licenced under the
  GNU/GPLv2 General Public Licence.
*/
#include "inc_pgsql.nh"

/* Note: nwns int overflows at 1 << 31, so 1 << 30 is the highest usable bitmask */

/*

Section: Events

Each event constant has zero or more of the following modifiers in paren postfixed:
- defer - Event always runs deferred (scripts registered for sync execution will *NOT RUN*), always implies *no abort*
- sync - Event always runs synchronously (scripts registered for deferred execution will be forced to run sync)
- abort - Event can be aborted by returning EVENT_EXECUTE_SCRIPT_ABORT if the script is running sync
- runnable: object - what object the event will run on
- actor: object - what object the actor will be
- actedon: object - what object the actedon will be
- actedat: location - what location actedat will be

sync, abort, defer:
- Event scripts can be run either in *sync* or in *defer* mode.
- sync mode has the advantage of allowing event cancellation, but *will block* (and possibly run against TMI).
- defer mode will be queued for execution after the current script, and *order of events is not guaranteed*.
Also, event-specific native functions that return event-related data are *not guaranteed to be consistent*.
Do NOT use them, use the provided objects (actor, actedon, actedat) by the event system instead. If you
require any other event-related information, use sync mode.
- If possible, choose defer mode for performance and stability.
- Some events are forced to run in sync mode for technical reasons.
- Some events are forced to run in defer mode (since there would be no advantage running them in sync mode, or the overhead would be too great).

Const: Script Return Codes
return codes for event scripts

EVENT_EXECUTE_SCRIPT_FAILED     - Script failed to run
EVENT_EXECUTE_SCRIPT_CONTINUE   - Script ran and execution continues
EVENT_EXECUTE_SCRIPT_END        - Script ran and execution of further events stops
EVENT_EXECUTE_SCRIPT_ABORT      - Script ran and requested termination/cancellation of the event

Const: Event Modes

EVENT_MODE_ANY                  - allow any mode (default)
EVENT_MODE_SYNC                 - sync mode
EVENT_MODE_DEFER                - defer mode

Const: Event Types

EVENT_TYPE_GLOBAL               - Global and misc. events
EVENT_TYPE_PC                   - Player-related events (both DMs and normal players)
EVENT_TYPE_ITEM                 - Item events
EVENT_TYPE_CREATURE             - Creature events
EVENT_TYPE_PLACEABLE            - Placeable events
EVENT_TYPE_AREA                 - Area events
EVENT_TYPE_DOOR                 - Door events

Const: Misc Events

EVENT_ANY                       - match any event that appears (mixed)
EVENT_GLOBAL_MODULE_LOAD        - after all module initialisation is done (defer)
EVENT_GLOBAL_HB                 - global module heartbeat (defer)
EVENT_GLOBAL_SPELL              - a spell gets cast (abort through spellhook)
EVENT_GLOBAL_OBJECT_CREATE      - Any object gets created through CreateObject (sync, abort)
EVENT_GLOBAL_OBJECT_DESTROY     - Any object gets destroyed through DestroyObject (sync, abort)

Consts: Item Events
runnable: the item object, actor: creature involved

EVENT_ITEM_FREEACTIVATE         - Creature activates item as a free action (action: activator, actedon/at: target, sync, abort)
EVENT_ITEM_ACTIVATE             - Creature activates item (actor: activator)
EVENT_ITEM_EQUIP                - Creature equips item (actor: equipper)
EVENT_ITEM_UNEQUIP              - Creature unequips item (actor: unequipper)
EVENT_ITEM_ONHITCAST            - Item gets hit physically (actor: damager)
EVENT_ITEM_ACQUIRE              - Creature gains item (actor: receiver)
EVENT_ITEM_UNACQUIRE            - Creature loses item (actor: creature losing item)
EVENT_ITEM_SPELLCAST            - Item targeted by a spell (actor: caster, abort through spellhook)

Consts: Player Events
runnable: the player object

EVENT_PC_LOGIN                  - Player logs in (defer)
EVENT_PC_LOGOUT                 - Player logs out (defer)
EVENT_PC_LEVELUP                - Player gains a level (defer)
EVENT_PC_REST                   - Player rests, also fires EVENT_CREATURE_REST (abort)
EVENT_PC_DYING                  - Player is dying, also fires EVENT_CREATURE_DYING
EVENT_PC_DEATH                  - Player died, also fires EVENT_CREATURE_DEATH
EVENT_PC_REPAWN                 - Player respawns
EVENT_PC_CUTSCENEABRT           - Cutscene got aborted (defer, no abort)
EVENT_PC_USEFEAT                - Player uses a feat (sync, abort)
EVENT_PC_USESKILL               - Player uses a feat (sync, abort)
EVENT_PC_TOGGLEMODE             - Player toggles one of ACTION_MODE_* (sync, abort)
EVENT_PC_EXAMINE                - Player uses Examine (sync, abort)
EVENT_PC_ATTACK                 - Player attacks something (actor: attacker, actedon: attackee, sync, abort)
EVENT_PC_PICKPOCKET             - Player pickpockets someone (sync, abort)
EVENT_PC_SAVE                   - Player character gets saved
EVENT_PC_QUICKCHAT              - Player uses quickchat

Consts: Creature Events
runnable: the creature object

EVENT_CREATURE_ATTACK           - A creature gets attacked
EVENT_CREATURE_DAMAGE           - A creature gets damaged
EVENT_CREATURE_DYING            - A creature is about to die
EVENT_CREATURE_DEATH            - A creature dies (actor: killer)
EVENT_CREATURE_DIALOGUE         - A creature wants to talk
EVENT_CREATURE_DISTURB          - A creature gets disturbed
EVENT_CREATURE_ENDROUND         - A creature ends it round
EVENT_CREATURE_HB               - Creature heartbeat
EVENT_CREATURE_BLOCK            - A creature is blocked and cannot pathfind
EVENT_CREATURE_NOTICE           - ? wot does dis doo.
EVENT_CREATURE_REST             - A creature rests
EVENT_CREATURE_SPAWN            - A creature spawns (actor: module)
EVENT_CREATURE_SPELLCAST        - A creature gets a spell cast at

Consts: Placeable Events
runnable: the placeable, actor: creature

EVENT_PLACEABLE_CLICK           - When a creature clicks on a placeable
EVENT_PLACEABLE_CLOSE           - Container gets closed
EVENT_PLACEABLE_DAMAGE          - Placeable gets damaged
EVENT_PLACEABLE_DEATH           - Placeable gets destroyed
EVENT_PLACEABLE_DISARM          - Placeable gets disarmed
EVENT_PLACEABLE_HB              - Heartbeat (actor: n/a)
EVENT_PLACEABLE_INVDIST         - Container gains item/loses item/item gets stolen out of (actedon: item)
EVENT_PLACEABLE_LOCK            - Placeable gets locked
EVENT_PLACEABLE_MELEEATTACK     - Placeable gets bashed
EVENT_PLACEABLE_OPEN            - Container gets opened
EVENT_PLACEABLE_SPELLCAST       - Placeable gets spell cast at
EVENT_PLACEABLE_TRAPTRIG        - Placeable trap gets triggered
EVENT_PLACEABLE_UNLOCK          - Placeable gets unlocked
EVENT_PLACEABLE_USE             - Placeable gets used

Consts: Area Events
runnable: the area

EVENT_AREA_ENTER                - Creature enters an area (actor: creature)
EVENT_AREA_EXIT                 - Creature leaves an area (actor: creature)
EVENT_AREA_HB                   - Heartbeat for area (actor: n/a)

Consts: Door Events
runnable: the door, actor: creature

EVENT_DOOR_CLICK                - Door gets glicked
EVENT_DOOR_DAMAGE               - Door gets damaged
EVENT_DOOR_DEATH                - Door gets destroyed
EVENT_DOOR_DISARM               - Door (trap) gets disarmed
EVENT_DOOR_HB                   - Door heartbeat
EVENT_DOOR_LOCK                 - Door gets locked
EVENT_DOOR_UNLOCK               - Door gets unlocked
EVENT_DOOR_MELEEATTACK          - Door gets physically attacked
EVENT_DOOR_SPELLCAST            - Door gets spell cast at
EVENT_DOOR_TRAPTRIG             - Door trap gets triggered
EVENT_DOOR_OPEN                 - Creature opens a door
EVENT_DOOR_FAILTOOPEN           - Door fails to open
EVENT_DOOR_CLOSE                - Creature closes a door

*/


struct EventInfo {
	int mode;
	int type;
	int ev;

	float defer_time;

	int event_mask;

	object runnable;
	object actor;
	object actedon;
	location actedat;
};

const int EVENT_SCRIPT_LENGTH = 16;

const int EVENT_EXECUTE_SCRIPT_CONTINUE = 1 << 0;
const int EVENT_EXECUTE_SCRIPT_FAILED = 1 << 1;
const int EVENT_EXECUTE_SCRIPT_ABORT = 1 << 2;
const int EVENT_EXECUTE_SCRIPT_END = 1 << 3;

const int EVENT_MODE_ANY = 1 << 0;
const int EVENT_MODE_SYNC = 1 << 1;
const int EVENT_MODE_DEFER = 1 << 2;

const int EVENT_TYPE_GLOBAL = 0;
const int EVENT_TYPE_PC = 1;
const int EVENT_TYPE_ITEM = 2;
const int EVENT_TYPE_CREATURE = 3;
const int EVENT_TYPE_PLACEABLE = 4;
const int EVENT_TYPE_AREA = 5;
const int EVENT_TYPE_DOOR = 6;


const int EVENT_ANY = 0;

/* This was autogenerated with rebuild_events.rb */
const int EVENT_GLOBAL_MODULE_LOAD = 1 << 0;
const int EVENT_GLOBAL_HB = 1 << 1;
const int EVENT_GLOBAL_SPELL = 1 << 2;
const int EVENT_GLOBAL_OBJECT_CREATE = 1 << 3;
const int EVENT_GLOBAL_OBJECT_DESTROY = 1 << 4;
const int EVENT_ITEM_FREEACTIVATE = 1 << 0;
const int EVENT_ITEM_ACTIVATE = 1 << 1;
const int EVENT_ITEM_EQUIP = 1 << 2;
const int EVENT_ITEM_UNEQUIP = 1 << 3;
const int EVENT_ITEM_ONHITCAST = 1 << 4;
const int EVENT_ITEM_ACQUIRE = 1 << 5;
const int EVENT_ITEM_UNACQUIRE = 1 << 6;
const int EVENT_ITEM_SPELLCAST = 1 << 7;
const int EVENT_PC_LOGIN = 1 << 0;
const int EVENT_PC_LOGOUT = 1 << 1;
const int EVENT_PC_LEVELUP = 1 << 2;
const int EVENT_PC_REST = 1 << 3;
const int EVENT_PC_DYING = 1 << 4;
const int EVENT_PC_DEATH = 1 << 5;
const int EVENT_PC_REPAWN = 1 << 6;
const int EVENT_PC_CUTSCENEABRT = 1 << 7;
const int EVENT_PC_USEFEAT = 1 << 8;
const int EVENT_PC_USESKILL = 1 << 9;
const int EVENT_PC_TOGGLEMODE = 1 << 10;
const int EVENT_PC_EXAMINE = 1 << 11;
const int EVENT_PC_ATTACK = 1 << 12;
const int EVENT_PC_PICKPOCKET = 1 << 13;
const int EVENT_PC_SAVE = 1 << 14;
const int EVENT_PC_QUICKCHAT = 1 << 15;
const int EVENT_CREATURE_ATTACK = 1 << 0;
const int EVENT_CREATURE_DAMAGE = 1 << 1;
const int EVENT_CREATURE_DYING = 1 << 2;
const int EVENT_CREATURE_DEATH = 1 << 3;
const int EVENT_CREATURE_DIALOGUE = 1 << 4;
const int EVENT_CREATURE_DISTURB = 1 << 5;
const int EVENT_CREATURE_ENDROUND = 1 << 6;
const int EVENT_CREATURE_HB = 1 << 7;
const int EVENT_CREATURE_BLOCK = 1 << 8;
const int EVENT_CREATURE_NOTICE = 1 << 9;
const int EVENT_CREATURE_REST = 1 << 10;
const int EVENT_CREATURE_SPAWN = 1 << 11;
const int EVENT_CREATURE_SPELLCAST = 1 << 12;
const int EVENT_PLACEABLE_CLICK = 1 << 0;
const int EVENT_PLACEABLE_CLOSE = 1 << 1;
const int EVENT_PLACEABLE_DAMAGE = 1 << 2;
const int EVENT_PLACEABLE_DEATH = 1 << 3;
const int EVENT_PLACEABLE_DISARM = 1 << 4;
const int EVENT_PLACEABLE_HB = 1 << 5;
const int EVENT_PLACEABLE_INVDIST = 1 << 6;
const int EVENT_PLACEABLE_LOCK = 1 << 7;
const int EVENT_PLACEABLE_MELEEATTACK = 1 << 8;
const int EVENT_PLACEABLE_OPEN = 1 << 9;
const int EVENT_PLACEABLE_SPELLCAST = 1 << 10;
const int EVENT_PLACEABLE_TRAPTRIG = 1 << 11;
const int EVENT_PLACEABLE_UNLOCK = 1 << 12;
const int EVENT_PLACEABLE_USE = 1 << 13;
const int EVENT_AREA_ENTER = 1 << 0;
const int EVENT_AREA_EXIT = 1 << 1;
const int EVENT_AREA_HB = 1 << 2;
const int EVENT_DOOR_CLICK = 1 << 0;
const int EVENT_DOOR_DAMAGE = 1 << 1;
const int EVENT_DOOR_DEATH = 1 << 2;
const int EVENT_DOOR_DISARM = 1 << 3;
const int EVENT_DOOR_HB = 1 << 4;
const int EVENT_DOOR_LOCK = 1 << 5;
const int EVENT_DOOR_UNLOCK = 1 << 6;
const int EVENT_DOOR_MELEEATTACK = 1 << 7;
const int EVENT_DOOR_SPELLCAST = 1 << 8;
const int EVENT_DOOR_TRAPTRIG = 1 << 9;
const int EVENT_DOOR_OPEN = 1 << 10;
const int EVENT_DOOR_FAILTOOPEN = 1 << 11;
const int EVENT_DOOR_CLOSE = 1 << 12;


// Function: RehashEventScripts
//
// Re-loads event scripts from the database
// 
// Returns the number of script-events loaded.
int RehashEventScripts();

// Function: RunEventScriptsFor
// 
// Runs all scripts that are registered for nEvent
// Returns:
// - EVENT_EXECUTE_SCRIPT_*
int RunEventScriptsFor(int nEventType, int nEvent, object oRunnable, object oActor, object oActedOn, location lActedAt, int bRequireMode = EVENT_MODE_ANY);

// Function: RunEventScript
//
// Runs the named event script on oRunnable
// Returns:
// - EVENT_EXECUTE_SCRIPT_*
int RunEventScript(string sScript, int nEventType, int nEvent, int nEventMask, object oRunnable, object oActor, object oActedOn, location lActedAt);

// Function: RunEventScriptAsync
//
// Wrapper around RunEventScript, for delayed execution
void RunEventScriptAsync(string sScript, int nEventType, int nEvent, int nEventMask, object oRunnable, object oActor, object oActedOn, location lActedAt);

// Function: SetEventType
//
// Set the current event type. Used internally.
void SetEventType(object oObject, int nEventType);

// Function: SetEvent
// Sets the current event. Used internally.
void SetEvent(object oObject, int nEvent);

// Function: SetEventMask
// 
// Set the current event. Used internally.
void SetEventMask(object oObject, int nEventMask);

// Function: GetEventType
//
// Gets the EVENT_TYPE_*
int GetEventType();

// Function: GetEvent
// Gets the EVENT_*_*
int GetEvent();

// Function: GetEventMask
// Gets the mask the current script registered for
int GetEventMask();

// Function: GetEventMode
// Returns EVENT_MODE_*
int GetEventMode();

// Function GetEventInfo
// Returns EventInfo
struct EventInfo getEventInfo();

// Function: SetEventMode
// Sets the current event mode. Used internally.
void SetEventMode(object oObject, int nMode);

// Function: GetEventDeferTime
float GetEventDeferTime();

// Function: SetEventDeferTime
void SetEventDeferTime(object oObject, float fDefer);

// Function: ExecuteScriptInt 
// 
// * Execute sScript on oTarget returning an integer.
int ExecuteScriptInt(string sScript, object oTarget);

// Function: SetEventScriptReturnValue 
// 
// Sets the return value for scripts.
//
// Valid values are
// - EVENT_EXECUTE_SCRIPT_CONTINUE - continue calling script after executed script is done
// - EVENT_EXECUTE_SCRIPT_END - end calling script after executed script is done
void SetEventScriptReturnValue(int nValue = EVENT_EXECUTE_SCRIPT_END);

// Function: GetEventRunnable
//
// Returns the runnable object (usually equal to OBJECT_SELF)
object GetEventRunnable();

// Function: GetEventActor
//
// Returns the object that caused the event.
// Not necessarily OBJECT_SELF.
object GetEventActor();

// Function: GetEventActedOn
//
// Returns the object Actor worked with.
object GetEventActedOn();

// Function: GetEventActedAt
//
// Returns the location Actor worked at.
location GetEventActedAt();

/*
Section: A demonstration script showing usage

Script file named 'e_test':
: extern("inc_events") // Default include
:
: void main() {
:   int type = GetEventType();
:	int event = GetEvent();
:   object runnable = OBJECT_SELF;
:	object actor = GetEventActor();
:	object actedon = GetEventActedOn();
:
:   if (EVENT_TYPE_AREA == type) {
:	   if (EVENT_AREA_ENTER == event) {
:	       // Player enters area, tell them where they are:
:		    if (GetIsPC(actor))
:			    SendMessageToPC(actor, "You are now in " + GetName(actedon));
:	       // For a reference as to what runnable, actor and actedon are, see the constants
:		    // documentation above
:		}
:   }
:
:   if (EVENT_TYPE_ITEM == type) {
:		if (EVENT_ITEM_ACTIVATE == event) {
:			// Code when an item gets activated.
:			// actor is the creature that did the activating
:	        // actedon is the item
:		    // Do not use GetItemActivator(), GetItemActivated(), and so on, in asynchronous scripts.
:		}
:
:		if (EVENT_ITEM_UNEQUIP == event) {
:			// Destroy all items that players unequip. Yay.
:			DestroyObject(runnable);
:			SendMessageToPC(actor, "<Nelson> Haa haa!");
:		}
:	}
:}

In your module initialisation:
: RegisterEventScript('e_test', EVENT_TYPE_ITEM, EVENT_ITEM_ACTIVATE | EVENT_ITEM_UNEQUIP | EVENT_AREA_ENTER, false);
: RegisterEventScript('e_test', EVENT_TYPE_AREA, EVENT_AREA_ENTER, false);
*/

/* implementation */

int RunEventScriptsFor(int nEventType, int nEvent, object oRunnable, object oActor, object oActedOn, location lActedAt, int bRequireMode = EVENT_MODE_ANY) {
	int count = GetLocalInt(GetModule(), "inc_events_last");
	int i, type, mask, sync, ret;
	string si, script, tag, ref;
	float defer_time = 0.0;

	for (i = 0; i < count; i++) {
		si = IntToString(i);
		
		type = GetLocalInt(GetModule(), "inc_events_" + si + "_eventtype");
		if (nEventType != type)
			continue;

		mask = GetLocalInt(GetModule(), "inc_events_" + si + "_eventmask");
		if (mask != EVENT_ANY && nEvent != mask & nEvent)
			continue;


		tag = GetLocalString(GetModule(), "inc_events_" + si + "_r_tagmask");
		if (tag != "" && tag != "**" && !TestStringAgainstPattern(GetStringLowerCase(tag), GetStringLowerCase(GetTag(oRunnable))))
			continue;
		ref = GetLocalString(GetModule(), "inc_events_" + si + "_r_refmask");
		if (ref != "" && ref != "**" && !TestStringAgainstPattern(GetStringLowerCase(ref), GetStringLowerCase(GetResRef(oRunnable))))
			continue;
		tag = GetLocalString(GetModule(), "inc_events_" + si + "_a_tagmask");
		if (tag != "" && tag != "**" && !TestStringAgainstPattern(GetStringLowerCase(tag), GetStringLowerCase(GetTag(oActor))))
			continue;
		ref = GetLocalString(GetModule(), "inc_events_" + si + "_a_refmask");
		if (ref != "" && ref != "**" && !TestStringAgainstPattern(GetStringLowerCase(ref), GetStringLowerCase(GetResRef(oActor))))
			continue;
		
		tag = GetLocalString(GetModule(), "inc_events_" + si + "_o_tagmask");
		if (tag != "" && tag != "**" && !TestStringAgainstPattern(GetStringLowerCase(tag), GetStringLowerCase(GetTag(oActedOn))))
			continue;
		ref = GetLocalString(GetModule(), "inc_events_" + si + "_o_refmask");
		if (ref != "" && ref != "**" && !TestStringAgainstPattern(GetStringLowerCase(ref), GetStringLowerCase(GetResRef(oActedOn))))
			continue;
		
		
		script = GetLocalString(GetModule(), "inc_events_" + si + "_script");

		if (script == "")
			continue;

		sync = GetLocalInt(GetModule(), "inc_events_" + si + "_eventsync");
	
		
		int runmode = EVENT_MODE_ANY;

		if (runmode != bRequireMode)
			runmode = bRequireMode;

		// Script wants sync mode, but we are forced to defer. Skip.
		if (sync && runmode == EVENT_MODE_DEFER)
			continue;

		// Script wants to defer, but we are forced to sync. Continue.
		// if (!sync && rummode == EVENT_MODE_SYNC)
		//	;
		
		// Scripts wants sync mode, and we dont care. Use sync.
		if (sync && runmode == EVENT_MODE_ANY)
			runmode = sync;

		ret = EVENT_EXECUTE_SCRIPT_FAILED;

		SetEventMode(oRunnable, runmode);

		// xxx: untested: delay scripts for later use ..
		//if (defer_time != count / 20f)
		//	defer_time += 0.1;

		if (EVENT_MODE_SYNC == runmode)
			ret = RunEventScript(script, nEventType, nEvent, mask, oRunnable, oActor, oActedOn, lActedAt);
		else {
			SetEventDeferTime(oRunnable, defer_time);
			DelayCommand(defer_time, RunEventScriptAsync(script, nEventType, nEvent, mask, oRunnable, oActor, oActedOn, lActedAt));
		}
		if (EVENT_EXECUTE_SCRIPT_END == ret || EVENT_EXECUTE_SCRIPT_ABORT == ret) 
			return ret;
	}

	return EVENT_EXECUTE_SCRIPT_CONTINUE;
}


int RehashEventScripts() {
	pQ("select script, eventtype, eventmask, sync, " + 
		"runnable_tagmask, runnable_refmask, " + 
		"actor_tagmask, actor_refmask, actedon_tagmask, actedon_refmask from " +
		"events.events where" +
		"enabled = true order by ordering desc;");

	string script;
	int et, em, sync;
	string r_t, r_f, a_t, a_f, o_t, o_f;

	int i = 0;
	string si;
	while (pF()) {
		si = itoa(i);

		script = pGs(1);
		et = pGi(2);
		em = pGi(3);
		sync = pGb(4);
		r_t = pGs(5); r_f = pGs(6);
		a_t = pGs(7); a_f = pGs(8);
		o_t = pGs(9); o_f = pGs(10);

		SetLocalString(GetModule(), "inc_events_" + si + "_script", script);
		SetLocalInt(GetModule(), "inc_events_" + si + "_eventtype", et);
		SetLocalInt(GetModule(), "inc_events_" + si + "_eventmask", em);
		SetLocalInt(GetModule(), "inc_events_" + si + "_eventsync", sync);
		SetLocalString(GetModule(), "inc_events_" + si + "_r_tagmask", r_t);
		SetLocalString(GetModule(), "inc_events_" + si + "_r_refmask", r_f);
		SetLocalString(GetModule(), "inc_events_" + si + "_a_tagmask", a_t);
		SetLocalString(GetModule(), "inc_events_" + si + "_a_refmask", a_f);
		SetLocalString(GetModule(), "inc_events_" + si + "_o_tagmask", o_t);
		SetLocalString(GetModule(), "inc_events_" + si + "_o_refmask", o_f);

		i++;
	}

	SetLocalInt(GetModule(), "inc_events_last", i);
	return i;
}

void RunEventScriptAsync(string sScript, int nEventType, int nEvent, int nEventMask, object oRunnable, object oActor, object oActedOn, location lActedAt) {
	SetEventMode(oRunnable, EVENT_MODE_DEFER);
	RunEventScript(sScript, nEventType, nEvent, nEventMask, oRunnable, oActor, oActedOn, lActedAt);
}

int RunEventScript(string sScript, int nEventType, int nEvent, int nEventMask, object oRunnable, object oActor, object oActedOn, location lActedAt) {
	if ( !GetIsObjectValid(oRunnable) )
		return EVENT_EXECUTE_SCRIPT_FAILED;

	SetEventType(oRunnable, nEventType);
	SetEvent(oRunnable, nEvent);
	SetEventMask(oRunnable, nEventMask);
	if ( GetIsObjectValid(oActor) )
		SetLocalObject(GetModule(), "EVENT_LAST_ACTOR", oActor);
	if ( GetIsObjectValid(oActedOn) )
		SetLocalObject(GetModule(), "EVENT_LAST_ACTEDON", oActedOn);
	SetLocalLocation(GetModule(), "EVENT_LAST_ACTEDAT", lActedAt);
	return ExecuteScriptInt(sScript, oRunnable);
}

// Get the current UserDefined Item Event Number
int GetEventType() {
	return GetLocalInt(GetModule(), "EVENT_LAST_EVENT_TYPE");
}

// Set the current UserDefined Event
void SetEventType(object oObject, int nEventType) {
	SetLocalInt(GetModule(), "EVENT_LAST_EVENT_TYPE", nEventType);
}

// Get the current UserDefined Item Event Number
int GetEvent() {
	return GetLocalInt(GetModule(), "EVENT_LAST_EVENT");
}

// Get the current UserDefined Item Event Number
int GetEventMask() {
	return GetLocalInt(GetModule(), "EVENT_LAST_MASK");
}

// Set the current UserDefined Event
void SetEvent(object oObject, int nEvent) {
	SetLocalInt(GetModule(), "EVENT_LAST_EVENT", nEvent);
}

// Set the current UserDefined Event
void SetEventMask(object oObject, int nEvent) {
	SetLocalInt(GetModule(), "EVENT_LAST_MASK", nEvent);
}

int GetEventMode() {
	return GetLocalInt(GetModule(), "EVENT_LAST_MODE");
}

void SetEventMode(object oObject, int nMode) {
	SetLocalInt(GetModule(), "EVENT_LAST_MODE", nMode);
}


// Wrapper for Execute Script to execute a script and get an integer
// return value. Do not nest this function!
int ExecuteScriptInt(string sScript, object oTarget) {
	DeleteLocalInt(GetModule(), "EVENT_LAST_RETVAR");
	ExecuteScript(sScript, oTarget);
	int nRet = GetLocalInt(GetModule(), "EVENT_LAST_RETVAR");
	DeleteLocalInt(GetModule(), "EVENT_LAST_RETVAR");
	DeleteLocalInt(GetModule(), "EVENT_LAST_MODE");
	DeleteLocalInt(GetModule(), "EVENT_LAST_MASK");
	DeleteLocalObject(GetModule(), "EVENT_LAST_ACTOR");
	DeleteLocalObject(GetModule(), "EVENT_LAST_ACTEDON");
	DeleteLocalLocation(GetModule(), "EVENT_LAST_ACTEDAT");
	DeleteLocalFloat(GetModule(), "EVENT_LAST_DEFER");
	return nRet;
}

//----------------------------------------------------------------------------
// Helper function for ExecuteScriptAndReturnInt
//----------------------------------------------------------------------------
void SetEventScriptReturnValue(int nValue = EVENT_EXECUTE_SCRIPT_CONTINUE) {
	SetLocalInt(GetModule(), "EVENT_L_LAST_RETVAR", nValue);
}

object GetEventRunnable() {
	return OBJECT_SELF;
}
object GetEventActor() {
	return GetLocalObject(GetModule(), "EVENT_LAST_ACTOR");
}
object GetEventActedOn() {
	return GetLocalObject(GetModule(), "EVENT_LAST_ACTEDON");
}
location GetEventActedAt() {
	return GetLocalLocation(GetModule(), "EVENT_LAST_ACTEDAT");
}

float GetEventDeferTime() {
	return GetLocalFloat(GetModule(), "EVENT_LAST_DEFER");
}
void SetEventDeferTime(object oObject, float fDefer){
	SetLocalFloat(GetModule(), "EVENT_LAST_DEFER", fDefer);
}

struct EventInfo getEventInfo() {
	struct EventInfo r;
	r.mode = GetEventMode();
	r.type = GetEventType();
	r.ev = GetEvent();
	r.runnable = GetEventRunnable();
	r.actor = GetEventActor();
	r.actedon = GetEventActedOn();
	r.actedat = GetEventActedAt();
	r.defer_time = GetEventDeferTime();
	return r;
}
