/*
 * File: inc_events.n
 * A tag-execution based event system.
 * Designed to surpass nw_*_switches.
 * Copyright Bernard 'elven' Stoeckner.
 *
 * This code is licenced under the
 *  GNU/GPLv2 General Public Licence.
 */

/*
 * 	Events work as follows:
 * 	Each item activated calls a script named
 * 		"i" + Tag_of_item
 * 	How to handle events inside that script have
 * 	 a look at _events_itemdemo
 * 	Each area calls a script named
 * 		"a" + Tag_of_area
 * 	See _events_areademo for an example on how to
 * 	 handle those.
 */

/* Event const
 *  item events are 1-99
 *  area events are 100-199
 *  [player events are 200-299: not impl.]
 */

extern("inc_log")

// Item gets activated (Use Unique Power)
const int EVENT_ITEM_ACTIVATE = 1;

// Item gets equipped
const int EVENT_ITEM_EQUIP = 2;

// Item gets unequipped
const int EVENT_ITEM_UNEQUIP = 3;

// Item gets hit physically
const int EVENT_ITEM_ONHITCAST = 4;

// Item gets picked up
const int EVENT_ITEM_ACQUIRE = 5;

// Item gets dropped
const int EVENT_ITEM_UNACQUIRE = 6;

// Item catches a spell
const int EVENT_ITEM_SPELLCAST_AT = 7;

const int EVENT_PC_LOGIN = 200;
const int EVENT_PC_LOGOUT = 201;
const int EVENT_PC_LEVELUP = 202;

const int EVENT_NPC_SPAWN = 301;
const int EVENT_NPC_DIE = 302;
const int EVENT_NPC_EQUIP = 303;

// GetEnteringObject() enters the area.
const int EVENT_AREA_ENTER = 100;

// GetExitingObject() leaves the area.
const int EVENT_AREA_EXIT = 101;

const int EVENT_AREA_UDEF = 198;
const int EVENT_AREA_HB = 199;


// Script return values

// Script failed to run.
const int EVENT_EXECUTE_SCRIPT_FAILED = -1;

// Mark the script to continue exection
const int EVENT_EXECUTE_SCRIPT_CONTINUE = 0;

// Mark the script to end execution
const int EVENT_EXECUTE_SCRIPT_END = 1;




/* Prefixes */
const string EVENT_PREFIX_AREA = "a_";
const string EVENT_PREFIX_ITEM = "i_";
const string EVENT_PREFIX_PC = "p_";
const int EVENT_SCRIPT_LENGTH = 16;

// Runs the event script for oObject, sending
// event iEvent along the way.
// Returns the result as one of
//  EVENT_EXECUTE_SCRIPT_CONTINUE
//    - designating the current script to continue
//  EVENT_EXECUTE_SCRIPT_END
//    - designating the current script to end
//
// Function: RunEventScript 
// 
// This functions adheres to global prefix constants,
// and checks for maximum length.
int RunEventScript(object oObject, int iEvent, string sPrefix, string sScript = "", object oActor = OBJECT_INVALID,
				   object oActedOn = OBJECT_INVALID);

// Function: SetEvent 
// 
// Set the active User Defined Event
void SetEvent(object oObject, int nEvent);

// Get the active User Defined Event
int GetEvent();

// Function: ExecuteScriptInt 
// 
// * Execute sScript on oTarget returning an integer.
int ExecuteScriptInt(string sScript, object oTarget);

// Function: SetEventScriptReturnValue 
// 
// * Sets the return value for scripts called via ExecuteScriptAndReturnInt
// * valid values are
// * EVENT_EXECUTE_SCRIPT_CONTINUE - continue calling script after executed scriptis done
// * EVENT_EXECUTE_SCRIPT_END - end calling script after executed script is done
void SetEventScriptReturnValue(int nValue = EVENT_EXECUTE_SCRIPT_END);

// Returns the object that caused the event.
// Not necessarily OBJECT_SELF.
// Returns OBJECT_INVALID when not in event script.
object GetEventActor();

// Returns the object Actor worked with.
// Returns OBJECT_INVALID when not in event script.
object GetEventActedOn();

// Function: RegisterPlayerEventScript 
// 
void RegisterPlayerEventScript(string sName);

// Function: RunPCEventScript 
// 
void RunPCEventScript(object oActor, object oActedOn, int iEvent);

/* implementation */

int RunEventScript(object oObject, int iEvent, string sPrefix, string sScript = "", object oActor = OBJECT_INVALID,
				   object oActedOn = OBJECT_INVALID) {
	if ( !GetIsObjectValid(oObject) )
		return EVENT_EXECUTE_SCRIPT_FAILED;

	string tag;
	if ( sScript != "" ) {
		tag = sScript;
	} else {
		tag = sPrefix + GetStringLowerCase(GetTag(oObject));
		if ( GetStringLength(tag) > EVENT_SCRIPT_LENGTH )
			tag = GetSubString(tag, 0, EVENT_SCRIPT_LENGTH);
	}
	SetEvent(oObject, iEvent);
	if ( GetIsObjectValid(oActor) )
		SetLocalObject(GetModule(), "EVENT_LAST_ACTOR", oActor);
	if ( GetIsObjectValid(oActedOn) )
		SetLocalObject(GetModule(), "EVENT_LAST_ACTEDON", oActedOn);
	return ExecuteScriptInt(tag, oObject);
}


// Get the current UserDefined Item Event Number
int GetEvent() {
	return GetLocalInt(GetModule(), "EVENT_LAST_EVENT");
}

// Set the current UserDefined Event
void SetEvent(object oObject, int nEvent) {
	SetLocalInt(GetModule(), "EVENT_LAST_EVENT", nEvent);
}

// Wrapper for Execute Script to execute a script and get an integer
// return value. Do not nest this function!
int ExecuteScriptInt(string sScript, object oTarget) {
	DeleteLocalInt(GetModule(), "EVENT_LAST_RETVAR");
	ExecuteScript(sScript, oTarget);
	int nRet = GetLocalInt(GetModule(), "EVENT_LAST_RETVAR");
	DeleteLocalInt(GetModule(), "EVENT_LAST_RETVAR");
	DeleteLocalObject(GetModule(), "EVENT_LAST_ACTOR");
	DeleteLocalObject(GetModule(), "EVENT_LAST_ACTEDON");
	return nRet;
}

//----------------------------------------------------------------------------
// Helper function for ExecuteScriptAndReturnInt
//----------------------------------------------------------------------------
void SetEventScriptReturnValue(int nValue = EVENT_EXECUTE_SCRIPT_CONTINUE) {
	SetLocalInt(GetModule(), "EVENT_L_LAST_RETVAR", nValue);
}


object GetEventActor() {
	return GetLocalObject(GetModule(), "EVENT_LAST_ACTOR");
}
object GetEventActedOn() {
	return GetLocalObject(GetModule(), "EVENT_LAST_ACTEDON");
}


void RegisterPlayerEventScript(string sName) {
	string old = GetLocalString(GetModule(), "EVENTS_PC");
	if ( old != "" )
		old += ",";
	SetLocalString(GetModule(), "EVENTS_PC", old + sName);
}


void RunPCEventScript(object oActor, object oActedOn, int iEvent) {
	if ( !GetIsPC(oActor) )
		return;

	SetLocalObject(GetModule(), "EVENT_LAST_ACTOR", oActor);
	SetLocalObject(GetModule(), "EVENT_LAST_ACTEDON", oActedOn);

	string
	sS = GetLocalString(GetModule(), "EVENTS_PC"),
	sE = "";

	int iPos = 0;
	int iSub = 0;
	//    l("Start-sS = " + sS);

	while ( TRUE ) {
		iSub = FindSubString(sS, ",");
		//l("iSub = " + IntToString(iSub));
		//l("iPos = " + IntToString(iPos));
		if ( iSub < 0 )
			break;

		sE = GetSubString(sS, iPos, iSub);
		sS = GetSubString(sS, iSub + 1, 1024);

		//l("sE = " + sE);
		//l("sS = " + sS);
		iPos = iSub;

		if ( sE != "" ) {
			RunEventScript(GetModule(), iEvent, EVENT_PREFIX_PC, EVENT_PREFIX_PC + sE);
		}

		if ( sS == "" ) {
			break;
		}
	}
	if ( sS != "" )
		RunEventScript(GetModule(), iEvent, EVENT_PREFIX_PC, EVENT_PREFIX_PC + sS);
}
