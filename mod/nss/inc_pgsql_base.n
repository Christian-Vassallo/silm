/*
 * Licence header.
 *
 * Readme.
 */

const string PGSQL_NWNX_TOKEN = "ODBC2";

// Run on module start
void pInit();

// Run a query. Returns 1 on success, 0 on error.
int pQuery(string sSQL);

// Returns the last-run query.
string pGetLastQuery();

// Escape and return a string suitable for use in query concatenation
string pEscape(string str);

// Begin transaction
// Read the README accompanying the nwnx_pgsql package before
// considering the use of transactions.
void pBegin();

// Commit transaction
void pCommit();

// Rollback transaction, globally or to a specified savepoint.
void pRollback(string to_savepoint = "");

// Sets a savepoint.
void pSavepoint(string name);

// Returns the last SQL query executed (globally!).
string pGetLastQuery();

// Fetch next row. Returns 1 on success, 0 on no more rows
int pFetch();

// Returns column n in the result set
string pGetStr(int iCol);

// Returns column n in the result set as int
int pGetInt(int n);

// Returns column n in the result set as float
float pGetFloat(int n);

// Returns column n in the result set as boolean (0 or 1)
int pGetBool(int n);

// Return a int formatted for insert or update
string pEscapeInt(int n, int b0isNULL = TRUE);

// Return a string formatted for insert or update
string pEscapeStr(string s, int bEmptyIsNULL = FALSE);

// Return a float formatted for insert or update
string pEscapeFloat(float f, int b0isNULL = FALSE);

// Return a bool formatted for insert or update (0 = false, rest = true)
string pEscapeBool(int b);

// Return a proper typised location string for query insertion.
string pEscapeLocation(location at);

// Return a proper typised vector string for query insertion.
string pEscapeVector(vector v);

// Return a proper typised area string for query insertion.
string pEscapeArea(object oArea);

// Stores object with query. Place %s where the object binary data shall go.
void pSCO(string query, object obj);

// Retrieves object with query. Query has to return exactly one value.
object pRCO(string query, location where, object owner = OBJECT_INVALID);

// Returns the last-inserted id.
int pLastId(string table, string column = "id");

// Returns a nwn-generated serial for the cursor functions.
int pCursorGetNextSerial();

// Declare a cursor.
// Requires an active session.
// Returns a unique cursor identifier for use with pCursorFetch and pCursorClose.
string pDeclare(string query, bool with_hold = false, bool scroll = true, string cursorname = "");

// Close the given cursor.
void pCursorClose(string cursor);

// Fetch ONE item from the given cursor (default: next one).
// There is no need to call pFetch()
int pCursorFetch(string cursor, string cursor_direction = "next");

// Prepare a named query.
int pPrepare(string name, string query);

// Execute a named query with the given parameters.
int pExecute(string name, string p1 = "", string p2 = "", string p3 = "", string p4 = "",
	string p5 = "", string p6 = "", string p7 = "", string p8 = "", string p9 = "");

// set a string for ? replacement and escaping
void ppPrepare(string sQuery);

// Send the properly escaped query
void ppQuery();

// Insert the given value as the next item in your query.
void ppInsert(string value);

// Reset query
void ppReset();

// Internal helper.
string ppGetCurrentQuery();
// Internal helper.
void ppSetCurrentQuery(string sQuery);
// Internal helper.
int ppGetCurrentOffset();
// Internal helper.
string ppInsertIntoQueryAtNextPosition(string sQuery, string sToInsert);


/************************************/
/* Implementation                   */
/************************************/

// Functions for initializing APS and working with result sets

void pInit() {
	int i;
	string sMemory;
	for ( i = 0; i < 8; i++ )  // reserve 8*128 bytes
		sMemory +=
			"................................................................................................................................";
	SetLocalString(GetModule(), "NWNX!" + PGSQL_NWNX_TOKEN + "!SPACER", sMemory);
//	pQ("set search_path = nwserver;");
	pQuery("set client_encoding = 'iso-8859-15';");
}

int pQuery(string sSQL) {
	SetLocalString(GetModule(), "psql_last_query", sSQL);
	SetLocalString(GetModule(), "NWNX!" + PGSQL_NWNX_TOKEN + "!EXEC", sSQL);
	int ret = StringToInt(GetLocalString(GetModule(), "NWNX!" + PGSQL_NWNX_TOKEN + "!EXEC"));
	/*if (!ret)
		_ERROR("Error in SQL query: " + sSQL);*/
	return ret;
}

string pGetLastQuery() {
	return GetLocalString(GetModule(), "psql_last_query");
}

int pFetch() {
	string sRow;
	object oModule = GetModule();

	SetLocalString(oModule, "NWNX!" + PGSQL_NWNX_TOKEN + "!FETCH", GetLocalString(oModule, "NWNX!" + PGSQL_NWNX_TOKEN + "!SPACER"));
	sRow = GetLocalString(oModule, "NWNX!" + PGSQL_NWNX_TOKEN + "!FETCH");
	if ( GetStringLength(sRow) > 0 ) {
		SetLocalString(oModule, "NWNX_PGSQL_CurrentRow", sRow);
		return TRUE;
	} else {
		SetLocalString(oModule, "NWNX_PGSQL_CurrentRow", "");
		return FALSE;
	}
}


void pSCO(string query, object obj) {
	SetLocalString(GetModule(), "NWNX!" + PGSQL_NWNX_TOKEN + "!SETSCORCOSQL", query);
	StoreCampaignObject("NWNX", "-", obj);
}

object pRCO(string query, location where, object owner = OBJECT_INVALID) {
	SetLocalString(GetModule(), "NWNX!" + PGSQL_NWNX_TOKEN + "!SETSCORCOSQL", query);
	return RetrieveCampaignObject("NWNX", "-", where, owner);
}


void pBegin() {
	slv_i(MODULE, "psql_transaction", 1);
	pQuery("BEGIN;");
}

void pCommit() {
	pQuery("COMMIT;");
	slv_i(MODULE, "psql_transaction", 0);
}

void pRollback(string to_savepoint = "") {
	if (to_savepoint == "")
		pQuery("ROLLBACK;");
	else
		pQuery("ROLLBACK to savepoint " + to_savepoint + ";");

}

void pSavepoint(string name) {
	pQuery("SAVEPOINT " + name);
}


string pGetStr(int iCol) {
	int iPos;
	string sResultSet = GetLocalString(GetModule(), "NWNX_PGSQL_CurrentRow");

	// find column in current row
	int iCount = 0;
	string sColValue = "";

	iPos = FindSubString(sResultSet, "¬");
	if ( ( iPos == -1 ) && ( iCol == 1 ) ) {
		// only one column, return value immediately
		sColValue = sResultSet;
	} else if ( iPos == -1 ) {
		// only one column but requested column > 1
		sColValue = "";
	} else {
		// loop through columns until found
		while ( iCount != iCol ) {
			iCount++;
			if ( iCount == iCol )
				sColValue = GetStringLeft(sResultSet, iPos);
			else {
				sResultSet = GetStringRight(sResultSet, GetStringLength(sResultSet) - iPos - 1);
				iPos = FindSubString(sResultSet, "¬");
			}

			// special case: last column in row
			if ( iPos == -1 )
				iPos = GetStringLength(sResultSet);
		}
	}

	return sColValue;
}
float pGetFloat(int n) {
	return StringToFloat(pGetStr(n));
}
int pGetInt(int n) {
	return StringToInt(pGetStr(n));
}
int pGetBool(int n) {
	return pGetStr(n) == "t";
}




string pEscape(string str) {
	if ( -1 == FindSubString(str, "'") && -1 == FindSubString(str, "\\") )
		return "E'" + str + "'";

	int i = 0; 
	string c = "", new = "'";
	for ( i = 0; i < GetStringLength(str); i++ ) {
		c = GetSubString(str, i, 1);

		if ( c == "'" ) {
			new += "'||chr(39)||'";
		} else if (c == "\\") {
			new += "'||chr(92)||'";
		} else
			new += c;
	}
	new += "'";
	return "E" + new;
}
string pEscapeInt(int n, int b0isNULL = TRUE) {
	return b0isNULL && 0 == n ? "NULL" : IntToString(n);
}

string pEscapeStr(string s, int bEmptyIsNULL = FALSE) {
	return bEmptyIsNULL && "" == s ? "NULL" : pEscape(s);
}

string pEscapeFloat(float f, int b0isNULL = FALSE) {
	return b0isNULL && 0.0 == f ? "NULL" : FloatToString(f);
}

string pEscapeBool(int b) {
	return 0 == b ? "'f'" : "'t'";
}

string pEscapeVector(vector v) {
	return "(" + pEscapeFloat(v.x, 0) + "," + pEscapeFloat(v.y, 0) + "," + pEscapeFloat(v.z, 0) + ")";
}

string pEscapeArea(object oArea) {
	return "(" + pEscapeStr(GetTag(oArea)) + "," + pEscapeStr(GetResRef(oArea)) + ")";
}

string pEscapeLocation(location at) {
	vector v = GetPositionFromLocation(at);
	object a = GetAreaFromLocation(at);
	float f = GetFacingFromLocation(at);
	return "(" + pEscapeArea(a) + "," + pEscapeVector(v) + "," + pEscapeFloat(f, 0) + ")";
}


int pLastId(string table, string column = "id") {
	pQuery("select currval(pg_get_serial_sequence('" + table + "','" + column + "'));");
	if (!pFetch())
		return 0;
	else
		return pGetInt(1);
}



int pCursorGetNextSerial() {
	int last = GetLocalInt(GetModule(), "psql_cursor_serial");
	last++;
	SetLocalInt(GetModule(), "psql_cursor_serial", last);
	return last;
}


string pDeclare(string query, bool with_hold = false, bool scroll = true, string cursorname = "") {
	if ("" == cursorname)
		cursorname = "ps_" + IntToString(pCursorGetNextSerial());

	pQuery("declare " + cursorname + " " + 
			(scroll ? "scroll" : "no scroll") + " " +
		"cursor " +
			(with_hold ? "with hold" : "without hold") + " " +
		"for " + query);
	
	return cursorname;
}

// Close the given cursor
void pCursorClose(string cursor) {
	pQuery("close " + cursor);
}

// Fetch the given cursor
int pCursorFetch(string cursor, string cursor_direction = "next") {
	pQuery("fetch " + cursor_direction + " from " + cursor);
	return pFetch();
}



int pPrepare(string name, string query) {
	return pQuery("prepare " + name + " as " + query);
}

int pExecute(string name, string p1 = "", string p2 = "", string p3 = "", string p4 = "",
	string p5 = "", string p6 = "", string p7 = "", string p8 = "", string p9 = "") {

	string qstr = "";
	if (p1 != "") qstr += p1 + ",";
	if (p2 != "") qstr += p2 + ",";
	if (p3 != "") qstr += p3 + ",";
	if (p4 != "") qstr += p4 + ",";
	if (p5 != "") qstr += p5 + ",";
	if (p6 != "") qstr += p6 + ",";
	if (p7 != "") qstr += p7 + ",";
	if (p8 != "") qstr += p8 + ",";
	if (p9 != "") qstr += p9 + ",";
	if (qstr != "")
		qstr = GetSubString(qstr, 0, GetStringLength(qstr) - 1);

	return pQuery("execute " + name + "(" + qstr + ")");
}





string ppGetCurrentQuery() {
	return GetLocalString(GetModule(), "pp_cur_q");
}

void ppSetCurrentQuery(string sQuery) {
	SetLocalString(GetModule(), "pp_cur_q", sQuery);
}


string ppInsertIntoQueryAtNextPosition(string sQuery, string sToInsert) {
	int nOffset = GetLocalInt(GetModule(), "pp_cur_q_offset");
	
	string sPostOffset = GetSubString(sQuery, nOffset, 4096);
	int nQPos = FindSubString(sPostOffset, "?");

	if (-1 == nQPos) {
		_WARN("Too few ? for query parameters.");
		_WARN("Query: " + sQuery + ", ToInsert: " + sToInsert);
		return sQuery;
	}

	nQPos += nOffset;

	string sPre = GetSubString(sQuery, 0, nQPos);
	string sPost = GetSubString(sQuery, nQPos + 1, 4096);

	SetLocalInt(GetModule(), "pp_cur_q_offset", nOffset + 1 + GetStringLength(sToInsert));
	return sPre + sToInsert + sPost;
}

void ppReset() {
	SetLocalInt(GetModule(), "pp_cur_q_offset", 0);
	SetLocalString(GetModule(), "pp_cur_q", "");
}

void ppPrepare(string sQuery) {
	SetLocalInt(GetModule(), "pp_cur_q_offset", 0);
	SetLocalString(GetModule(), "pp_cur_q", sQuery);
}

void ppQuery() {
	string q = ppGetCurrentQuery();
	if (-1 != FindSubString(q, "?")) {
		_WARN("? in query left.");
		_WARN("Query: " + q);
	}

	pQuery(q);
}

void ppInsert(string value) {
	string q = ppGetCurrentQuery();
	q = ppInsertIntoQueryAtNextPosition(q, value);
	ppSetCurrentQuery(q);
}
