extern("inc_nwnx_func")
extern("inc_cdb")

#define SCORCO_SCHEMA "objects"
#define SCORCO_TABLE_PREFIX ""
#define SCORCO_TABLE_POSTFIX ""

#define normalize_table(table) (SCORCO_SCHEMA + "." + SCORCO_TABLE_PREFIX + table + SCORCO_TABLE_POSTFIX)

// Function: p_id 
// 
// Returns this objects' id if it is persistent,
// false otherwise.
int p_id(object o);

// Function: p_normalize_table
// Used internally.
string p_normalize_table(string table);


// Function: p_set_p_id 
// Sets the objects persist-id.
int p_set_p_id(object o, int id);
// Function: p_get_p_id 
// Returns the objects persist-id.
int p_get_p_id(object o);

// Function: p_load 
// 
// load the specified ID at a location.
// Returns the object loaded, or O_I.
object p_load(int id, location at, object owner = OBJECT_INVALID);

// Function: p_save 
// 
// Saves the specified object to the specified table. Does not save metadata.
int p_save(string table, object o, string additional_updates = "");

// Function: p_delete 
// 
// Deletes the referenced object.
int p_delete(string table, object o);

// Function: p_destroy 
// 
// Deletes the referenced object and destroys the in-game instance.
bool p_destroy(string table, object o);

// Function: p_delayed_rco_finalizer
// 
// Sets p_id or warns if RCO did fail.
void p_delayed_rco_finalizer(int p_id, object o);

// Function: p_load_to_location_metadata 
// 
// Loads all objects stored in table matching conditions to
// the stored location metadata.
int p_load_to_location_metadata(string table, string conditions);

// Function: p_load_to_location_metadata_void 
// 
// Wrapper for *_chunks.
void p_load_to_location_metadata_void(string table, string conditions);

// Function: p_load_to_location_metadata_in_chunks 
// 
int p_load_to_location_metadata_in_chunks(string table, string conditions, int chunksize = 100);

// Function: p_load_to_location_metadata_in_chunks_for_area 
// 
int p_load_to_location_metadata_in_chunks_for_area(string table, object area, int chunksize = 100);

// Function: p_load_to_inventory 
// 
// Loads all objects stored in table matching conditions to
// the inventory of the given object.
int p_load_to_inventory(string table, string conditions, object inventory);

// Function: p_canpersist 
// 
// Returns true if this object can be persisted. This is only
// considering the technical aspects, it does not have to make
// sense.
bool p_canpersist(object o);

string p_normalize_table(string table) {
	return normalize_table(table);
}

int p_set_p_id(object o, int id) {
	string ident = ObjectToString(o);
	SetLocalInt(GetModule(), "p_id_" + ident, id);
	SetLocalInt(o, "p_id", id);
	return id;
}

int p_get_p_id(object o) {
	int id = GetLocalInt(o, "p_id");
	if (!id)
		id = GetLocalInt(GetModule(), "p_id_" + ObjectToString(o));
	return id;
}


bool p_canpersist(object o) {
	return  !GetLocalInt(o, "do_not_persist") && (
		GetIsPC(o) || GetIsDM(o) ||
		GetObjectType(o) == OBJECT_TYPE_ITEM || (
			GetObjectType(o) == OBJECT_TYPE_CREATURE && (
				"x2_def_ondeath" == GetCreatureEventHandler(o, CREATURE_EVENT_DEATH) ||
				"nw_c2_default7" == GetCreatureEventHandler(o, CREATURE_EVENT_DEATH)
			)
		)
	);
}

int p_id(object o) {
	return p_get_p_id(o); // lv_i(o, "p_id");
}

object p_load(int id, location at, object owner = OBJECT_INVALID) {
	object o = pRCO("select data from " + normalize_table("objects") + " where id = " + pSi(id), at, owner);
	p_set_p_id(o, id);
	return o;
}

int p_save(string table, object o, string additional_updates = "") {
	int id = p_id(o);
	location at = GetLocation(o);
	if (!id) {
		pSCO("insert into " + normalize_table(table) + " (at,data) values(" + pEscapeLocation(at) + ", %s);", o);
		id = pLastId(SCORCO_SCHEMA + ".objects", "id");

		if (!id) {
			_FATAL("Cannot retrieve newly-persisted ID for object " + otoa(o) + " to table " + normalize_table(table) + ". INVESTIGATE.");
		} else {
			if ("" != additional_updates)
				pQuery("update " + normalize_table(table) + " set " + additional_updates + " where id = " + pSi(id));
		}

		p_set_p_id(o, id);

	} else {
		string q;
		if ("" != additional_updates) 
			q = "update " + normalize_table(table) + " set data = %s, " + additional_updates + " where id = " + pSi(id) + ";";
		else
			q = "update " + normalize_table(table) + " set data = %s where id = " + pSi(id) + ";";

		pSCO(q, o);
	}
	return id;
}


bool p_delete(string table, object o) {
	if (!p_id(o)) {
		_FATAL("cannot p_delete " + otoa(o) + ", not persistent");
		return 0;
	}
	
	// Workaround: we cannot use DELETE ONLY, because nwnx_odmbc does not support
	// proper DELETE RETURNING statement parsing.
	pQ("select id from " + normalize_table(table) + " where id = " + pSi(p_id(o)) + ";");
	if (pF()) {
		pQ("delete from " + normalize_table(table) + " where id = " + pSi(p_id(o)) + ";");
		p_set_p_id(o, 0);
	}
	return 1;
}

bool p_destroy(string table, object o) {
	if (!p_delete(table, o)) {
		_WARN("cannot p_delete " + otoa(o) + ", destroying anyways (hehe).");
	}

	DestroyObject(o);
	return 1;
}



void p_delayed_rco_finalizer(int p_id, object o) {
	if (!p_get_p_id(o)) {
		_WARN("Tried to load a object which did not instanciate: " + pSi(p_id));
	}
}

int p_load_to_location_metadata(string table, string conditions) {
    vector p;
	object area;
	object o;
	int id;
	int total = 0;
    
	pQ("select id, ((at).position).x, ((at).position).y, ((at).position).z, (at).facing, ((at).area).tag from " + normalize_table("objects") + " where " + conditions);
    while (pF()) {
        id = pGi(1);
        p = Vector(pGf(2), pGf(3), pGf(4));
        area = GetObjectByTag(pGs(6));
        if (!GetIsObjectValid(area)) {
            _WARN("trying to create object in non-existing area " + pGs(6));
			continue;
        }

        location where = Location(area, p, pGf(5));
        
		o = pRCO("select data from " + normalize_table(table) + " where id = " + pSi(id) + ";", where);
		DelayCommand(1.0, p_delayed_rco_finalizer(id, o));
		p_set_p_id(o, id);

        total += 1;
    }

    return total;
}

void p_load_to_location_metadata_void(string table, string conditions) {
	p_load_to_location_metadata(table, conditions);
}

int p_load_to_location_metadata_in_chunks(string table, string conditions, int chunksize = 100) {
	pQ("select count(id) from " + normalize_table(table) + " where " + conditions);
	pF();
	
	conditions += " order by id desc";
	int count = pGi(1);
	int iter = 0;
	while (count > 0) {
		DelayCommand(1.0 * iter, 
			p_load_to_location_metadata_void(table, conditions + " offset " + itoa(iter * chunksize) + " limit " + itoa(chunksize))
		);
		iter++;
		count -= chunksize;
	}

	return count;
}


int p_load_to_location_metadata_in_chunks_for_area(string table, object area, int chunksize = 100) {
	return p_load_to_location_metadata_in_chunks(table, "((at).area).tag = " + pSs(GetTag(area)), chunksize);
}


int p_load_to_inventory(string table, string conditions, object inventory) {
	object o;
	int id;
	int total = 0;
    
	pQ("select id  from " + normalize_table(table) + " where " + conditions);
    while (pF()) {
        id = pGi(1);
        
		o = pRCO("select data from " + normalize_table(table) + " where id = " + pSi(id) + ";", GetLocation(inventory), inventory);

		if (!GetIsObjectValid(o)) {
			_WARN("Tried to load a object which did not instanciate: " + pSi(id));
		}
		p_set_p_id(o, id);

        total += 1;
    }

    return total;
}
