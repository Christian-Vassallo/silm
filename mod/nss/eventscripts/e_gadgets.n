extern("_gen")
extern("inc_events")
extern("inc_dbplac")


string get_random_feather();
string get_random_bird();
string get_random_tree();

void main()
{
	struct EventInfo e = GetEventInfo();

	if (e.ev != "item_activate")
		return;

	object oPC = e.actor;
	object oA = GetArea(oPC);
	string tag = GetTag(e.runnable);

	if ("thermometer" == tag) {

		// -1      = bloody freezin cold. quicksilver freezes.
		// 0 = 0/4
		// 1 = 1/4 = fruehling, dungeons.  5-10 grad
		// 2 = 2/4
		// 3 = 3/4
		// 4 = 4/4 = summer = hot, hotter, hottest
		// 5       = glass bursts.

		int nFill = -2;

		// Fruehling: 3 - 4
		// Sommer: 5 - 8
		// Herbst: 9 - 10
		// Winter: 11 - 2


		switch (GetCalendarMonth()) {

		// spaeter Fruehling
		case 3:
		case 4:
			nFill = 2;
			break;

		// Sommer
		case 5:
		case 6:
		case 7:
		case 8:
			nFill = 4;
			break;

		case 9:
		case 10:
			nFill = 2;
			break;

		case 11:
			nFill = 1;
			break;

		case 12:
		case 1:
		case 2:
			nFill = 0;
			break;

		}


		if (GetTilesetResRef(oA) == TILESET_RESREF_DESERT) {
			if (GetIsDay())
				nFill = 4;

			else
				nFill = 0;

		} else if (GetTilesetResRef(oA) == TILESET_RESREF_FROZEN_WASTES) {
			nFill = -1;

		} else if (GetTilesetResRef(oA) == TILESET_RESREF_DUNGEON) {
			nFill = 1;
		}


		if (GetIsAreaInterior(oA))
			nFill = 2;

		if (GetIsNight() && nFill >= 1)
			nFill -= 1;

		string sText = "";
		// -1      = bloody freezin cold. stuff freezes.
		// 0 = 0/4
		// 1 = 1/4 = fruehling, dungeons.  5-10 grad
		// 2 = 2/4
		// 3 = 3/4
		// 4 = 4/4 = summer = hot, hotter, hottest
		// 5       = glass bursts.

		switch (nFill) {
		case - 1:
			sText =
				"Die Temperaturkugel ist mit kratzigem, frostigem Eis ueberzogen.  Die darin enthaltene Fluessigkeit ist gefroren.";
			break;

		case 0:
			sText =
				"Die Temperaturkugel ist eiskalt zu eurer Beruehrung.  Die Fluessigkeit schwappt zaeh am Boden herum.";
			break;

		case 1:
			sText =
				"Die Fluessigkeit fuellt in etwa ein Viertel der Kugel.  Sie fuehlt sich kuehl an, und euch froestelt leicht.";
			break;

		case 2:
			sText =
				"Die Temperaturkugel sieht sehr unentschlossen aus.  Ist es nun warm, oder nicht?  Ungefaehr die Haelfte des Glases ist gefuellt.";
			break;

		case 3:
			sText = "Die Fluessigkeit fuellt in etwa drei Viertel der Glaskugel.  Sie ist handwarm.";
			break;

		case 4:
			sText =
				"Die Kugel ist gesamt mit der silbernen Fluessigkeit gefuellt, und das Glas ist sehr, sehr warm.";
			break;

		case 5:
			sText =
				"Die Temperaturkugel ist kaum anzufassen, so heiss ist sie.  Die Fluessigkeit glaenzt und schillert in fast selbstbewusster Aktivitaet; sie fuellt die ganze Kugel.";
			break;

		default:
			sText =
				"Die Temperaturkugel zeigt keinen lesbaren Stand.  Wenn ihr genau hinseht, so entdeckt ihr ein kleines, grinsendes Gesicht in der silbernen Masse.";
			break;
		}

		FloatingTextStringOnCreature("Ihr rubbelt an der Temperaturkugel ..", oPC, FALSE);
		DelayCommand(2.0f, FloatingTextStringOnCreature(sText, oPC, FALSE));
	}


	if ("feathertok" == tag) {

		object item = e.runnable;
		object player = e.actor;
		location where = e.actedat;

		string resref = GetResRef(item);
		string ref;

		if ("feathertok_bag" == resref || "feathertok_bagi" /* infinite uses/day version */ == resref) {
			ref = get_random_feather();
			object feather = CreateItemOnObject("feathertok_" + ref, player);
			SetPlotFlag(feather, true);
			FloatingTextStringOnCreature("Ihr zieht eine Feder aus dem Beutel.", player, false);
			return;

		} else if ("feathertok_tree" == resref) {
			FloatingTextStringOnCreature("Ihr werft die Feder ..", player, false);
			ref = get_random_tree();

			ApplyEffectAtLocation(DURATION_TYPE_INSTANT, EffectVisualEffect(VFX_IMP_CHARM), where);
			ApplyEffectAtLocation(DURATION_TYPE_INSTANT, EffectVisualEffect(VFX_FNF_NATURES_BALANCE), where);
			object tree = CreateObject(OBJECT_TYPE_PLACEABLE, ref, where);
			FloatingTextStringOnCreature("Ein Baum schiesst, laut raschelnd, aus dem Boden heraus, dort wo die Feder landete.",
										 player, true);

		} else if ("feathertok_bird" == resref) {
			FloatingTextStringOnCreature("Ihr werft die Feder ..", player, false);
			ref = get_random_bird();

			object bird = CreateObject(OBJECT_TYPE_CREATURE, ref, where);
			ApplyEffectAtLocation(DURATION_TYPE_INSTANT, EffectVisualEffect(VFX_IMP_CHARM), where);
			ApplyEffectAtLocation(DURATION_TYPE_INSTANT, EffectVisualEffect(VFX_FNF_NATURES_BALANCE), where);

			FloatingTextStringOnCreature("Ein Vogel implodiert aus der Feder heraus; er sieht sich skeptisch um, und fliegt hinfort.",
										 player, true);

			AssignCommand(bird, ActionRandomWalk());
			// SetCommandable(false, bird);

		} else if ("feathertok_flwr" == resref) {
			FloatingTextStringOnCreature("Ihr werft die Feder ..", player, false);

			ApplyEffectAtLocation(DURATION_TYPE_INSTANT, EffectVisualEffect(VFX_IMP_CHARM), where);
			ApplyEffectAtLocation(DURATION_TYPE_INSTANT, EffectVisualEffect(VFX_FNF_NATURES_BALANCE), where);

			int i;

			// Create some flowers.
			for (i = 0; i < 2; i++) {
				string s = itoa(Random(13) + 1);

				while (strlen(s) < 3)
					s = "0" + s;

				CreateObject(OBJECT_TYPE_PLACEABLE, "wildflowers" + s, where);
			}

			CreateObject(OBJECT_TYPE_PLACEABLE, "verschiedenes112", where);


		} else {
			ToPC("Unknown resref. Not doing anything.");
			return;
		}


		if (GetItemStackSize(item) > 1)
			SetItemStackSize(item, GetItemStackSize(item) - 1);

		else
			DestroyObject(item);
	}

}


string get_random_feather()
{
	switch (Random(4)) {
	case 0:
		return "bird";

	case 1:
		return "tree";

	case 2:
		return "flwr";

	case 3:
		return "tree";
	}

	return "";
}

string get_random_bird()
{
	switch (Random(4)) {
	case 0:
		return "falke";

	case 1:
		return "adler";

	case 2:
		return "rabe";

	case 3:
		return "eule";
	}

	return "";
}

string get_random_tree()
{
	switch (Random(8)) {
	case 0:
		return "parksundnatur144";

	case 1:
		return "parksundnatur167";

	case 2:
		return "x0_treepine2";

	case 3:
		return "parksundnatur150";

	case 4:
		return "parksundnatur151";

	case 5:
		return "parksundnatur152";

	case 6:
		return "parksundnatur153";

	case 7:
		return "parksundnatur155";
	}

	return "";
}
