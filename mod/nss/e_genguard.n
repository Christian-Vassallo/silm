// settings on doors:
// genguard_active #int 0/1
// genguard_guard_tag #string tag of guard
// genguard_reject_helmets #int 0/1
// genguard_reject_weapons #int 0/1
// genguard_denysr_x #int where X is a subrace identifier 0/1
//
// settings can be grouped on MODULE: genguard_X_*, with lvar
//  on door genguard_type = X
extern("x0_i0_position")

#define GENGUARD_MAX_DISTANCE_TO_ACTOR 10f

bool is_weapon(object item) {
	if (!is_valid(item))
		return false;
	int b = GetBaseItemType(item);
	return
		BASE_ITEM_BASTARDSWORD == b ||
		BASE_ITEM_BATTLEAXE == b ||
		BASE_ITEM_CLUB == b ||
		BASE_ITEM_DAGGER == b ||
		BASE_ITEM_DIREMACE == b ||
		BASE_ITEM_DOUBLEAXE == b ||
		BASE_ITEM_DWARVENWARAXE == b ||
		BASE_ITEM_GREATAXE == b ||
		BASE_ITEM_GREATSWORD == b ||
		BASE_ITEM_HALBERD == b ||
		BASE_ITEM_HANDAXE == b ||
		BASE_ITEM_HEAVYCROSSBOW == b ||
		BASE_ITEM_HEAVYFLAIL == b ||
		BASE_ITEM_KAMA == b ||
		BASE_ITEM_KATANA == b ||
		BASE_ITEM_KUKRI == b ||
		BASE_ITEM_LIGHTCROSSBOW == b ||
		BASE_ITEM_LIGHTFLAIL == b ||
		BASE_ITEM_LIGHTHAMMER == b ||
		BASE_ITEM_LIGHTMACE == b ||
		BASE_ITEM_LONGBOW == b ||
		BASE_ITEM_LONGSWORD == b ||
		BASE_ITEM_MORNINGSTAR == b ||
		BASE_ITEM_RAPIER == b ||
		BASE_ITEM_SCIMITAR == b ||
		BASE_ITEM_SCYTHE == b ||
		BASE_ITEM_SHORTBOW == b ||
		BASE_ITEM_SHORTSPEAR == b ||
		BASE_ITEM_SHORTSWORD == b ||
		BASE_ITEM_SLING == b ||
		BASE_ITEM_THROWINGAXE == b ||
		BASE_ITEM_TWOBLADEDSWORD == b ||
		BASE_ITEM_WARHAMMER == b ||
		BASE_ITEM_WHIP == b;
}

void register_genguards() {
	SetLocalString(GetModule(), "genguard_citydoors_guard_tag", "sl_bogenschuetze");
	SetLocalInt(GetModule(), "genguard_citydoors_reject_weapons", 1);
	SetLocalInt(GetModule(), "genguard_citydoors_reject_helmets", 0);
	SetLocalInt(GetModule(), "genguard_citydoors_denysr_dunkelelf", 0);
}

void main() {
	struct EventInfo e = GetEventInfo();

	if ("module_load" == e.ev)
		register_genguards();

	if (
			("door_failtoopen" == e.ev) &&
			(GetLocalString(e.runnable, "genguard_type") != "" ||
				GetLocalInt(e.runnable, "genguard_active"))
	) {
		string genguard_type = GetLocalString(e.runnable, "genguard_type");

		if (GetLocalInt(e.actor, "genguard_override"))
			return;

		string guard_tag = "";
		if (genguard_type != "")
			guard_tag = GetLocalString(GetModule(), "genguard_" + genguard_type + "_guard_tag");
		if (GetLocalString(e.runnable, "genguard_guard_tag") != "")
			guard_tag = GetLocalString(e.runnable, "genguard_guard_tag");

		object guard;
		int allow = true; int throw_me_out = false;
		location ltarget;

		object otarget = GetTransitionTarget(e.runnable);
		if (is_valid(otarget))
			ltarget = GetLocation(otarget);
		else
			// This works, because the player always rotates to
			// face the door on click.
			ltarget = GetAheadLocation(e.actor);

		// Try to find a guard, use the door otherwise.
		if ("" != guard_tag)
			guard = GetNearestObjectByTag(guard_tag, e.runnable);

		if (GetDistanceBetween(guard, e.actor) > GENGUARD_MAX_DISTANCE_TO_ACTOR)
			guard = OBJECT_INVALID;

		if (!is_valid(guard))
			guard = e.runnable;

		// outside: facing actor = facing runnable
		// inside: facing actor opposite facing runnable
		// We're just assuming here. Testing will have to show if it works out.
		bool is_inside = (GetFacing(e.actor) - GetFacing(e.runnable)) <= 20f
			&& GetFacing(e.runnable) - GetFacing(e.actor) >= 20f;

		string subrace = GetLocalString(e.actor, "SR_Subrace");

		if (((genguard_type != "" && GetLocalInt(GetModule(), "genguard_" + genguard_type + "_reject_helmets")) ||
				GetLocalInt(e.runnable, "genguard_reject_helmets")) &&
				is_valid(GetItemInSlot(INVENTORY_SLOT_HEAD, e.actor))) {
			AssignCommand(guard, SpeakString("Zeigt Euer Gesicht, ehe Ihr passieren duerft!"));
			allow = false;
		
		} else if ((genguard_type != "" && GetLocalInt(GetModule(), "genguard_" + genguard_type + "_denysr_" + subrace)) ||
				GetLocalInt(e.runnable, "genguard_denysr_" + subrace)) {
			AssignCommand(guard, SpeakString("Die Euren sind hier nicht willkommen! Haut ab, ehe wir Euch fortjagen!"));
			if (is_inside)
				throw_me_out = true;
			else
				allow = false;

		} else if (((genguard_type != "" && GetLocalInt(GetModule(), "genguard_" + genguard_type + "_reject_weapons") ) ||
			GetLocalInt(e.runnable, "genguard_reject_weapons"))
				&& is_weapon(GetItemInSlot(INVENTORY_SLOT_RIGHTHAND, e.actor))) {
			AssignCommand(guard, SpeakString("Steckt die Waffe weg!"));
			allow = false;
		}

		if (allow)
			AssignCommand(guard, SpeakString("Alles in Ordnung, Ihr duerft passieren."));

		if (throw_me_out || allow)
			DelayCommand(2f, AssignCommand(e.actor, JumpToLocation(ltarget)));

		AssignCommand(e.runnable, ClearAllActions());
		AssignCommand(e.runnable, ActionCloseDoor(e.runnable));
		event_stop_end_suppress();
	}
}
