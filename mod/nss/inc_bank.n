extern("inc_cdb")
extern("inc_lists")
extern("inc_currency")

/**
 * Deposit money worth "value" in the given account.
 * Optionally give byCid or byName to elaborate in the tx log.
 * value is always a positive number.
 * Returns true on success, false on invalid account.
 */
bool bank_deposit(int accountId, int value,
		int byCid = 0, string byName = "");

/**
 * Withdraw money worth "value" from the given account.
 * Does not observe credit limits.
 * value is always a positive number.
 * Optionally give byCid or byName to elaborate in the tx log.
 * Returns true on success, false on invalid account.
 */
bool bank_withdraw(int accountId, int value,
		int byCid = 0, string byName = "");

bool bank_tx(int accountId, int value,
		int byCid = 0, string byName = "", bool interest = false);

bool bank_tx_2(int accountFrom, int accountTo, int value,
		int byCid = 0, string byName = "");

int bank_pay_interest(int accid, int border = 0,
		object oNotify = OBJECT_INVALID);

int bank_calculate_interest(int accountId);

bool bank_withdraw(int accountId, int value,
		int byCid = 0, string byName = "") {
	if (value < 1)
		return false;

	return bank_tx(accountId, - value, byCid, byName);
}

bool bank_deposit(int accountId, int value,
		int byCid = 0, string byName = "") {
	if (value < 1)
		return false;
	
	return bank_tx(accountId, value, byCid, byName);
}

bool bank_tx(int accountId, int value,
		int byCid = 0, string byName = "", bool interest = false) {

	// Always pay interest before doing txn
	if (!interest)
		bank_pay_interest(accountId);

	pQ("select balance from bank.accounts where id = " + pSi(accountId));
	if (!pF())
		return false;
	int balance = pGi(1);

	pQ("insert into bank.tx (account, cid, name, value, balance_after, interest)" +
		"values(" +
			pSi(accountId) + "," + pSi(byCid) + "," +
			pSs(byName) + "," + pSi(value, false) + "," +
			pSi(balance + value, false) + "," + pSb(interest) +
		");"
	);
	pQ("update bank.accounts set balance = balance+" + pSi(value, false) +
			", updated_on = now() where id = " + pSi(accountId));

	return true;
}

bool bank_tx_2(int accountFrom, int accountTo, int value,
		int byCid = 0, string byName = "") {

	if (value < 1)
		return false;

	if (bank_withdraw(accountFrom, value, byCid, byName))
		return bank_deposit(accountTo, value, byCid, byName);
	else
		return false;
}

int bank_calculate_interest(int accountId) {
	pQ("select bank.interest_for(" + pSi(accountId) + ");");
	if (pF())
		return pGi(1);
	return 0;
}

int bank_pay_interest(int accid, int border = 0,
		object oNotify = OBJECT_INVALID) {
	pQ("select name from bank.accounts where id = " + pSi(accid));
	if (!pF())
		return 0;
	string account = pGs(1);

	int interest = bank_calculate_interest(accid);
	if (abs(interest) > abs(border)) {
		pQ("select to_char(t.created_on, 'DD.MM.YY HH24:MI') from " +
			"bank.tx as t where account = " + pSi(accid) +
			" order by id desc limit 1;");
		pF();
		string since = pGs(1);
		if (is_valid(oNotify))
			SendMessageToPC(oNotify,
				ColorTag(cLightGrey) +
				account + " (Zinsen seit " + since + "): " +
				ValueToString(interest)
			);
		bank_tx(accid, interest, 0, "Zinsen seit " + since, true);
	}
	return interest;
}

const string TTT = "bank";

void MakeBankDialog(object oPC, object oBank) {
	int bankId = GetLocalInt(oBank, "bank_id");
	if (!bankId) return;

	ClearList(oPC, TTT);

	int nMenuLevel0 = GetMenuLevel(oPC, TTT, 0);
	int nSelected   = GetListSelection(oPC);

	int cid = GetCharacterID(oPC);

	if (!cid)
		return;

	if (nMenuLevel0 == 0) {
		string sText = "Willommen! Ihr habt noch keine Konten bei uns, " +
			"doch eine Einrichtung ist rasch geschehen und kostet Euch nichts. " +
			"Bei einer Einrichtung wird ein Privat- und Geschäftskonto angelegt. " +
			"Sobald Ihr ein solches Konto bei uns führt, wird all Euer Berufsgold " +
			"auf dieses eingezahlt, anstelle ins Inventar - und Ihr profitiert von " +
			"den exzellenten Zins-Konditionen!";
		string bankname;
		int owningCount = 0;

		pBegin();
		string cA = pDeclare("select b.id, a.id, x.id, a.balance, b.name, a.name, " +
			"x.allow_read, x.allow_withdraw, x.allow_deposit from " +
			"bank.banks b, bank.accounts a, bank.access x where " +
			"b.id = a.bank and x.account = a.id and b.id = " + pSi(bankId) +
			" and (x.cid = " + pSi(cid) + " or x.cid is null) " +
			"and a.suspended = false order by x.cid, a.name asc;");
		while (pCursorFetch(cA)) {
			int bankid  = pGi(1);
			int accid   = pGi(2);
			int axid    = pGi(3);
			int balance = pGi(4);
			bankname    = pGs(5);
			string account = pGs(6);
			bool allow_read = pGb(7);
			bool allow_withdraw = pGb(8);
			bool allow_deposit = pGb(9);

			if (account == "")
				account = itoa(bankid) + "-" + itoa(accid);
				
			if (allow_read) {
				string balanceString = ValueToString(balance);
				AddListItem(oPC, TTT, ColorTag(cLightGrey) + account + ": " +
						balanceString);
				SetListInt(oPC, TTT, axid);
			} else if (allow_withdraw || allow_deposit) {
				AddListItem(oPC, TTT, ColorTag(cLightGrey) + account);
				SetListInt(oPC, TTT, axid);
			}

			if (allow_read) {
				// Only pay interest on view if more than limit gold.
				bank_pay_interest(accid, 100, oPC);

				owningCount++;
			}
		}
		pCursorClose(cA);
		pCommit();

		if (owningCount > 0)
			sText = "Willkommen bei " + cGold + bankname + cClose +
				"! Ihr habt Zugriff auf folgende Konten:";

		else {
			AddListItem(oPC, TTT, "Standardkonten anlegen");
			SetListString(oPC, TTT, "createPrimary");
			SetListInt(oPC, TTT, 0);
		}

		ResetConvList(oPC, oPC, TTT, 50000, "bank_cb", sText, "", "");
	} else {
		string sText = "hwat?";

		int axid = GetLocalInt(oPC, "bank_axid_selection");
		pQ("select a.balance, a.id, to_char(a.created_on, 'DD.MM.YY HH24:MI'), " +
			"a.credit, a.name, b.id, x.allow_read, x.allow_withdraw, x.allow_deposit, " +
			"a.interest, a.credit_interest " +
			"from bank.accounts a, bank.access x, bank.banks b where " +
			"a.id = x.account and b.id = a.bank and x.id = " + pSi(axid));
		if (pF()) {
			int balance = pGi(1);
			int accid = pGi(2);
			string createdOn = pGs(3);
			int credit = pGi(4);
			string accountName = pGs(5);
			int bankid = pGi(6);

			bool allow_read = pGb(7),
				allow_withdraw = pGb(8),
				allow_deposit = pGb(9);

			float interest = pGf(10),
				credit_interest = pGf(11);
	
			if (accountName == "")
				accountName = itoa(bankid) + "-" + itoa(accid);
			else
				accountName += " (" + itoa(bankid) + "-" + itoa(accid) + ")";

			int playerMoney = Money2Value(CountInventoryMoney(oPC));
			pQ("update bank.accounts set accessed_on = now() where id = "
					+ pSi(accid));

			pQ("select c.character, allow_read, allow_withdraw, allow_deposit, default_income" +
				" from bank.access x left join characters c" +
				" on c.id = x.cid where x.account = " + pSi(accid) + ";");
			string who;
			while (pF()) {
				string cname = pGs(1);
				bool read = pGb(2), withdraw = pGb(3), deposit = pGb(4),
						default_income = pGb(5);
				cname += "(";
				if (read) cname += "h";
				if (withdraw) cname += "a";
				if (deposit) cname += "e";
				if (default_income) cname += "i";
				cname += ")";
				who += cname + ", ";
			}

			if (GetStringLength(who) > 0)
				who = GetStringLeft(who, GetStringLength(who) - 2);
			
			string cs = ColorTag(cLightGrey);
			sText = cs+"Konto: " + ColorTag(cOrange) + accountName;
			if (allow_read) {
				sText += "\n" +
				cs+"Aktueller Kontostand: " + ValueToString(balance) + "\n" +
				cs+"Maximaler Kredit: " + ValueToString(credit) + "\n" +
				cs+"Jahreszins p.a.: " + ColorTag(cGreen) +
					itoa(ftoi(interest * 100)) + "%\n" + ColorTagClose() +
				cs+"Schuldzins p.a.: " + ColorTag(cRed) +
					itoa(ftoi(credit_interest * 100)) + "%\n" + ColorTagClose() +
				cs+"Eigenes Gold: " + ValueToString(playerMoney) + "\n" +
				cs+"Zugriff hat: " + who + "\n" +
				cs+"Konto erstellt am: " + createdOn;
			}

			int smallMoney = playerMoney % 1000;

			int allowance = balance + credit;

#define rem(title, intval) if (allow_withdraw && allowance > 0 && allowance >= intval) {\
	AddListItem(oPC, TTT, title); SetListInt(oPC, TTT, -  intval); \
	SetListString(oPC, TTT, "tx"); \
	SetListDisplayMode(oPC, TTT, intval); }

#define add(title, intval) if (allow_deposit && playerMoney > 0 && playerMoney >= intval) {\
	AddListItem(oPC, TTT, title); SetListInt(oPC, TTT,  + intval); \
	SetListString(oPC, TTT, "tx"); \
	SetListDisplayMode(oPC, TTT, intval); }

			rem("Abheben: 5pp",         5000);
			rem("Abheben: 50pp",       50000);
			rem("Abheben: 100pp",     100000);
			rem("Abheben: 250pp",     250000);
			rem("Abheben: 500pp",     500000);
			rem("Abheben: 1000pp",   1000000);
			if (balance > 0)
				rem("Abheben: alles (" +
					ValueToString(balance) + ")", balance);
			if (credit > 0)
				rem("Abheben: alles mit Kredit (" +
					ValueToString(allowance) + ")", allowance);

			add("Einzahlen: 5pp",       5000);
			add("Einzahlen: 50pp",     50000);
			add("Einzahlen: 100pp",   100000);
			add("Einzahlen: 250pp",   250000);
			add("Einzahlen: 500pp",   500000);
			add("Einzahlen: 1000pp", 1000000);
			add("Einzahlen: alles (" + ValueToString(playerMoney) + ")", playerMoney);
			if (smallMoney > 0)
				add("Einzahlen: alles Kleingold (" + ValueToString(smallMoney) + ")", smallMoney);
			if (balance < 0)
				add("Einzahlen: auf 0 (" + ValueToString(- balance) + ")", - balance);

			if (allow_read) {
				AddListItem(oPC, TTT, "Historie");
				SetListString(oPC, TTT, "hist");
			}
		}

		ResetConvList(oPC, oPC, TTT, 50000, "bank_cb", sText, "", "",
				"bank_m0", "Zurueck");
	}
}
