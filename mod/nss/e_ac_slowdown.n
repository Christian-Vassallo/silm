extern("inc_events")
extern("_gen")

// Note: This is not written for readability.
// It is written for efficiency.

bool supernatural_slow_effect(object oPC, int remove_when = false, int add_when_not = false, int amount = 33) {
	effect e = GetFirstEffect(oPC);
	while (GetIsEffectValid(e)) {
		if (GetEffectType(e) == EFFECT_TYPE_MOVEMENT_SPEED_DECREASE &&
			GetEffectDurationType(e) == DURATION_TYPE_PERMANENT &&
			GetEffectSubType(e) == SUBTYPE_SUPERNATURAL
		) {
			if (remove_when) {
				// SendMessageToAllDMs("a_ac_slowdown.n: Removing ac slowdown from " + GetName(oPC));
				RemoveEffect(oPC, e);
			}
			return true;
		}
		e = GetNextEffect(oPC);
	}
	if (add_when_not) {
		ApplyEffectToObject(DURATION_TYPE_PERMANENT,
			SupernaturalEffect(EffectMovementSpeedDecrease(amount)),
		oPC);
		// SendMessageToAllDMs("e_ac_slowdown.n: Adding ac slowdown to " + GetName(oPC));
	}

	return false;
}

void each(object oPC, object eqitem) {
	object armor = GetItemInSlot(INVENTORY_SLOT_CHEST, oPC);

	int ac = 0;
	if (GetIsObjectValid(armor))
		ac = GetArmorAC(armor); /* nwnx_functions */

	if (ac >= 5)
		supernatural_slow_effect(oPC, false, true, 33 - (8 - ac) * 5);
	else
		supernatural_slow_effect(oPC, true, false);
}

void main() {
	struct EventInfo ei = GetEventInfo();

	if ("item_equip" == ei.ev) {
		if (BASE_ITEM_ARMOR == GetBaseItemType(ei.actedon))
			each(ei.actor, ei.actedon);
	}

	if ("item_unequip" == ei.ev) {
		if (BASE_ITEM_ARMOR == GetBaseItemType(ei.actedon))
			each(ei.actor, ei.actedon);
	}
}
