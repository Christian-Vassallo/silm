//:://////////////////////////////////////////////
//
// Wichtige Funktionen fuer das Spurenlesen
//
// Name: tracking_inc
//
// Erstellt:     Christian Teister am 13.08.2006
// Aktualisiert: Christian Teister am 13.08.2006
//
//:://////////////////////////////////////////////

#include "inc_pgsql.nh"
__sp_extern("inc_cdb")

const string sTrackSQLTable = "tracks";
const float fLeaveTracksHB = 2.0f;

void trackDebug(string message) {
	if ( GetLocalInt(GetModule(), "tracking_debug") == 1 ) {
		WriteTimestampedLogEntry("trackDebug: " + message);
	}
}

float getDistance(float x1, float y1, float x2, float y2) {
	float deltaX = x1 - x2;
	float deltaY = y1 - y2;
	return sqrt(deltaX * deltaX + deltaY * deltaY);
}

//Rechnet das Gewicht in die Spurentiefe um
int getTrackDeep(int weight) {
	if ( weight > 2000 ) return 5;
	else if ( weight > 1500 ) return 4;
	else if ( weight > 800 ) return 3;
	else if ( weight > 400 ) return 2;
	else return 1;
}


void deleteTrackHB(object oTrack, object oSpotter, float fDeleteDistance) {
	if ( GetArea(oTrack) != GetArea(oSpotter) || GetDistanceBetween(oTrack, oSpotter) > fDeleteDistance )
		DestroyObject(oTrack);
	else
		DelayCommand(4.0f, deleteTrackHB(oTrack, oSpotter, fDeleteDistance));
}

//Zeigen einer Spur
int showTrack(object oPC, int cid, float fDist, int id, location loc, int age, int deep, int size, int gender, int speed,
			  int bareFoot) {
	//Entdeckte Spur auf Boden anzeigen
	object oTrack = GetNearestObjectToLocation(OBJECT_TYPE_PLACEABLE, loc, 1);
	if ( GetIsObjectValid(oTrack)
		&& GetResRef(oTrack) == "tracking_track" && GetLocalInt(oTrack, "id") == id ) {
		trackDebug(IntToString(id) + ": not showing, already present.");
		return 0;
	}

	vector v = GetPositionFromLocation(loc);
	v.z += 0.03;
	object area = GetAreaFromLocation(loc);
	float f = GetFacingFromLocation(loc);
	loc = Location(area, v, f);

	oTrack = CreateObject(OBJECT_TYPE_PLACEABLE, "tracking_track", loc);
	//Daten auf Spurenobjekt speichern
	SetLocalInt(oTrack, "id", id);
	SetLocalInt(oTrack, "cid", cid);
	SetLocalInt(oTrack, "age", age);
	SetLocalInt(oTrack, "deep", deep);
	SetLocalInt(oTrack, "size", size);
	SetLocalInt(oTrack, "gender", gender);
	SetLocalInt(oTrack, "speed", speed);
	SetLocalInt(oTrack, "bareFoot", bareFoot);

	//Spurobjekt nach 60 Sekunden wieder loeschen
	//DestroyObject(oTrack, 16.0f);
	deleteTrackHB(oTrack, oPC, fDist);

	trackDebug(IntToString(id) + ": showing for " + GetName(oPC));
	return 1;
}


//Loescht alle Spuren die aelter als x RL-Tage sind
void deleteOldTracks() {
	pQ("DELETE FROM " + sTrackSQLTable + " WHERE age < (unixts() - (3 * 60*60*24));");
}

// Suchen nach einer Spur im Umkreis der aktuellen Position
void track(object oPC, int bShowMessage = TRUE) {
	if ( GetLocalInt(GetModule(), "tracking") != 1 ) return;

	deleteOldTracks();

	object area = GetArea(oPC);

	//Suchradius bestimmen
	float radius = 3.0f;
	if ( GetWeather(area) != WEATHER_CLEAR ) radius -= 2.0f; //Regen?
	radius += GetSkillRank(SKILL_SPOT, oPC) / 5.0f; //Entdecken-Skill
	if ( GetIsDay() == FALSE ) radius -= 2.0f; //Nacht?
	radius += GetLevelByClass(CLASS_TYPE_RANGER, oPC) / 2.0f; //Waldlaeufer-Bonus
	radius += GetLevelByClass(CLASS_TYPE_DRUID, oPC) / 3.0f; //Druiden-Bonus

	string sArea = pE(GetResRef(area));
	vector pos = GetPosition(oPC);
	string xmin = FloatToString(pos.x - radius);
	string xmax = FloatToString(pos.x + radius);
	string ymin = FloatToString(pos.y - radius);
	string ymax = FloatToString(pos.y + radius);


	int trackNumber = 0;
	string sSQL =
		"SELECT id,area,x,y,facing,round( unixts() / 3600) as age,deep,size,gender,speed,barefoot,character FROM "
		+ sTrackSQLTable + " WHERE area = " + sArea + " "
		+ "AND x>" +
		xmin + " AND x<" + xmax + " AND y>" + ymin + " AND y<" + ymax + " LIMIT 4";
	pQ(sSQL);

	while ( pF() ) {
		if ( pG(2) == "" )
			return;

		trackDebug("Found track: " + pG(2) + ", radius = " + FloatToString(radius));
		//Spurenalter beeinflusst Spurensuche
		int age = StringToInt(pG(6)); // in hours
		radius -= age / 10;

		trackDebug("After Age sub: " + FloatToString(radius) + ", age = " + IntToString(age));

		//Spurentiefe beeinflusst Spurensuche => je tiefer desto besser
		int deep = StringToInt(pG(7));
		radius += IntToFloat(deep) / 2.0f;

		trackDebug("After deep: " + FloatToString(radius));


		float x = StringToFloat(pG(3));
		float y = StringToFloat(pG(4));
		float distance = getDistance(pos.x, pos.y, x, y);

		trackDebug("dist vs rad: " + FloatToString(distance) + " <? " + FloatToString(radius));


		if ( distance < radius ) {
			//Spur gefunden => anzeigen
			trackDebug("-> can see it");

			float facing = StringToFloat(pG(5));
			location loc = Location(area, Vector(x, y, 0.0f), facing);

			int nID = StringToInt(pG(1));
			int nCID = StringToInt(pG(12));
			int size = StringToInt(pG(8));
			int gender = StringToInt(pG(9));
			int speed = StringToInt(pG(10));
			int bareFoot = StringToInt(pG(11));
			if ( showTrack(oPC, nCID, radius, nID, loc, age, deep, size, gender, speed, bareFoot) )
				trackNumber++;
		}
		//Naechste Spur
	}
	if ( bShowMessage && trackNumber > 0 )
		FloatingTextStringOnCreature("Du hast " +
			IntToString(trackNumber) + " Spur" + ( trackNumber > 1 ? "en" : "" ) + " gefunden!", oPC, FALSE);
}



//Heartbeat bei dem der Charakter spuren hinterlaesst
void leaveTracksHB(object oPC) {
	if ( !GetLocalInt(GetModule(), "tracking") ) {
		trackDebug("tracking not active");
		return;
	}

	if ( GetIsDM(oPC) )
		return;


	//Erneuter Aufruf nach "fLeaveTracksHB" Sekunden
	DelayCommand(fLeaveTracksHB, leaveTracksHB(oPC));



	object area = GetArea(oPC);

	//Kein Tracking waehrend Gebietsuebergang
	if ( area == OBJECT_INVALID ) {
		trackDebug(GetName(oPC) + " in AT");
		return;
	}

	//Kein Tracking in nicht natuerlichen Gebieten
	if ( GetIsAreaNatural(area) != AREA_NATURAL ) {
		trackDebug(GetName(oPC) + " in nonnatural area");
		return;
	}

	if ( GetLocalInt(oPC, "use_active_tracking") ) {
		if ( GetDetectMode(oPC) == DETECT_MODE_ACTIVE ) {
			//trackDebug(GetName(oPC) + " is searching for tracks");
			track(oPC, GetLocalInt(oPC, "active_tracking_message"));
		} else {
			//trackDebug(GetName(oPC) + " is NOT searching for tracks");
		}
	}



	// Now the conditions that say if oPC leaves tracks.


	// oPC does not do tracks.
	if ( GetHasFeat(FEAT_TRACKLESS_STEP, oPC) )
		return;


	//Bestimmung des mindest Abstands zwischen den Spuren
	float trackDistance = 5.0f;

	int speed = 4; //Normal
	if ( GetWeather(area) != WEATHER_CLEAR ) trackDistance += 1.5f; //Bei Schnee und Regen weniger Spuren
	trackDistance += GetSkillRank(SKILL_MOVE_SILENTLY, oPC) / 10.0f; //LeiseBewegenSkill-Bonus
	if ( GetDetectMode(oPC) == DETECT_MODE_ACTIVE ) {
		//Wenn Suchend
		trackDistance += 2.0f;
		speed = 3; //Suchend
	}
	if ( GetStealthMode(oPC) == STEALTH_MODE_ACTIVATED ) {
		//Wenn Schleichend
		trackDistance += 3.0f;
		if ( speed == 3 ) speed = 1; //Schleichend und suchend
		else speed = 2; //Schleichend
	}

	trackDistance += GetLevelByClass(CLASS_TYPE_RANGER, oPC) / 2.0f; //Waldlaeufer-Bonus
	trackDistance += GetLevelByClass(CLASS_TYPE_DRUID, oPC) / 3.0f; //Druiden-Bonus

	//Barfuss?

	int bareFoot = GetItemInSlot(INVENTORY_SLOT_BOOTS, oPC) == OBJECT_INVALID;
	if ( bareFoot )
		trackDistance += 3.0f;

	location lastTrackLoc = GetLocalLocation(oPC, "lastTrackLocation");
	location currentLoc = GetLocation(oPC);

	//Bestimme ob eine neue Spur gesetzt wird
	int newTrack = FALSE;
	if ( GetAreaFromLocation(currentLoc) != GetAreaFromLocation(lastTrackLoc) ) {
		trackDebug("( " + GetName(oPC) + " ) Gebietswechsel!");
		newTrack = TRUE;
	} else {
		vector currentPos = GetPositionFromLocation(currentLoc);
		vector lastTrackPos = GetPositionFromLocation(lastTrackLoc);
		float distance = getDistance(lastTrackPos.x, lastTrackPos.y, currentPos.x, currentPos.y);
		trackDebug("( " + GetName(oPC) + " ) Distanz zur letzten Spur: " + FloatToString(distance));
		if ( distance > trackDistance )
			newTrack = TRUE;
	}

	//Neue Spur speichern
	if ( newTrack ) {
		int nCID = GetCharacterID(oPC);
		if (nCID < 1)
			return;
		SetLocalLocation(oPC, "lastTrackLocation", currentLoc);

		//Spurentiefe bestimmen
		int deep = getTrackDeep(GetWeight(oPC));

		string sArea = pE(GetResRef(area));
		vector pos = GetPositionFromLocation(currentLoc);
		string x = FloatToString(pos.x);
		string y = FloatToString(pos.y);
		string facing = FloatToString(GetFacingFromLocation(currentLoc));
		string gender = IntToString(GetGender(oPC));
		string size = IntToString(GetCreatureSize(oPC));

		string sSQL = "INSERT INTO " + sTrackSQLTable + " (area , x , y , facing , "
					  + "deep , size , gender , speed , barefoot, age, character )"
					  + " VALUES (" +
					  sArea + ", '" + x + "', '" + y + "', '" + facing + "', '" + IntToString(deep) + "', "
					  + "'" +
					  size +
					  "', '" +
					  gender +
					  "', '" +
					  IntToString(speed) +
					  "', '" + IntToString(bareFoot) + "', unixts(), " + IntToString(nCID) + " );";
		pQ(sSQL);
		trackDebug("( " + GetName(oPC) + " ): " + sSQL);
	}
}

